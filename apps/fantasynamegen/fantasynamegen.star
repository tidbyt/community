"""
Applet: FantasyNameGen
Summary: Generate fantasy names
Description: Randomly generate fantasy/RPG characters.
Author: Ryan Allison
"""

load("encoding/base64.star", "base64")
load("random.star", "random")
load("render.star", "render")
load("schema.star", "schema")

bridge = base64.decode("""
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
""")

campfire = base64.decode("""
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
""")

castle = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAEmtJREFUaENtWVusXNdZ/tbaa9/mei4en3PsY8eOndiOnaR1Q1oKJW2oilRAtKVcxANQKUKp+gBSX0HqA1QFAeIFCYkXBBKlVAWkij7QiyBOeg910qZ1Gjv1PTk+Z+acOTOz73tt9P1r5uAIRrLncmb2Xuv/v//7v/9b6tD6qaZpGiiloLWGVQrG+AiDCK1WC3zMZjPAlijLUt4vvm+tldeLZ15j8eBr/m3x4LXvf3iegfEDBFHb3RcN+G2tFDzPk9/ymdfWfG8tb4xGAXmawdoKsO76/A7v52ktvwmjlry3dYmqrufXUm6dtpZrlbZGXddQDMDBwrl+5cEYA8/z0e33EPoB8jxHkkxRl6W7mefLd3ih2lpZTFNXcqMaFlrW9b/BkHdKzf+5v2kTQhsD3wQu+MbjlxD4PsMAP/Dh+wE8T6MoCiilYesaaZqiKDKoeUD5GQPBjXvGQ9TqSCC4hDJNUFWFbBTgOhvUtoSyTLhGxb0sD040zMAiCIvXnh+h3W4jCAP0l5aQTGcYDrclAL4fyg0VlMtb06CqKpRV4dDRAFWVy0atcpvnd7Q2MFrDRLEsitfQjYYXhRKuqigRxRHiVgftVgfKOCQ0tRX0MRG8vwS84TNxo1CVBTqdDlqtLsIwlGsnSYKqyFDmiaCAQXwL0ueIkgAcZEgraOWg6hlfFhKEIXr9HvrdHipb4/aNW6htjSAIEEYh7Lx8eANCkzdh1G1dOcjWFo3R8HQg1w38QLKntYe6rqA94+BKqGuNKIoQtdpot7sI4xhWoGpx5/Z1rCwPUOQFLGos9Zfld0TibDrF5rFjSNNC1vrmG3ckALNkjLqs5DdVmQvKuD+iZlG6EoAFPJmGRuDh+MAzIVpEQRBg48gm2u0O8jzD3t4e8iI/gHVZ5nOYKmjJSAXbWLlxY0sXBM+hzPihq3VoNE0tNW08AygN4/sIowi9bh9+GCEwvluHb/Dyd5/DidOPIYpiF8gohO/7gjxeV1CpPcySCdLZFLu7uyhylosrAd6DQSY8CUhb1a6c3xIAEhyDwIVq8oCHbrePtY11WXKn25f3o9GOLGJ/vCf1RnhyIUCDsmQp5HIDflbXjjfcw22aCCDChCTn9UvyY2nEgoAY7XYPyirE3bZwwYtf/wrOvu1n0O/14fsGVeVKgs8e67mqZLOOr/YFFdy4ra0kY5FYlpqUVUNeANTK4ZONbWqBpEBfGLeBH4Tyj5BlVgaH11HZBqurA+5Tol/bCtPp1EHMFiiyQiDLm0wmY+RZJnCT4Mw7hNKMMCSz/Iwfk3C5CRMGaHc6YIfo91cQt1tSEsbT+K//+CLe/d4PotVpCwqnkymqshRS5HsGWTZsa+RZglxqnl3KBZ97akiG3Px97UgtD47LeyE/ZkYbeS0QDCJZbJsLaXfQQMtnvV4PLeEHH7ujkUSdDwbF85SwNDc/3BliNhlLxH3hjJYQUpmn7HcwnuOFBQdFUQgTBGgRCe0OPKOlLfLz//7mJVx811PIs1IQWuT5ASn6AZOnZC11WaCeEyT5CUKYzHiDMi/u2/q8fa6unTjQAcyOVkY2wgWGYYwgjIX0orAFRcKShRusrx+B9g2M0qITGDRyBUmJAdqf7GI4HGLMMvE8JEkKy1KpayEi4xsoTwvCsjyHrz2YwIfxPLl+2CIBAlEYQimLb377BTz55Pug5ptjW1t0BW5uOpuhqUvpTFVdzbVELeVJdLA0iQDRE3ONIl1h5fADB4hYkKGZ92ZuxgSRZEUp9tlANtrtdtHpEAUtuYFraQplWcM3Bp1uF/2lPrI0w/7+Hvb3p/K9NNkXdhaxEseyGC6O7/k7Lkw0iPEQSPmFjmsm+7hz9Qe48ORTwiOeUhiPx3JfcgwfGcutKqUtkwwZBMKe9c97s+LSWXLA/lIW9wdgodycoPAlksK2QQxtXEmQwdnL4zjG4cOHJQDMAsmnKEtkaQqWHK8Rt1pYXl0BGg3f93Dv3pZknhuNWzGGwx3sjXdhjAefhOsbUXwk1Showw+NlAE3eeXyJewOR9CexlMf+FXM0hlmk6nclwlhF2IwuXG+rmpX92XB15VwELnClsw+oe8I8P8EgH/0NJWYEy+UxCwBET3kh9CHVr5kZzAYII4jYf40S1GWVgiPKKAY0cbHmTNnpJRs2eD48U1cefUK0nSGMitQVI7ICD+ih4FhAMIglDJTyoCKhNpjePtVjEYjKN3g2IOPS1dAUx1IcCKWa3TttEEyS5GKCmRnyAR1DGRFUqwdWTodUP0/JUCRorQshhekVicsKVurukAYtuVmrXZLUEKWphzO0twxOyHq+9KveZNupy8aYnVlWVrWdLaP7e1tVEUu7ZTanEGk5CYKWBrXf/x9nDh9XoJPErvxvUtIwhDv2ejj29sFTpw6J2iLiEpKaM/A9wJpbSKVyxJFkaAqa3nNEhCU5rnwjchnRcFm3xqARTcQ8cHWRJIzgdQiCY/vqadJjgsIsW83jdP5/JyB0soTuLoBxUNZUYh4OHfuHPb2dg/4YDaZUP8IeZZ5JiIkDANcvfwC3v6up1AWKfyojWs//AHK3W1sW4NHz15AZ7ACw/DL4ORLd/KNh5wbzTOBPUtzMpuhFn2Cg1J1kr1CWRRCyEKCizng/mcJAAceNKKxmVV2BxILSaoqORTN2RwKcdwVTkiSGVq9vpSPqux8qPGkU5A3SFpEVJUVqCvXv5mdOKS4qRFS9b30LSkNW7GWG0xm+4iiliO3qsLTP/+LItTKpkarFWG530MyTZEVJZI0lfXt7U+FKAXqLM26wmQ6lXmDr3lPagLFNnj/xhcymKwv2sCjNmAwXGtkEJgxGS4oaKkZPEdYrP3rV19FO/Lx4NmLB1xCuLEFaa9BO4qlvPib7a3b2NjYBBuAzTIUhKQCXnrxEuqqRC+IkNgSuxN2Dh/as6gajSrL8dHf+F0ROaHx8coLX8PKsZPoDtZgPB8Udq9dfQ2T/QmCVlfWnBW5aBMGiCWxCIw6tH6y4Wb5IBkRzqxxcOMS//sEEnmBq9Xz75CmOAxSzwu7d7B97y5UmUKbGCcePo+6dtqbA6rxFALC1hjJ3O0bV/HouQsIfI08TZGUJX70yitIkyFUVYH5t5wrZJAqYRvtJs2ywa99+COw0pYNvv/1r6KzvIbBqdOYJjkm45HwEmeWoqyxtNTH7v5EtAITJ74GhzaWwIABgMs2N0YEBEFLNiWmg3QGz2VgPoPzmVlUmrXOtslIuayOhtsiVpStsXnmMUHOjR9+T4Jw6swFoMokI3Hcwt27t7G5voE49BEQ3hQseYLXLn8DuW0kWCXH6NrCxAG09VDkM+kS7/+lj6IXxJgogyvfvYQkTXDqifdKQra2buH69esyyFV1A5hAap5agaRYVzVKagaWwGDjdCNtTtLENhRJhrhJgUnTyNh7MD6yPQYuGMLq4330+6sSvOl4hEjXqOBLEIio9c3TuH3zNSxHAdK6Rv/QEcy2bmH9+IPYHY8QBgE2B+vwYx/BbIilpWXc+s5/ouNXuLZX4ZMPRfirHydoVo+h12Q45NeYNC2UJoSX1bjwjsfx1eefR9TqYu3so/AUcG9nhNt3buLw4SO4u/WmXHOS5tL+GACSpLhBDaA2jp1tuPGFlidYpe3NA0A/gIxuvAiNrtw8TTlaWAzv3ZRWuHbsFJLZFGWRoKWBUhshm3YUYHntOIZvXEeb5kfgI+wfRrp9C2tHH8C9nR0cXxug3Wrh2kvPobQKpqFH0OD3njyNf/vmZXzm6Q38zYs5JmEfnSbBuQf6+PK1DGkd4uTmEezubGG/LLCuCuSnfpq+D3YnE9y5cwNHjhzH1devwkQtaC8UPcDME/oLO00dPfmocAA3zFbF2mEAOG87TyCQOT2dTbB777YgZe3oKWTJDLPxNiy1NxSWl1bQVAW0TJaByFqxn4hA46FtPNTU4HmKwBiEISVvAJQ5up0O6mwXeV1hdTpG16vwnkc28dKNO3jmXB+Xd8lPFRIb4eSRFmYTDz9+c4KXxg0+fG6Af3plhJUY2C4ajG2AxCpkVYNa004rofwI8EncThUu5LsIoSMnLjSsbxoK2pDcnA/A4mettDtdTKd7GG3fdbJVAd2VDYy27zj5yUaugKXlgQSpaADPWvR6fdi6QIutVAGrrQDjvERoLcJIo+3H4GzW9gMsBRrX3tzCukoxCIFD9RjvOrWO16cl3rkWYOY16C1F8JZ8rG0MUN7aRbpT4IWfDJHkPs5vRPjrKxqRl+Ph8xfxjZcvY996mBUNssYi9gNYE6Kqgdo2UgZ5laFk11k/fqFhxlmLZH6+ZpbjqC0W13B0G4xHnlXi53mwiJYPI9vdgeZsz0HIp1myiiyZoJYSAQxJrUiwvtyDqUv4tkC/34MHDxmz7gPbswoX2wpZEOL2zhgXezm6nsbbOwobZ5cxTQy+cOl1fOzXH4MNZvjac6/i47//UWT7Y/z5nz6PD/7cMezcyvDiXo6Z7qIsCyw9cB4vX72CulK4Oxri2ixBNUvxjguPYTcrcG9vgjBuobYaZW2h1jYfbrQgwHdeAHu070hub7SFhp1gbiiw9mVUBmTu5iNmdMTachqBKpAdoNEeYuPBqBqeaRCJ3QY8vNTGmCxcFIhsjaPtAFmRgIPsuw9pHNIKF8+sYO3JHq59b4g//uc7ePZDD+HT/3oFhzol0mGKv/vEz+IvP/cKfvt3zmN0LcGsrHBnbGVWmMQDfOfGNr594w3cmuRCxHSBn3joIbw23BMUNMpDSasAnlOCNCbjKEZF42DusbU7VFcjUYIMSpW7UVNp+vMe6OSzl1Ir0ptlG4vp0dGyLAHFCRIe2pGFUR56KoNuFB5fbSOoClwrNTzKX23xSLeGURFu3PoJ/uBDT6Ob3sTq+0+inLbw8T/8CraWVvCPn/4FLP3Ke/Dys/+AP/qXr8H0TyAst/Cp33obPvPvNzEcJ7hVcQIc4QMXL+JLL9/AhEwvXFSjHQQYDNawlxaYlTRIWA5zS8yRnbPCFqqQmRfbWmnUZQoaXfI3ZlTmNGa1RtYYIbpOyPHZgLNJVdLodEIj9BS6oY+W0YQNVgMfsQwiBaZFjU6k8dSKxpe2rKBgOssQGYXP/fIAf/bcFM/vJvjsxx5EGbRx9JPPYPQXf4+vXB7jy6++gY3xEH/yzE/hU1+6hks391HoANt5ir7xMLY19vPG+Ye0ymReaVApirAlsfdEpN1viIhvz0Z63+kPXV26/xyCeEghTiqxrBpxj7RqEFIZ0sQg9BlxOFEjnh8FjWnQ47mHBxzpdaGrAk8PfKR5hYlV+Pz1CQKOwqZBy3KQKfH40XVsZylMp41PvPMojr/zHI4+fR6fffZv8YWbu9BFg6guEKHEzVmCGgb7ysMws8jKSnzEgoKsaZDWTrLzH7sCFWa71UaWZHSFj8sssFB5ouLkHMOJIPIcL0YTwXn+FTyRznRenASmncUgLUcGo7xCyPkAFSsMhaKgslgKAFs3iLXCR84cArwAfpljO63w2R/dg/I89AINo4AEHkJf4/zhQ+CwvLnax2MnQtg3c3xraws3RikqBNhOJthNC0yKWrpTqQy6hi3Q9fqcZw1s01yDnfueSqOUIwtnmqjlw5sihRcmCM/TFiaifMZZPXDEx/4pwZojRGtOhhQ9tJ8rWMUyIstYbCwF2MoUyoL1XeLkck9MjK4xGJcWW5MEka/wm6eP4fOv30KoQ8S+s9jHrOXanTlSsRGZDSppYSxJ51ZZWA08/cjDuHlviEGvj500QVE36MVtDMe7SOgWVyXGhXOASNCcMimPSei8juqvbh4cjMhl56wvv1hsVOZ6hwra51LOlJV5IQiQ88H5ISWDI41BFukscEGLMXhgKUTQWPxkWpH7wIbyvgeO4Bs374q52gkCJHmOYU7jFKjBOiWJcpRyzi4dX7ZYSnx30BLgibMn2aeRliXuTRMstdu49uaOBCxNs4PEhVEgPEeyl83zGr2VowcBYD3fn/23BIHdgK6xZhQbcVcOPHcJjOMHCqNFuVBBUhMs/MbF2ZyoQFGIBvtpLpNfKwxcuWmF1NZyZuhOq93hyWC5j7SoMEtzOTtI5yc+rdAXm+tQu4W9ZIr9vILvaezTM+TRm9aoCxK6lnGdXLaQ+YLw3tJ6w4XKxplF9nQRuM7R4f1dKci84xZFj52GgiCETdAdT1M58jiL8HLF477vguqOvl0m+TlHb3e87s4TiB0eabuDcv7dFZtD3mqvK/yzlyaSRV7LOU606h1C+P8OzwbqUlBJJysIfJSUw4JRhSimlbco7gb/Az6igWenXComAAAAAElFTkSuQmCC
""")

castle2 = base64.decode("""
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
""")

castle3 = base64.decode("""
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
""")

castle4 = base64.decode("""
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
""")

cave = base64.decode("""
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
""")

cave2 = base64.decode("""
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
""")

colusseum = base64.decode("""
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
""")

dragon = base64.decode("""
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
""")

dungeon = base64.decode("""
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
""")

dungeon2 = base64.decode("""
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
""")

dungeon3 = base64.decode("""

""")

forest2 = base64.decode("""
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
""")

forest3 = base64.decode("""

""")

forest4 = base64.decode("""
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
""")

forest5 = base64.decode("""
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
""")

magma = base64.decode("""
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
""")

market = base64.decode("""

""")

market2 = base64.decode("""
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
""")

market3 = base64.decode("""

""")

statue = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAFe1JREFUaEM9mXmQXNd13n/37a+36dkHw8EAg8EyAAhgAIJYTBEkCBIiRVKyqJ1FS7JI2bLkcuKKU6lElVJFfyh/pFKWEy9KyRVZTMXaEluOLdGKJJMCF1EgBYAAsa+D2bfe+/XbX+reptNVKNTM3H7v3nO+853vfFfYTi6bnNyJH/jESYKu6wiho5FRqa0TxxGWbZHFGUHYwXZy7Nx9AnSBaZhowuTylX/CcmziMKTQO8im8UMkWUyCYGTnEOd++hL7jjyGZ2hce+MUQ8VxECmapmG6OWy3iGZopBlomYZhOqwt30LTdNI0Q2SAniIynUxk6JpJKhKEEGSZ/JJAZKn6GaEj1HKfRnUBzdCJIx9NE6QpCKGRRiFCfkcIhAzAxOQukiRBZAlxCrouMHSTNE2pNyp4rSbyqWEYYRoW9x/9EPK9mWGodVfO/1+EodPxffpGRtm48T7U24ptbp09RxT42PkikR+SJR5Tex5Xv9MME9stIBBopnyWThh1D5YmKU7OQAhDJabdrJIlKfKTISMCQtNUouQ+5f42jG5kYXEWw7AgSeg0b5FEkQqiDESWCbIk7gZKPUd7LwBbd6tsJKmMYia3oxYsLc4Q+j6aRAWov9tujv0Hn0LohjpAuT/PhXOvEXhNhrdPMXPxIrv3PKqeI7P6zus/xG/VKI2Md5+lhey77xmCKMIxHTKFOIFuaERx92CmZZIIQc621GGSOMYL2oQdTx1GF6kKgkg1CRmSJCPNwi5SNKEQ0qpcU2s0uXOFFIlukziK1Zo0iboIGN24NevrH0YTmToguoapmeoLNd/DdfNUF+cI44DegQ3olsv4xmksy0IzdWzXpWMGRGGHVr3Brbde48DRj5FlEbevnZJRI+j4JJpg34HHKRTKdHxP/lplLUsFmRAYhqH+d20TzbBUcOVhZS7kwTJSvI5HFgekyAOlKvOaqSGyjMjz1DrN6EI7aM2p58s1sjwymcE0I4kTVTYSTWkWI/YeeLAbdgWJRG1E6KbKuPzD6voKOA7lgSGWr15USNm8dYrh8f1oluSAiF/+7H8TxRFp3M3C0Ud/m0Le5R+/+58p9g9JuiBzckxPP4HQdBzHUVD3k5gsThU8ZQnJoBqmrWpfyDKUULYs0jQhDUN16CQMVTIkxNMsQdMyRNgkTkIS4ajydYpFvMoMSRSjkRLFMVmaksrDp7EqL5lsFZxDDz6RpfJhCNI4wLAsFTlZj2kqEJbGu1cuUegpkxeCicntJGmiNj20+RDvvPoDVhdmsHIuaQK5YpHpwx9HFwkTD+3g5b/6S1rVOmh5pnYdQ2CoIMuoZEIjjEJ008YybXSZTV1WtYGRc1QZmZZFKIMbdQ+hORZZxyOMIkQW4tWXaa6sYOVMeobG0WQQM58kCYnDQP0Lg0AFTqZUErVEgDpzHCHuf+RDmaopySNZApqs/wzDsBX8zl+9qDZnOhZ5BJsmp2RJqc31je/l2pl/Ym32FoEfSPakODDMoYc+xWjZ4aevfI+gVsPK2eqwO3Y/jWWYqjIl3DXHhlgG01DdJ9M1rFyeTHYj20ZYOlgGIkmJg6BLrPLlGjRWb7FaWWTb4SPcfO20QqKpOYzt2E4WttTaKIoI220Cr00cRgrhkR90O0HSDao4cuJDWZZ225+EdyZ5RbKr6G7q3OUL7xWDoKBp7Ny7XxGgjF5pZBu5Qg+v/f23yOKEII544PHnsSwDP4w5/ZNvYFoGbr4PP4w4dPw53P6YK+feYmRqGtsrqvYkDBNdcYCG4doKphIVpaF+TMcmzTIC3ydVJZPwyx/+kDReY+zADhbOXEIYGQNbd9Cev8PmiW0URzeSRKE6rOwCvtcmCjqq7hXRpxmxDEAcIx78wMcz1dMkgRo6mmRM1TYMtbnTb58ml8+hOMtrMn30GJrQSdKY/MAElmVz7ewp/HaDdr3BkadfQKRCdY7qwhu4vQM0qi3mblxl//FPcuPX/0B9rYIuDA4+8QI9PXmaba9LgoaObpgqQ/mBMvneHrUPyeZhHDJz4xpb947hNDp8/+v/hcJQL62VNmZBx0gygsgnDSImt21lw+49Cv7ykDIAEgGy5jN5cEmCcdJt/Sc+/JlMwlkSjOyrEl9CMoIuEWBw5cYV1lcWyRdLRGsrHDh2Ek2HJM4UGkuj21meOU+cCe6ce5v3ffiLMpJdVtUEL/+Pr5HrHeDwyWcx8/1cePmvVYCtQpF7H3xGvSOVrcswsF2HzDBxSwV021It15C8oGmc+tE/4K3UyJIlNtw7QdKOsYoGd17+NVZOx28EZEZKe63FyOgGluYWOP6pjxAHkSJDCXcZIC3rdoZuMFLEyY9/LlNqqistuj1Z17pMrGmcOfe2KgHdNMkaDe49cBihercUXQaFkS0s33hHQWr2xk2OfvAzZCoAGmmnwa9+/CKlcg/73v88hqVz/czPcR2L2vwc9558FmFainacfBEr72DaLolUe5ZJvlhQyDj39y9y7cpdekpFksxmYKSAH3fI5/oIOksYQcbVs2dJQ9g0tYOLb76OYTmKCx597nPqTHEck0SB4jqQnNclQvH+j30ukzBTbfC9XqnksN4VQ6+//gu1iWZ1naG+Pu6dPqyIUpaLbhr0jG7n0umfE3gBrUqFB575LJphk6QaUbDCzfO/ImlW2f+Bz6vuomuCq6/9rdIBu058VGkO3RRYxR4VILdUUq0wSSOEaVByc/zo1Te5+YM/pTQ8SuXGDTbuvp++TQMsXLikWpphmgyMjbB07RpL8/OUegeoL8+h6QZ522T6sQ/g5gtqrWp9mhROUkjJAHzihUw3rS5iNa0rEzWBJjQkN/zilZ/guDlFKj2uy859BxWDK9I0ulq91vGpzd2lsrrCA48/SW54EoFOuzVLffYuq3N32fvkZ5F60jFSLrzyd2S6w/QHn2XAEdSSDkKUKfX1Kj1g6gI3Z1EQ8N++9h+58eZLHPvCv+Wtv/4Gx//lV2gtzhF7DZrzM9TmlwjaNUa27WR9YYZ8qQctLrK6cB2vUaVRWWJsYhNb99xPvn9IzQCS21T9SxQ/8ezvZghN9VvDlnCUcEmUxk/ikDfffA1N13BdG+F5TE0fxrDsbsHomsro7N07xFGH9aVVjjz8qCoZGenl5UVEFlNfXuHos/+CTKQkrXXmr57Ba3S4/5nP0lq+RrsTsHn/ETUPaJkg9Ns0V5bQCjmGhnv49pe/SmZoPPGlL7K8MEsYJJz+zrcwtBw9Y6OsX72svmfmHbxGoIRXuW+I2VvnlJrzO232Hj3G+I49XZLVurOA/KN46tO/n5mW0219toltS/jJGklVlN568xStWo2JbVM0FmfZc+hBdKsrW7uTo+DMay/TOzrG3cuXOf70b3ZHlSxjeWmGIIyI6wH3f/IFFaylm+eIGjXSVGfX+z9EUpmnVqswOLlLJaFZq9FcXsTuc3n3l68rVffcJz/BN//yRYJGwNjerfz0T/5YzQAiBr3gUnIK+J0mA6NbiKKQTq2O6Vos3LyqtI0s4ekjD9C/ZQrLyZFGEZmaIDPER77wbzJ5CMM2FGwNpcX1rlZOU37ywx+QLxbRk5iJHbvoHxlTclMKBiEFnWlx+uWfKxnbbrQ4+tjJ98ZSQSNoUltYxl9fZXL6IG7PADg6jYU5DMNh4n3HiSvztBtt3L4BEqGxeuUqopyjvGUTC9dn6Kyvo7k5/OV5lm/fZvbsm8gXS30g96wn0ElD9hw/jrdWob26phLQaTZJ4pTa8iJJ7Ku2+/Tv/AFCSv1/ngZlAJ79w6+ofqYmIwlpQ8drtSj09ksq4G++/U10y2a4XGLPbxxX/f2fPxIBkhBP//wlcoUS1ZU1jn1QjspyohTUmxWcUg9zZ8+zZe8+1VVsx6TjtYg7EZseOYnRrKCnBqvtNguXzjHx8FFO/fe/YvjevWAXuf2T/4Pd06vKMgk6hG0P08nTN76VyQcf5KWv/iuiLGNgfJShLTuYO39BvafVqGLZLn5DBiJSzP+bX/zXXaQbWnecl8LyuT/6aqaZDqHfwHJchCYFkNTkOlEacvb1V1mem2Oor5ft+w/SU+7v9lAlhyWhaFz49dv09PawPr/CfcceUlOW/LTDDn6rQ3tllbHt29TaUl8PYSA1fAPNdhibGOe63LSpMXv1MuXxLTz/pec5de0Ol175Be/+7f/CKZaYfOgEXqWCyDTWZ2fI95bp3TDA7bffYm3mNnHg88jnn+eN73yf8vAGhjZPcPHVU0q0hZ02T37uC5SGNnSTI1ugGv0FYsf9D2eHHnlMaW9SaRZIrhY0G+sgVd75s2qhmcDUfQexXFfN35IjoihQQWs2G/jNJpXlNXYdmFajqywhX/oHts3i1euMbN6EISc+1yLyPdqVOtcvnVUBL/UM0n/vFNXKOsFalebyAkOT23Hu2cX8mz9m/c4sodegZ3wzmw4cIo184nabpau3qS/PkuhRt3NlGl69ikwovq/OolsOTsHhied/n6jjodsOUaeDaTtKIImd+49kpBGHnvoomibrQ6Pj1Zm/O0Pv2D1KWhYH+ph99zKdRkMpxuljJ1SdrS3OYuaL5IolNYfPXrnJ5NS2rvKSsHNs9dLFK9eYnN6nhhwZHCm3l+ZvM7RvD/NnrhDW6ugO1NcrtKsVwlaLXLmfvvExakvLSg43lpdV/e565DFuv3qa8tZRvNVVVm7dxGvXsdw8dn+Z+t1ZBW/5jsHxjazPLuCWSzzzB/+ORE6FaUrQrqtASN9BDAxtyD7+R18haLVVD0aHhVs3WZudUWLBthxV50HoK/NCMueBE4+rcXZ1eYF2rU3vyAitak3Ve3t9jfEt4xIDuLmC8ggiiZZmnSwKMXM5ilt389a3vklmJBTGNuMtrdA/Nk4Sd5SC69+6jws/+j69o6NEKYzs2oG3XmPp6lVsPcfgnp3MvXuWsNGh0GOxfncWDAM57zUX51Sbc/IFsjhC1y1OfPrzWPlC1+fKUPrAcFyMYhmx9b7fyCT/Hz5xErNUVrV/5eI5BjdPKBJsrKxiyxFWaHi1BhgmGzZuojg4iB/JGbtrZrYrta6r5HuMjo1QrVRwLIewVVctR7aiVqOhsmwbGr0TO1i+dkEF1C720juxiajtITFSu3sHt6eP1tICxQ1j2PkcdrnMyvVr5Af6SPyUquSB/j6qs3cJ2k2cQgGv2VDZdXIFhEixy33qwAePvx+7kAdpnaUZQcfDsG1Sw0Fs3nc4Kw8OcvTpD9Op1ikP9nHm1VMEQYTtuOhZrDLr9PSp4EjjRDrDYzu2KGT89M+/ztHf+l1sy1LTV6fZoL9cZm1+Fi3NKJSKaLqgXWswc+UiUnN4jbrS+ugWUbOihJVhWjg9Rfl0ZYyEkvE9n1xfL7qmqxE5SeSYbFCbl+WgdXVIltFuNQm9tuIbmTUZMOkgRe0Wxz72HEEUYts5RfsS1XKf8v3tZhOx+6HHM7tYYOPEBCPjm/mfX/sPHP/tF5RslAODSGM1UeXLvURphiF78q3L7H74JC3gjz/5JH/4nZfQUjleRsp9IQhJ/I7yFXO5HIYQLN7tlpRsR95aFbe3rNrV3LvdtjUyOalcpSQIVW22202SIMF0bWWNhUFEu7JE4HfQZe0aAsvo6gHTLeDV11UwTGmoBJEaztbm5xmf2o2VzxP7AVqW0l5fIdN0eoaGu3b6xp27s1L/cBeGY+OsztxgYvo+3GKPipwlB5s4Itc/qDwB6dAWRkYxDY18LseffOQkE4ce5cDRJ1i4+Q4HPvEMiR/SrKxjkCpzRNrqUmLrsnu8Z4D6jYYadpxcXrnFse+p7EpUSZNFtqkw01RJdTodZWi0KutqfDYtW/kPPUODZHGsAiCf31iaJxWaQqypG2BYXDr1M6af+gS1WxdVidy59C62baFr0tRJELlyfza+YxfzN69j2TbtWpX7P/gxbrz9S3YePaak463zv2bz9BF1DzCyay/VW3do16tYcaBq+sw/fo/+TVMMbd7Bid/5PMQRsSQ8IbuRj61Du9lSpOQWi0omh6G0uORsHisTVhql8uM3W8oiV7a7ZdNptgg7Ps1Wi6DdoFDuxVIev3R1YkLP66pFU6MxN4Nu51Sr7ds0SW1lgbkrlygWe9Sg1VxZpdVsKIEkdYzUIMLK5bPdB99HFPpcO39G9fz+kXGVKZkNGeFceYB83wipZdI/uonLL/8dfm0dw80j4kCJjQ2bJpl47BmsUo6cbahe78j2VanSN9CH53eIvQ4mCXahoOBeXVklTjIlYoq9fWShr0SKJFqJDgldaczWV9cQic/S5Yt49RqFgWEwNIKlOZYXF9SkKpWinLetQo6B3l5M6SnaNnnDIfLbxGmEm89Tb7UJvQ59o/ewtrSAsNxCtmF8K/X1RTqtpoK+7IWj92xSPcNyHRbm7jC++wDCzFMYuYc3vvsXWLrBR/7sRcUTL376SUoDI2w78qgSKLFsmYmvMp1IWyoDkYSYpqUcH7mBYrlIFiW0Wy2svKuyIqdCWZeG9PHfM2hN00R3XSVqpKujESs7zsm5Sg6v3rpMHCUk7RayJ8nSKPUNYmUpmpunpOnMra9SXV0nDH1lsmiapZ7ZWF9F5IplNQuYpoHveZT6BpSikiwrLaRDT34Y27AoTkxR3tBPrtjDf/3MRzn5pS/TqjaIw4TXv/2fOPzC77F5aj9RpYomEqJOS7F37LXpdDxqSwvU5haUgJLiKDM1bNvFlfOH6+LJw8scqssNk76REYyCi5WTd4c2s+9eUOPy+PYdVFfXMJ2c6hCZqZO3DdqNJrqbQ+sE3L1xjdgLcHsHufar19h74mHOv/Iqfr1G7/BGorhDdXmRfO8QolDszeSlhtyZbFfKPkoy8qWcUoaSgZu1CvtOPsWWBx6kZ3CAv/n3X2Z1/iY7H3wCzXK4+vKPFQw/9fVvsPDOWcXMa1evkEqb2zHZsGN3966usq4UZegHREmkvHrTcZk8OM3A5i1otktzZY3Yb6KlgigJqS8tUx4eJj86rGAet5okobwvgLW7Mwztnyau1EhFSrFvkDe++z1GJ7fh1arUVpZVy66vLuPLtuoHikAHB0dZWrijbsGEZbuZvK2RjCRvYCTLystIy5TGgaFMkUSamLImZS81DDr1Om65B7dYULI3CSOcUhld0+hI4SOhahropq66Rv/YPYxObaM0MIRfrbF4/TpusYSdd6gvroGZU20z0XSCZgOiiChJCL2qIsXC8CjDG4bJlXspbxqnImeDJKB6/Qale+7BLfcTtaRM1zn7i5/hWF1fo95s4zgWftvHMA01u8hEO24Rz29iSt9T3g5Lry6Wty5dY0wJBhkTeQ8h61ZekcsBSRKjbTvdOzZ5uWgYJFmGq2pUUwGUd4WR1AJZxsjGcSy3gFPIsb6yTK6UZ/bCxe4Vmm7QOzxMfWUdWeetdqOrOzTpMklTtntZK4lNjuBKvOgGlqXjB2HXOpculRx4dJ2W16bd6qhrd8OQl6CR0gnyElbu5f/f/8kpVp7lPQ/0/wHRE+a4RBIekAAAAABJRU5ErkJggg==
""")

statue2 = base64.decode("""
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
""")

swamp = base64.decode("""
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
""")

swamp2 = base64.decode("""

""")

tavern = base64.decode("""
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
""")

tavern2 = base64.decode("""
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
""")

tavern3 = base64.decode("""
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
""")

temple = base64.decode("""

""")

village = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAFR9JREFUaEOVmVmMXdeVnr995jvfmqtYnIuzSIoiNViWbc2iaUmx5baBbrsbjTQC5KGfgjzlOXkK8hoEMZIOgiBObKQRdLcdS+rY7qZkKy1LIkWaEimyyJqrWPdW3fncM+4d7H1JWw46CHIearh16py91v7XWv//b/HPvvd9xecuoeAn710HyzGfCiFQ6re36N//fy4hrP/n7VJYWMMdyvUZnjp9EF9F7K0FfHhnEauwhyzPsQQoRusQWFiOzcOV5HmOUhLU//1dlo6DjH4m+PTWXRzPR+pnfT4B+vE3FzfZbIcgFA9jFb951cNYHiREr2q0ov/j0n+3zWdZKnHch7d9/kZFLixUmvP1J47QTzKsNGbPWIlQwa07P6I/9FjaaOB5EWdPf9esxxYWpaqHJTMyyyGLh0zUCyxvDrAtmxwL8hwpJULplY/eGUvBjaU1kzgHSZLnOMJF/PP/+H1lUgFEEiwP3v3gDpbt/z2BPYzzwT/oFRl0/DbzFjkCh9mqRxC4HJyr88laG2TO/dbAJMZCv1Kg0pBXHz+GcCBOoOpJ1hOLkgdjw0WKNvznD+9x684v+b3X/jFCTmD7DpUA4kyhpMR3bHJp9otulFIvuQYNGnmN3SFJEiEV3FhcolifMmhO84h8923S/gDxr77/fTVMRoEluU6eXprg6sq2eejvlIcQJrM6qZbevb+nGsYLPyXsPc9LZybI0VufY2OzHsK0m9HOHT5eb5OojFQqzu+dYhhKAmLq1QKNgaQV/YBPrnQYSod6cYF6vcHKlo0vQi49/4f4nmKYKsqebdaQ5xCngA5cp/fBumxLb2gGic1P3/l3JGnCY8/+Kb++/K+ZGptgdaWBOPfGC6pSqvD6pW8TxhlJ5tBrNdkVBfJcZxkuHKriqYQ014F7dGLYDVOag+g3damzWrA/xE99+r0ugVOCaIynnnicxjBD4mApie0Irm/3eXlvmcVeyt37HaZqY5SEIMszbMdhT3mNYg6O5/Bnl2+ybyJnqeGQpxnfvfQK3b5E2IKgIIiGCt/X9Q2WBcOhLl1hfrbI+J8f/0v2eUf4+Nd3cWwLr1ZiYeYQg36fraaDOHnpCRXHDgjJ9PQs/W7Et7/xxwiVsNoZcHhijGLw21Jv6JdbFmme4Vs2u5mg3+0w5Xlshm+x+Wmfwr6TBFaPwO0QDhK63YBnnrxEOXDIcv0sDV2LOM+o2w7dTAc+ZGcQ4tkT9IcfwiDixOQ8P7m1SRT12B2UiOOY9vLfce7cSc6dewOUjedDEn8epwrLhitX/5qedQM5DHjyyCkuf/gJjxw5wI3FRcI+DJNxaiUf8dg3vq6EkgzzAXE4NPAuFopcePnbIGxELvEsh4nAN91OZhpfGm+QC4EnFFU3p6dcGo2f8/TcSX5wdZWxcgHUNtXJMjIts9no8tSZxwnDddY373D8+HmcvGaQ4SHoDRa5unSHsuvy5KE5Cq6PreAH73/GvtmAX9+To3ZjOo7ki+e+SKVSHLVas9s6rbC08Sa7yV1210JaW02KpTpff/kit2+v4ThDOjvwyUpMZOIAsfDiM8qMGNsmKBZwEYTDkJff+C79eNTcTCdVioliQE0l1IoFdH2td3KEa5uFBk6DStLhvdt3WOsGvPqFvVy+tk67m+B4AscrkESjxOnr8KRktR+g8pSCrXjlC8f48XvX+dbTZ1FxD0/ZdLOIv/qwycHDLjduRZhxJ6FQ8AjDlD/82gu6sNhNFXf6CVaWEnf/Oycm9jFwFSubS1z/4BaOKvHc6cN8dC/jwEyFT+7F9CMDRcSFb35DaZjaxKQqxX4w/9uZ4pVv/pGpJx2/kOYL0rJw4gxb6VkMvucTkiO3P+JAYLG3WuXf/mKZ73zlMPcGku2tDrv9AZGe0all6lzXYq4yhO2Abqq6f1kKIW2klRPkCX/0xUfZGKzxvR9+xPET8+zGwagB5wrPd7GUIGxcR5YP8dizL5MBRcdhX+8XFEtl7uwus7bb4PbVBvtm53Aq82ysLXLqwATXPkuJ8gec4tTFF1SuAiwRmwAfzs0shTf+4T9ivddHSod9hQBPgc6DruOWmcMjamIpcHeucmGqQqYs3loa8PpCjQ8auwYBzT5kesRoAqOhoydOFplJYlku0TDC822sB7xC6rll2qtk/3xG2JGs7+hCgTzNsWwbmSa4rk+a5fzJ114y3CFT4AyvmTGrx+CbV39Gr51RkNNsdfTohEePFfnkztA0dIOAE69cUpYVo5SN1MRBpKa5WJZi7vFnka7PvJMhWCQNE5QM8McOUZ86yJwlmHGhk2Wk/ZtMOAGZ6/AXt1p861iJy2sNdruCOLNI4ohcCvqDIVmS4bmeQVap4psk2raF1AP9N6xChy81fWDQj8mihGKtjMwVlqVHnWXmvcoljz7/PDK3qIVXmXEl769e56kDZw3JWt5YQtkF3r3SMfFN1W12WhnxQwQcv3hRWWjam41yLgWelRFJhz1PfgnPC3h9ts1alHNjscnY+BQbnZgTZx7HMVnPse2M3eVrlOyc2SBAWjBZ9rm+dp+ldobKHIRtITL44qP7efu9O1SqVbrdrqnpcsUhSSGKIsrlArnMcS3LEBh9RXFGPIwYG58kimOkZnpKj7+AJE7YP+ez3fiQs/tPsqde57+++WP+5DvfodNocGt1iyzLWFxLiTOBIxRholvagxI4cek1paQNQmNigJRFHBFrnsbcky/iuJKXpnqkwuOtK01U4GILm8L8IZ6utOnZRW5sJNTYJVeKetGi27cY5hEz4yUarZhmo4ttCRzH4/GTe1kV46xcuUaaJji2IEo0rCWO45BEsYG47kW2Jc2mKASDXkilVh2NUaXIspxiqYTKoV67yb5gjqXtGNW+y6tf/Ror67e4udTnxuJHbG2tcerEJfrRPWx7jijVE+pBCRz/6mvKiAgxYnhKWniE3Ft8lyiM+Naf/gv6jQauLTl3ZIzLtwYoIZma3MPsmMPWzi4tVWRSNkh1g9AoUg6urXcuIssswv7QCBohbCrHzmMnIb2l5VHPEeC5EVtrH/LqE8/xzkpIluYo3SPcklmoML3JM99zDRlNp4WF49oGVba6gSWqDIc2edzl7vI6sxMHEHzMneVtHKdMPOybVJ577BKNlobA5xLwUPGNlJ6i3WrQuv8r4lhSKgace+5L1MunwHHo6/crm/rkOHqS9O9vMHboBEH33uiJSgdkk0hJNMgYDlPSsI9yfJL+JsJOSK0a03abQShZX12hXq6SkvHH3/w9/uatd8h6EaVKjXF/yD07pydtXM/BEgWC3pBmHiHyHok7zczELNu7S7Q6HSZqdbLQYne3iVfIicNVhFWitR2DvUt1rIqutU4/ZO/Bi6MmqBEgNJ0QmmgoIztX7l1h0F03TP70l46T9soUXAslY2TV5+5izsT4GHv3jDHsZRQKdeYXpllZ/ZTpyaOs310C30VlOZWxPbTWb1FOc4Kyx0a7S2XKp9ZICdOcdtzDLxYIHIcDMwFJb50tdx4/khTynCVxl8HAZ25snjN7j7GytMLQkjRlG6+0gOruUp8o0O+mtAchMvOIwz5+8Q5xNgHZDmsrDaRXJLBmkXIVoRxOPfIK/ThFHL/0mgaZ2bq7t36J7eZEux0CCZEFZ88/yXazRbFYRDhGXVCedmitwUI9pLPTwZ6ewSvPYgUW4WoLf2IKxYDA9hizd/CxSC0Hz/Fp7e5w7d46Xz67gK15gJDESQKuR5ylFB2XOAsZxoLJQkDXT7m59ClL15p8/ff/KVGa8Mn1y7j4HD5zlqyzxeLSMnNT83RCSavTQ8gIy1klx6HbbOEHPu3WENuaQaY75KnLmce/Qn+YIo6aHqCFhGDps5/jFgq4ToVu864J9ivPvcbtzz7FsX0Ggx5KKqZmJ/HLXeJugY31plFgew5UePyZ12jv7JIqm6zXYHZqju3NHTKZcefepywcOs3+Y+Nc/sllMlKmx0u0EslXnvsGruUghcSxHfIsNRI3EhY3Pvoew47k3q01SmPjvPEH/4R3f/xfmJ4qsdNS+F5I4Dp4XkZvkJrp0ZcpgzA0faeztQtWTpK5+CKlPyzqgWc2fGx+YZSAh6q222uwtfx35oZyvUy/3Tcc+/SFM6ws9/E1AbEzTp6do3F/m8621tYWaZyzf3+JmdoxHnnqAv3EYd+0w4/+6kdMTB0my2LWl6/hFuYI25s8etIzEvXOesjhAxWSQYux0iztqG34vkaGl2dI4fCzG79ivDbFxlKD2vQkh2fnjWLUvsBgkKCyPpZwuL+9y/RU2dT1dqdPo9k0KBkkESUs3DxjR3r4dgmd3Ti18Mogjl38B0oIZWDy2bW/wDbsSpIMQ/OwSrWC409ybl+VibEC1z9bZ31rwGsXT/LLDxp8+cIC7Uabm5tr1Msl9k8WR9RQgLRKCPpkwkOKBCd3SaWD70bEqYNLaqbAyHn6XXNB96Pcs7l5d5n1zTYi1+2+yrNPLJgkbbUjllZXObWwQC4VH1z9BE9ITj1yhBs3Nzhy5CixN0Vra4dT5x4FlZFLyb2b1zhy6hF8r8hf//m/1wh4XaW5ZGf5sqGnWhlKmRtiUp1cYGxyFtuO8HXj2Wgwc+AQpShks9Fi/uh5VtdvUKjNkw4anJ/RksxjfH6GTFjsNO4b/a9Zl7arZBLiCo2ikcC6vRzR63V45PQkSukx5xBlMY5mlJaLkjmfLX6AyB2am11eevElWv0htie5fuUmw17I018+j+sF/OIX7xFFFkfPPsPtq+9ABOdfeInZhUPc/dt3uXnzis4fjgTXxYxprTjF8UsX1erqbY4fOcX1D35EJrXvBjrhWlfrqXf05FPIcMhYyeLcEy/SH/RYbyzjiszsnlZ0thDcv9+hlQ84NLuP3PYRKsdzFJaKqBRq1Ao2Kk2IpIXyXd5//wZZHHPyzHHI+ty4/BGnnjljSJNbqBDHCZkVs7HY5rEnnmZ5vc3uMOHMVJG/vPxT8kR7Ej6p6mHbNnlmYzuKJMoNNS4XFKUSuL6Dr3lJkpKngqCoHTqLQWgjZi8sqEyrCEvQai2C1kS2cZfIE3jm0ksEmcDOJT0nACtB4hkG5lqpoajb69vsO3gAa3wcJ06Rlk0Vn8+W/xfj48ewPIssiem2l+g1U8IwY3a/z7Cd0x8OKOiWMOhQrdVNMvPcwvIl7UEdKVOG/Q0W9oxx+NiX6JX34HsZb/6n/zAiHZQIKjlRU5eIg18eIkPdYgvYfszU5Bxbi+tQhPp4gXZn+BvvYHayjnjhjWfVR3d+xYWTT1ORkmIu6RYD3n77LV554XlSlZPYAV27gJAu9nCbc49eIE9ybi19ZpwIgUvUT3j/nV/y/MWXKRYCPrpyhRMnj5JK3dElN659xNxkUa8RFbUhi1ltJuw9eIo8DvErdVbvfMyJE0+yvfYprm+RC480yel127S6KXsm50hkn3LRJ9K2Dso4yd2sQDYcUikFdCOFb8eEmRZZseZsyMTkhlx3dJ0zDesHP4vxo1WlnIxWJ2S8NsmrX32dn7/55yjHwfUszh26QJgP2SmNj1jeoGW8Osd3WLy9gue57D94iGGaUC6Os7SyjYtkfrzAyuoaY7NT1Cfn+Pnb/w2/WMdJunSzBC/LCFybME05c2Ivq3fXyJ0inUFofAKtGIuezVjBQysC4/BlKWFuMb93L7tb68YN2h2mWNJF+YpcuqYsxr3ElKRX28fG/SUyC6p+mYIX4QZV1tZ2TYO3CyD8vai0D7XxgHCQUahoCysiijLGK7rABf0ooVKucv6RR+gmGdEwo5MquqGi223xyGPn8bWF5dgo18FWiqBcJAgKFEoBP/vLHxqjVM/bYbeJF5RHsz6NjR/iOtoA9VHCIxr0RruUgF+ymBqrsrbcZnbKNSJJDwvPdki0YaEbtqleLd9tZJ4Y10h7lpaUhldo/8Fyxti4v8Ps/iNsrCwzNWkZQadtdVE/VFCO0C6Nj2tF7PYytCVQmSnhOoJmVyJkjuMWOHD6y7gFfbDg4HguxWqZSqWE7+rFCYQ7cm5d2zXk572f/S21guT2rZsMhn0jX9MoxHFc9IFRlqamz1R8h3JgUayUjb2tXaN2p2tMC215G79PkxcLxisj3aYDVrrJur7p2tpE0UKxWikxGPRN4JqKZ0JgqxxLa3RjsajfsfPFwoXDqpVmzE5PEiYCK9d6O2VrY2l0imI7RNHQNL2Z+UNMjE/yhRefpxWl1Eo1Y1B6gcvf/I8f8+KLL/HDP/s31KdnaGzep9/ZQp85uHrEFywzCtM8NQmQaUoawVQR/EKJbm+Asi0q5bIJPkxB+7BJBDMTZXOwosWaHtlS5Qwjbd9BJXBpdlKqNceYI8YkMWRKF78y9rmluaolzI4bX+oB5dDoEeXTe5VtWYTbKxTKY1RqY6aue4MBRU9TzIBCIaB1v8nkvr30un2sqG+OOxLHoe4FpJ6N22wRux0sWSXS0EKQq5xOr81wMKReLTE2OcOdpdsmAckwNXCu1YtGgg/CPm7gkyYxeQxTVU2aUs1fzHpsWwegnYHRDjoawroEDKtVxovQVz7y3R/I6NFZgYaO/quW079zWRaidnKPMlDyfZorK3gFi+r0QZrLd5nZN89YfYqdzjaFUhlLORTKVbLmFo6uuclZ2utLzI2P09vdYXyqzsZglUBNkKY5mcyZ23eQMNXaYItiuczG2ibDYY/ALxJGu8aIcawi0zPzbG6s49uZgXN7N8Ww1hQ8R3uHFrnMKBU9hoOEwAV9oNMf9swJ1ihQw3JHJSNgamoPS8sbTEwWqRTqNJsbOPbofFH7CsYGqR5AaXvMdgPmZw8iZIYTlFCOrmNF1G2QZ7FpOL5VNCxXKYe0Nkmcgxddp5aXSKySefMg76OyKr42XRzNOFJkocZwewtr2KQ7DM0RXLUwWmwowfd9s6CBxr3eKr2JuuZHB9TM79uLr09YlTJew8bqogm4VChTKlfp90MKpZo5IFxaXjHPPXr0qHGNPAc6zW3CtM/UxH7W7m9yYH6GbmNthIrZM3tVveITp6lxTNqtHmNj4ziFqoFo2mmQ63kqFJlI8YODKLtMv3GPipvi4ZF7KY6omoi62tMvRgTOnJn/qlA39RfpbKkUT6UomdFrLuOSMchBeGXSuG9cW73jJgEPZ7WtCRcUigG+X6RSrhgnKOz3DGla32gzOzdJpVKh1+tRqVSRxjUa0d6R0rWQIqbTbhrmqf1J/bluif8bukrXO4ZcnIwAAAAASUVORK5CYII=
""")

volcano = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAEEZJREFUaEOtmWuMJNdVx3/33qrq6q7u6el59Ez39My+7KxDvLaVh511RBIlIcERURQhgSByvoBAREhICImPfALEp0h8QwhQJIgilAQhWQIiAQ5RbMeOTGIndmyv17vzXM97+lHd9boX3ds9sw/PJt6II81opqrurXte//M/p8TyygXD/4MYLUFmJzv5qkpUmULY3d2vm+LpnE69SqA1BZJAFcyQMFc3dOOcuUrCblzCKyTdIqIzfYQWGoWi8BI29mdQxrClfTwEGoFnBNeHKUmRuxepwiP1NDWliceXwEikJwnD6OQw4l4MYEzBdH3BagRGOb2MzOn2djBaMTXVxBMe2qSTFyhW6iE7+/sMVcldE0aw2KjjmRECxZJJmJlKCWUPo6fYPhI0G/2xEsZQCLcKoTLIfYwAaTSxV+Zw32dxasSLhzMEWpBL7dZ52pBLt5Br3T4an0q1dqqbf74BjEFIj1p1GmEkh70DELmzO0hrVmq1BZSxf0/EesvkoCsof0QnitzBrRT4zltK92n6BSllmlM5oR5ghEaKEavdWR4rrmNQ1JPMqk83UHzP6+AB7fqhO4t9/9aR9aZAC1hjikqeI8SIXFbZLAqksasnL7/DBFWZ8i4MIEGMLXunCOFjzHHY23Dw3SPT03OgNTkFkfDIde6iJfEk56olOjoHlTjvCRNweDQgltPO45nwWaj2UCpk5KVESZ1Wd5W8FDB/2OfFpUXQPju9MooR++mIalAn1ENyysReQC8T7BQaLdQ4kkRKYYJJBBbUgxKVok858H6GAayF36G4oF5bAJEhjOdyClFwa4ZLI8f/C43NWntfTh44X604PBAixxgfZRIemCtQpofUil6vROrn6NhnYaZPoUK2dyLqlYRLvXVyofAyizUeP22H7O1VaE7nbHZDl5K5NOwXAUbYFAWFcZGyaqyxxo4yGN4TFFSKEYhTIkBoRb0+O3a2kSfBY8PzFxGvgEQJZ5BKNEtoRoxMwCjuIxlxrlZ3AFdQZkUPyVRKyaQ8lq/x1mwDbaa5HsNn+2+RiRLX5uao5jFXeg3iQLCXW6PmLu8zqXhb2yS5Q/TYA0tq6KJiSRdk9mCiQHSW7zeNqTkHZg4lEZjjhJ3sYxR4wlDkk1yynlc5B91thLGbew6Jp+szHB7tI6WgHs3eNJ6BqDo1Bk+g3+8iTyqDYLkxjVeMHI5kwqPFgHIe8+TMa3y1e57lYsgZtYpOmxT2fUJwpVlnY9CkG2sST7mKcHqm46LtkrqBT8kpncmc6UYJoQRiaeUBI7Gofety47xiRVrtbxOrsDWTRApJLZp13rWhZsPrzpLnssEGozWqsEaGsFJDyltAE5jJhwy0JPPsIXOaSpObQ+ZLigdKggtHb7BcNyTeIdd2OjwTtlG6QMspriQ+PXFzv7pQVBlXEgvWHgXTkklqeO6cNRvkNgLupQy6rBBQUmW8IGQQH7k6XKvOOcW11nheQFAuO8MVaIwxTll7vOO6cVoq2fJYESnnvYQ3c8l5v+AwEbxvLqc2uMHFwRFzDZAy5+pelcyb4sdzcwz3Dvi+uYCc5PgZH64WOVJLml5KLR/RnvcpjF2rQMbEB4LK9DhVbjeABTZR0Jiaxbg6LzCu2I+9Z4HPWDXuFmt3aFaJ6neFDU9rMhGgzAgtPUoGLvp9907hKV6MAz4QDsmstyoxT8htPv6ldYJsln/664izcwnfVguuxP2wP0/TDDlSkrU4pOErwiKmqQwFhTu/sFxgNkVagLxFxKX3XZ5gtH1wXMYc+ruav+1CqD7VHF83HpWo6lDebmlsSNvQ0wJhI+B4Y7feQ968wrxK3RoLVrZmW5nyDP1MUPcMr6RlPDNkxpfs54qLwYjtWPNoa8RjvU2mKj0u/2bPQjvf+1rE5V9f5s+/GZBL+MnbJTZUA4OkLUdM+ym+Az7psK3WsGlsf94J5LcY4K7OOrlRsUBmKe8d1HZsHMm8P2Qn95lWBbownPGGNOsjIpNwrTvNThHwS40YT8a8vNt2h7PkzZYtiznrpobHAIqA7qjHbAAP+ymP6Bu8v9bloSf7PP81j58edvg7cY6vTD3PN/0Vnt5vOQxqyYQZzyB15oxv1a3PSQojsOXZRved8q4NYApNtdZA2MwWytHRBZXi5YpcSUpFQUNZNlfjeVNjudwjiDNeGRTYVPAsyfECHhH7tCy3lwWqULx91GCnsHukSO2zm5XJ1figBSXqYcLvd/+Tvyw/zp8MV/lW52Nsbb7JUucBfK2Jd9adZwWGWdV35zOE1OZGCF0+VenbUuDRD37WDIcHd3W/ERlRpeFy09ZZS2rOiJxpr09hIs7Wt/jv7Vk+Oh+zOqjy5cpLfNNfppIoftSfY6/I+ejsLj/Zm3epNadS5mu7+KJCIVMKKdjdr4P2KGSOZym0keRKoUk4QlnexWujEtUwoNM6y9rWmjtvp72EZ2B6+1UXRbWGXWox3pbE4w7oZ0e2uPyhTzsMsKxNu3gc5/eCzWOLfSJhL/NZVClhLohKOQ25w6pe5HpawdhSYmwj4mOBbeD5rKgdctOgnx5xoVxQyiW5KDFf3iUMQgyjcdaYAG2V1oKt7piqhmFGLdSsj2q8nYTs5NN8en6Nb7zl04iqDn3a7ZYrxFaur63ysQ+fJVl/g0Df7EZ/fkJP4O7zH/6EM4D1rGV7hbCFrWDFHzATJVzID3nmaJbZmmQvDqlXMzw/pkhKlo84y1dszssRa0eztMKYnZFPKDTTjusfA8+7KR3S8fbrwwZbWchBliDzCt3RwMInFtPLUY2VpQ6jJGF7ZxshBIUwPHh/i3iY0NYbyPyduX43g4jPX/6Uwdiu3KptD2mx1OKcRkm4VN9nQfdY92suREu5RdNjJB8/H5CSmxKZNIQ55CJEij4ZJYe9xu1rgagYl9VTxD6TGslGWmV76HGQV/hMfYtvdxcY9I/cbCEeHlKOZpifmSEMQ4ZpQjHqc374Nq+qJg890iIfegQ7L7ou8N2I+OPPfMxEsntS2m3ujJuZMQh9QlylIEDmEVeSlOtRE89IqsUWSivKeUHPt72+4E+/eIWvfD2kyFuulZ0EGQPL7hxMueL5jnPZ6FtLIgoUa6OQOBdoE9IfbRNVmvQHu0SVGoM45uJ9F9nY2nT5v7q5wUq75UrwzI2rvGCVDwIuP3qefPUlIh2TifLPtIP4sycunZzI5rKVTJYIdEIqLVHp8SvmBkLEoCPX43viwNV5l8cCcil52sw5Q5kTSmrBbGwEY9PqFM/nlgDlI95KZzGeZZYxQ+OxnpUpCUu2Db1BTK1SpjfoElWnaS+2WL+xxUp7ia2tLRYXF2l1qrz+wsvsyhC/UK7b/Mhj57Btw/7qWzT1HoUYY8yd4gxgPJ8iN3zGvO5y7VaxwGbl0d+24Tu0mGy5Fc98NaJUSvCzKVfSrPyL3yYsbAuKm+Qc9+OnvdhOaTw94mraoZvlCOstSmxlEfeXct6MfeJkn3LUoOEN2OxlXLzwXrfV+uYmy0tLKJM58EUb3lPr4u9eYbW7gJaG632Phz58H0qlHK6tM1scnJp+JxFQyQo+blbdkMeIlFxU8LRVTPLYF23vnNymhxaC5/9RIExEdltjo3jGtNFY5BekylBi5KKpkmkGykZVzrWkwcEISjWPeKA5SgQZZYbZkCCoMBocuJSo1MqIQYoohyy3OydnWN/c4PIHz/PsD96g014hSYcMNq/yFws/4KngLE9vnaPTPsviso0+gVdkmPWfUAiJdB3sJEH/6lMPmkIontCvnFzUpuoGihYIfdXj/b91U3cb1cJy2WEDggHf/1rgxlkjOS5Rd5Mf5iV2Sw2OxAJvJ5rXB1XmvZihivBNyt4oZDg4xEg7QPEoRVUW9BZHNEhleLKtzX0rNv/PtJYoRI7EQ4ohqxt7PPcHzzq2+rt/fwmTp+y1H+Fcx3IDz7Xulmfs/ugVgklxEr/3+EduwQD4wuw1vrW/4hY8OfUKpUzy6JcSdN5DB4bv/jP4o8gVpb4/QzlPHQZ8/fAiRnUxpnKqDSzV1cG4amxnPr7O2cyrzJQEh4mdEfRRvqJUGq+3xn9f0OPlrMby0gprG+ssT5S39zc2NlhaWmK5U2btRpelVhVfRHz32Zc4125ybXPXUfZL/gGjmYeZXy5jZOrA+YXnr3GxlOIVA8Qf/vLjJrUdxQSkrDU+14h56sASFsmM6vKR6ZwPfS6imW4gqwOee6pL2ID46jLfGCwzmExgM5XhF5OGamIGu5813FGqqYUeO4lPLCtUih67Rdm1y4P+gKhqB6e583Yz2+NINk4MGUUR/cHgNgM4I2xtstRqg05YPlNxzdyzz1+h1WpzphPy7As/RpiaY6APB0csPvgwAxFQeCMH4utriZ0IXbCNPMiCKZ3SZ+yBijF8YSXiC9U1V7+f2ptl4FfQxoZ8j9VghVBmfHLhkO9szVBMRtI33a/JSxYyc/qJjUrLmgpWsxn3yLAfY2n2WAy1coNu4PFl+Tr/OmxwqKZviyRrSBsBm5ubtNvt29JgsVllaztB0+XMSsQo8/jfF99iud2is2zR3/DcC9coZ7v80ZLmb9YqNO57L81FdcpAZDI/m0AET6w08UKDHA7IlCY1czTyrmNfCTVHn2Wu0d7xRKYgK0l2kgBFymrRBDsVluCb3HVoo8HRTbwR8Fg94s0YfrW5y7/tznMw6rsGamwaqEVV+oO+C3kbqBYArRG21jeQStFqtSb4Y/BESmYCO6+yBd2FvHVCp1PhuWe3ULLLJ2d7/Mf+LB3LIU6dCDmAGJczKzqUeCNNz6uxOLrG3z4UkXiQyArf2l906WPLXlEy7CQljhLlhh029KRJ0KJE3O/dNmWe96fQasBQVV3zEw8HzlBeUML3A0ezbc0/Hp2tbW6cCrHHoLi9v0dzZjzMtWBnKboxkpUzkrXVlKWVgI3VFGW/GegGG1tXx8/ey0gsFz6+Ujz5Xslev0xhSi4CtJC8NiiR4zOMe27uEFarzgeWwNjx9NidtrsyJEpRTboE0y3sJ7U4Ppzcl665KkfTjujcKhubm+OZ4y1yrLy9dGN7m8XmeHDTWdasr00i0iiWzhg2ro8/0TkWYzyWz4b819Mv35sBjt/tmYS0KCEnA3/3uUrD7zwU8vU1S5XTyQzw5oHLlRrDQTzuz40kjCok8dA1OFbCckSSJpQn3+1sqfZ9n4WFpmN0VjY3N27HBWNYXhpzgzEtHhut06mzsTp0qG9JkzXy5cfbrK9q1je2GLf/EmP0L2aA204x+efX2gv8+8YmTz44zT+8dMR9FcVS+xxvbMZ0wxzfddrSEaNg/MHvRErliDRJ8DyPNBs53j/+7Ha7WEJjq4aVdnvpHU/cet+O8XOjeO3Kq1TLEf3hAGFOmQjdSwqcpvhp1+wh7WGsyFTxGx9YxCflf14/4vrQorXm8fvu5/uv/5Cp+gWEtC2SnUFu0GpdZDiw3d/tVeBu7z4GxuP7r7/xqptbxvEATlrxu5/8njDg3RrgXp5TquS+MeTF0C1zo3NXiW6mj+eVmJ+7QJLGblDmniuOv0Df+rZ31wLfuuL/AKOIfWEbPwOiAAAAAElFTkSuQmCC
""")

DEFAULT_RACE = "all"

options = [
    schema.Option(
        display = "All",
        value = "all",
    ),
    schema.Option(
        display = "Dragonborn",
        value = "dragonborn",
    ),
    schema.Option(
        display = "Dwarf",
        value = "dwarf",
    ),
    schema.Option(
        display = "Elf",
        value = "elf",
    ),
    schema.Option(
        display = "Firbolg",
        value = "firbolg",
    ),
    schema.Option(
        display = "Gnome",
        value = "gnome",
    ),
    schema.Option(
        display = "Half-Elf",
        value = "halfelf",
    ),
    schema.Option(
        display = "Half-Orc",
        value = "halforc",
    ),
    schema.Option(
        display = "Halfling",
        value = "halfling",
    ),
    schema.Option(
        display = "Human",
        value = "human",
    ),
    schema.Option(
        display = "Lizardfolk",
        value = "lizardfolk",
    ),
    schema.Option(
        display = "Tabaxi",
        value = "tabaxi",
    ),
    schema.Option(
        display = "Tiefling",
        value = "tiefling",
    ),
]

def main(config):
    images = [cave, dungeon, dungeon2, dungeon3, forest2, tavern, tavern2, tavern3, campfire, dragon, magma, volcano, bridge, castle, castle2, castle3, castle4, colusseum, market, market2, market3, statue, statue2, swamp, swamp2, temple, village, forest3, forest4, forest5]
    img = randnum(0, len(images))

    BACKGROUNDIMAGE = images[img]
    fontcolor = "#fff"

    THENAME = ""
    THERACE = ""
    THECLASS = ""

    THECLASS = getClass()
    selection = config.get("race") or DEFAULT_RACE
    selection = racelkup(selection)
    if selection == -1:
        selection = randnum(0, 12)

    if selection == 0:
        THENAME = lizardfolk()
        THERACE = "Lizardfolk"
    elif selection == 1:
        THENAME = elf()
        THERACE = "Elf"
    elif selection == 2:
        THENAME = dwarf()
        THERACE = "Dwarf"
    elif selection == 3:
        THENAME = dragonborn()
        THERACE = "Dragonborn"
    elif selection == 4:
        THENAME = gnome()
        THERACE = "Gnome"
    elif selection == 5:
        THENAME = halfelf()
        THERACE = "Half-Elf"
    elif selection == 6:
        THENAME = halforc()
        THERACE = "Half-Orc"
    elif selection == 7:
        THENAME = halfling()
        THERACE = "Halfling"
    elif selection == 8:
        THENAME = human()
        THERACE = "Human"
    elif selection == 9:
        THENAME = tabaxi()
        THERACE = "Tabaxi"
    elif selection == 10:
        THENAME = tiefling()
        THERACE = "Tiefling"
    elif selection == 11:
        THENAME = elf()
        THERACE = "Firbolg"

    if len(THENAME) > 10:
        return render.Root(
            child = render.Stack(
                children = [
                    render.Box(width = 64, height = 32, child = render.Image(src = BACKGROUNDIMAGE)),
                    render.Column(
                        main_align = "start",
                        expanded = True,
                        children = [
                            render.Box(width = 64, height = 11, child = render.Text(content = THERACE, color = fontcolor)),
                            render.Box(width = 64, height = 10, child = render.Text(content = THECLASS, color = fontcolor)),
                            render.Box(width = 64, height = 11, child = render.Marquee(width = 64, height = 11, offset_start = 48, align = "center", child = render.Text(content = THENAME, color = fontcolor))),
                        ],
                    ),
                ],
            ),
        )
    else:
        return render.Root(
            child = render.Stack(
                children = [
                    render.Box(width = 64, height = 32, child = render.Image(src = BACKGROUNDIMAGE)),
                    render.Column(
                        main_align = "start",
                        expanded = True,
                        children = [
                            render.Box(width = 64, height = 11, child = render.Text(content = THERACE, color = fontcolor)),
                            render.Box(width = 64, height = 10, child = render.Text(content = THECLASS, color = fontcolor)),
                            render.Box(width = 64, height = 11, child = render.Text(content = THENAME, color = fontcolor)),
                        ],
                    ),
                ],
            ),
        )

def getClass():
    cl = ["Artificer", "Barbarian", "Bard", "Cleric", "Druid", "Fighter", "Monk", "Paladin", "Ranger", "Rogue", "Sorcerer", "Warlock", "Wizard"]
    rndc = randnum(0, len(cl))
    return cl[rndc]

def elf():
    elfName = ""
    surName = ""
    nm1 = ["Ad", "Ae", "Bal", "Bei", "Car", "Cra", "Dae", "Dor", "El", "Ela", "Er", "Far", "Fen", "Gen", "Glyn", "Hei", "Her", "Ian", "Ili", "Kea", "Kel", "Leo", "Lu", "Mira", "Mor", "Nae", "Nor", "Olo", "Oma", "Pa", "Per", "Pet", "Qi", "Qin", "Ralo", "Ro", "Sar", "Syl", "The", "Tra", "Ume", "Uri", "Va", "Vir", "Waes", "Wran", "Yel", "Yin", "Zin", "Zum"]
    nm2 = ["balar", "beros", "can", "ceran", "dan", "dithas", "faren", "fir", "geiros", "golor", "hice", "horn", "jeon", "jor", "kas", "kian", "lamin", "lar", "len", "maer", "maris", "menor", "myar", "nan", "neiros", "nelis", "norin", "peiros", "petor", "qen", "quinal", "ran", "ren", "ric", "ris", "ro", "salor", "sandoral", "toris", "tumal", "valur", "ven", "warin", "wraek", "xalim", "xidor", "yarus", "ydark", "zeiros", "zumin"]
    nm3 = ["Ad", "Ara", "Bi", "Bry", "Cai", "Chae", "Da", "Dae", "Eil", "En", "Fa", "Fae", "Gil", "Gre", "Hele", "Hola", "Iar", "Ina", "Jo", "Key", "Kris", "Lia", "Lora", "Mag", "Mia", "Neri", "Ola", "Ori", "Phi", "Pres", "Qi", "Qui", "Rava", "Rey", "Sha", "Syl", "Tor", "Tris", "Ula", "Uri", "Val", "Ven", "Wyn", "Wysa", "Xil", "Xyr", "Yes", "Ylla", "Zin", "Zyl"]
    nm4 = ["banise", "bella", "caryn", "cyne", "di", "dove", "fiel", "fina", "gella", "gwyn", "hana", "harice", "jyre", "kalyn", "krana", "lana", "lee", "leth", "lynn", "moira", "mys", "na", "nala", "phine", "phyra", "qirelle", "ra", "ralei", "rel", "rie", "rieth", "rona", "rora", "roris", "satra", "stina", "sys", "thana", "thyra", "tris", "varis", "vyre", "wenys", "wynn", "xina", "xisys", "ynore", "yra", "zana", "zorwyn"]
    nm5 = ["", "", "", "b", "c", "d", "dr", "f", "fl", "g", "h", "k", "l", "m", "n", "r", "qu", "s", "sh", "t", "th", "v", "w", "x", "y"]
    nm6 = ["ae", "ie", "ia", "ei", "ey", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u"]
    nm7 = ["dr", "l", "l", "ld", "ldr", "ll", "lph", "lt", "lth", "m", "n", "ndr", "nn", "nt", "ph", "r", "r", "rd", "rn", "s", "sh", "st", "str", "th", "thr", "v"]
    nm8 = ["a", "e", "i", "o"]
    nm9 = ["dr", "lk", "ndr", "nthr", "sc", "st", "str", "thr", "c", "h", "l", "m", "n", "nn", "ph", "r", "rr", "s", "ss", "v", "x"]
    nm10 = ["ii", "ie", "aea", "ia", "ua", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o"]
    nm11 = ["", "", "", "", "", "l", "n", "nn", "nt", "r", "s", "sh", "th"]
    nm12 = ["alder", "amber", "ash", "aspen", "autumn", "azure", "beech", "birch", "blue", "bold", "bronze", "cedar", "crimson", "dawn", "dew", "diamond", "dusk", "eager", "elder", "elm", "ember", "even", "fall", "far", "feather", "fir", "flower", "fog", "forest", "gem", "gold", "green", "hazel", "light", "lunar", "mist", "moon", "moss", "night", "oak", "oaken", "ocean", "poplar", "rain", "rapid", "raven", "sage", "shadow", "silent", "silver", "spark", "spirit", "spring", "star", "still", "stone", "summer", "sun", "swift", "wild", "willow", "wind", "winter", "wood"]
    nm13 = ["beam", "bell", "birth", "blossom", "breath", "breeze", "brook", "cloud", "crown", "dew", "dream", "dreamer", "fall", "fate", "flight", "flow", "flower", "fond", "gaze", "gazer", "gift", "gleam", "grove", "guard", "heart", "heel", "hold", "kind", "light", "mane", "might", "mind", "moon", "path", "petal", "pride", "rest", "river", "seeker", "sense", "shadow", "shard", "shine", "singer", "smile", "song", "spark", "spell", "spirit", "star", "vale", "walker", "watcher", "whisper", "wish"]

    rndSur = randnum(0, 2)
    rndTp = randnum(0, 2)

    if rndTp == 0:
        # Male
        for _ in range(10000):
            if elfName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                elfName = nm1[rnd] + nm2[rnd2]
                elfName = testSwear(elfName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if elfName == "":
                rnd = randnum(0, len(nm3))
                rnd2 = randnum(0, len(nm4))
                elfName = nm3[rnd] + nm4[rnd2]
                elfName = testSwear(elfName)
                continue
            else:
                break

    if rndSur == 0:
        # Elegant Surname
        rnd = randnum(0, len(nm12))
        rnd2 = randnum(0, len(nm13))
        for _ in range(10000):
            if nm12[rnd] == nm13[rnd2]:
                rnd2 = randnum(0, len(nm13))
                continue
            else:
                break
        surName = nm12[rnd] + nm13[rnd2]
    else:
        # Rando Surname
        nTp = randnum(0, 4)
        rnd = randnum(0, len(nm5))
        rnd2 = randnum(0, len(nm6))
        rnd3 = randnum(0, len(nm7))
        rnd4 = randnum(0, len(nm10))
        rnd5 = randnum(0, len(nm11))
        if nTp == 0:
            for _ in range(10000):
                if nm11[rnd5] == nm7[rnd3] and nm7[rnd3] == nm5[rnd]:
                    rnd3 = randnum(0, len(nm7))
                    continue
                else:
                    break
            surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm10[rnd4] + nm11[rnd5]
        else:
            rnd6 = randnum(0, len(nm8))
            rnd7 = randnum(0, len(nm9))
            for _ in range(10000):
                if nm11[rnd5] == nm9[rnd6] and nm9[rnd6] == nm7[rnd3]:
                    rnd7 = randnum(0, len(nm9))
                    continue
                else:
                    break
            if nTp == 1:
                surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm8[rnd6] + nm9[rnd7] + nm10[rnd4] + nm11[rnd5]
            else:
                rnd8 = randnum(0, len(nm8))
                rnd9 = randnum(0, len(nm9))
                for _ in range(10000):
                    if nm11[rnd5] == nm9[rnd6] and nm9[rnd6] == nm9[rnd9]:
                        rnd7 = randnum(0, len(nm9))
                        continue
                    else:
                        break

                for _ in range(10000):
                    if rnd9 < 8 and rnd7 < 8:
                        rnd7 = randnum(0, len(nm9))
                        continue
                    else:
                        break

                if nTp == 2:
                    surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm8[rnd6] + nm9[rnd7] + nm8[rnd8] + nm9[rnd9] + nm10[rnd4] + nm11[rnd5]
                else:
                    surName = nm5[rnd] + nm6[rnd2] + nm9[rnd7] + nm8[rnd8] + nm7[rnd3] + nm8[rnd6] + nm9[rnd9] + nm10[rnd4] + nm11[rnd5]

    surName = testSwear(surName)

    return elfName.capitalize() + " " + surName.capitalize()

def lizardfolk():
    lizName = ""
    nm1 = ["", "", "", "", "", "b", "d", "g", "jh", "k", "l", "m", "n", "r", "s", "sh", "t", "tr", "th", "thr", "v"]
    nm2 = ["a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "aa", "ae", "ao", "au"]
    nm3 = ["ch", "d", "dr", "dh", "g", "gr", "gh", "gg", "l", "ll", "lt", "lth", "lr", "p", "r", "rg", "rht", "rk", "rt", "rd", "rth", "sh", "sk", "shr", "sh", "sl", "t", "th", "tr", "thr"]
    nm4 = ["a", "e", "i", "o", "u", "y", "a", "e", "i", "o", "u", "y", "a", "e", "i", "o", "u", "y", "a", "e", "i", "o", "u", "y", "a", "e", "i", "o", "u", "y", "a", "e", "i", "o", "u", "y", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "ea", "ua", "ae", "ia", "aa", "ao"]
    nm5 = ["c", "g", "gr", "gn", "k", "kh", "kr", "r", "rr", "s", "ss", "sr", "st", "str", "t", "th", "tr"]
    nm6 = ["", "", "", "", "", "", "", "ch", "k", "n", "nd", "nk", "nt", "r", "rd", "rk", "rt", "rth", "s", "ss", "sh", "sj", "sk", "t", "th", "v", "x"]

    namernd = randnum(0, 3)
    rnd = randnum(0, len(nm1))
    rnd2 = randnum(0, len(nm2))
    rnd3 = randnum(0, len(nm6))
    if namernd == 0:
        # Short Name
        if rnd < 5:
            for _ in range(10000):
                if nm6[rnd3] == nm1[rnd]:
                    rnd3 = randnum(0, len(nm6))
                    continue
                else:
                    break
        lizName = nm1[rnd] + nm2[rnd2] + nm6[rnd3]
    else:
        rnd4 = randnum(0, len(nm3))
        rnd5 = randnum(0, len(nm4))
        for _ in range(10000):
            if nm3[rnd4] == nm1[rnd] or nm3[rnd4] == nm6[rnd3]:
                rnd4 = randnum(0, len(nm3))
                continue
            else:
                break
        if namernd == 1:
            # Medium Name
            lizName = nm1[rnd] + nm2[rnd2] + nm3[rnd4] + nm4[rnd5] + nm6[rnd3]
        else:
            # Long Name
            rnd6 = randnum(0, len(nm2))
            rnd7 = randnum(0, len(nm5))
            for _ in range(10000):
                if nm5[rnd7] == nm3[rnd4] or nm5[rnd7] == nm6[rnd3]:
                    rnd7 = randnum(0, len(nm5))
                    continue
                else:
                    break
            lizName = nm1[rnd] + nm2[rnd2] + nm3[rnd4] + nm2[rnd6] + nm5[rnd7] + nm4[rnd5] + nm6[rnd3]
    return lizName.capitalize()

def halfelf():
    heName = ""
    nm1 = ["Al", "Aro", "Bar", "Bel", "Cor", "Cra", "Dav", "Dor", "Eir", "El", "Fal", "Fril", "Gaer", "Gra", "Hal", "Hor", "Ian", "Ilo", "Jam", "Kev", "Kri", "Leo", "Lor", "Mar", "Mei", "Nil", "Nor", "Ori", "Os", "Pan", "Pet", "Quo", "Raf", "Ri", "Sar", "Syl", "Tra", "Tyr", "Uan", "Ul", "Van", "Vic", "Wal", "Wil", "Xan", "Xav", "Yen", "Yor", "Zan", "Zyl"]
    nm2 = ["avor", "ben", "borin", "coril", "craes", "deyr", "dithas", "elor", "enas", "faelor", "faerd", "finas", "fyr", "gotin", "gretor", "homin", "horn", "kas", "koris", "lamir", "lanann", "lumin", "minar", "morn", "nan", "neak", "neiros", "orin", "ovar", "parin", "phanis", "qarim", "qinor", "reak", "ril", "ros", "sariph", "staer", "torin", "tumil", "valor", "voril", "warith", "word", "xian", "xiron", "yeras", "ynor", "zaphir", "zaren"]
    nm3 = ["Alu", "Aly", "Ar", "Bren", "Byn", "Car", "Co", "Dar", "Del", "El", "Eli", "Fae", "Fha", "Gal", "Gif", "Haly", "Ho", "Ile", "Iro", "Jen", "Jil", "Kri", "Kys", "Les", "Lora", "Ma", "Mar", "Mare", "Neri", "Nor", "Ol", "Ophi", "Phaye", "Pri", "Qi", "Que", "Rel", "Res", "Sael", "Saf", "Syl", "Ther", "Tyl", "Una", "Uri", "Ven", "Vyl", "Win", "Wol", "Xil", "Xyr", "Yes", "Yll", "Zel", "Zin"]
    nm4 = ["aerys", "anys", "bellis", "bwynn", "cerys", "charis", "diane", "dove", "elor", "enyphe", "faen", "fine", "galyn", "gwynn", "hana", "hophe", "kaen", "kilia", "lahne", "lynn", "mae", "malis", "mythe", "nalore", "noa", "nys", "ona", "phira", "pisys", "qarin", "qwyn", "rila", "rora", "seris", "stine", "sys", "thana", "theris", "tihne", "trana", "viel", "vyre", "walyn", "waris", "xaris", "xipha", "yaries", "yra", "zenya", "zira"]

    rndTp = randnum(0, 2)
    if rndTp == 0:
        # Male
        for _ in range(10000):
            if heName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                heName = nm1[rnd] + nm2[rnd2]
                heName = testSwear(heName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if heName == "":
                rnd = randnum(0, len(nm3))
                rnd2 = randnum(0, len(nm4))
                heName = nm3[rnd] + nm4[rnd2]
                heName = testSwear(heName)
                continue
            else:
                break
    return heName.capitalize()

def halforc():
    hoName = ""
    nm1 = ["Ag", "Agg", "Ar", "Arn", "As", "At", "Atr", "B", "Bar", "Bel", "Bor", "Br", "Brak", "C", "Cr", "D", "Dor", "Dr", "Dur", "G", "Gal", "Gan", "Gar", "Gna", "Gor", "Got", "Gr", "Gram", "Grim", "Grom", "Grum", "Gul", "H", "Hag", "Han", "Har", "Hog", "Hon", "Hor", "Hun", "Hur", "K", "Kal", "Kam", "Kar", "Kel", "Kil", "Kom", "Kor", "Kra", "Kru", "Kul", "Kur", "Lum", "M", "Mag", "Mahl", "Mak", "Mal", "Mar", "Mog", "Mok", "Mor", "Mug", "Muk", "Mura", "N", "Oggu", "Ogu", "Ok", "Oll", "Or", "Rek", "Ren", "Ron", "Rona", "S", "Sar", "Sor", "T", "Tan", "Th", "Thar", "Ther", "Thr", "Thur", "Trak", "Truk", "Ug", "Uk", "Ukr", "Ull", "Ur", "Urth", "Urtr", "Z", "Za", "Zar", "Zas", "Zav", "Zev", "Zor", "Zur", "Zus"]
    nm2 = ["a", "a", "a", "o", "o", "e", "i", "u", "u", "u"]
    nm3 = ["bak", "bar", "bark", "bash", "bur", "burk", "d", "dak", "dall", "dar", "dark", "dash", "dim", "dur", "durk", "g", "gak", "gall", "gar", "gark", "gash", "glar", "gul", "gur", "m", "mak", "mar", "marsh", "mash", "mir", "mur", "n", "nar", "nars", "nur", "rak", "rall", "rash", "rim", "rimm", "rk", "rsh", "rth", "ruk", "sk", "tar", "tir", "tur", "z", "zall", "zar", "zur"]
    nm4 = ["Al", "Ar", "Br", "Ek", "El", "Fal", "Fel", "Fol", "Ful", "G", "Gaj", "Gar", "Gij", "Gor", "Gr", "Gry", "Gyn", "Hur", "K", "Kar", "Kat", "Ker", "Ket", "Kir", "Kot", "Kur", "Kut", "Lag", "M", "Mer", "Mir", "Mor", "N", "Ol", "Oot", "Puy", "R", "Rah", "Rahk", "Ras", "Rash", "Raw", "Roh", "Rohk", "S", "Sam", "San", "Sem", "Sen", "Sh", "Shay", "Sin", "Sum", "Sun", "Tam", "Tem", "Tu", "Tum", "Ub", "Um", "Ur", "Van", "Zan", "Zen", "Zon", "Zun"]
    nm5 = ["a", "a", "o", "o", "e", "i", "i", "u"]
    nm6 = ["d", "da", "dar", "dur", "g", "gar", "gh", "gri", "gu", "sh", "sha", "shi", "gum", "gume", "gur", "ki", "mar", "mi", "mira", "me", "mur", "ne", "ner", "nir", "nar", "nchu", "ni", "nur", "ral", "rel", "ri", "rook", "ti", "tah", "tir", "tar", "tur", "war", "z", "zar", "zara", "zi", "zur", "zura", "zira"]

    rndTp = randnum(0, 2)
    if rndTp == 0:
        # Male
        for _ in range(10000):
            if hoName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                rnd3 = randnum(0, len(nm3))
                hoName = nm1[rnd] + nm2[rnd2] + nm3[rnd3]
                hoName = testSwear(hoName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if hoName == "":
                rnd = randnum(0, len(nm4))
                rnd2 = randnum(0, len(nm5))
                rnd3 = randnum(0, len(nm6))
                hoName = nm4[rnd] + nm5[rnd2] + nm6[rnd3]
                hoName = testSwear(hoName)
                continue
            else:
                break
    return hoName.capitalize()

def halfling():
    halflingName = ""
    surName = ""
    nm1 = ["An", "Ar", "Bar", "Bel", "Con", "Cor", "Dan", "Dav", "El", "Er", "Fal", "Fin", "Flyn", "Gar", "Go", "Hal", "Hor", "Ido", "Ira", "Jan", "Jo", "Kas", "Kor", "La", "Lin", "Mar", "Mer", "Ne", "Nor", "Ori", "Os", "Pan", "Per", "Pim", "Quin", "Quo", "Ri", "Ric", "San", "Shar", "Tar", "Te", "Ul", "Uri", "Val", "Vin", "Wen", "Wil", "Xan", "Xo", "Yar", "Yen", "Zal", "Zen"]
    nm2 = ["ace", "amin", "bin", "bul", "dak", "dal", "der", "don", "emin", "eon", "fer", "fire", "gin", "hace", "horn", "kas", "kin", "lan", "los", "min", "mo", "nad", "nan", "ner", "orin", "os", "pher", "pos", "ras", "ret", "ric", "rich", "rin", "ry", "ser", "sire", "ster", "ton", "tran", "umo", "ver", "vias", "von", "wan", "wrick", "yas", "yver", "zin", "zor", "zu"]
    nm3 = ["An", "Ari", "Bel", "Bre", "Cal", "Chen", "Dar", "Dia", "Ei", "Eo", "Eli", "Era", "Fay", "Fen", "Fro", "Gel", "Gra", "Ha", "Hil", "Ida", "Isa", "Jay", "Jil", "Kel", "Kith", "Le", "Lid", "Mae", "Mal", "Mar", "Ne", "Ned", "Odi", "Ora", "Pae", "Pru", "Qi", "Qu", "Ri", "Ros", "Sa", "Shae", "Syl", "Tham", "Ther", "Tryn", "Una", "Uvi", "Va", "Ver", "Wel", "Wi", "Xan", "Xi", "Yes", "Yo", "Zef", "Zen"]
    nm4 = ["alyn", "ara", "brix", "byn", "caryn", "cey", "da", "dove", "drey", "elle", "eni", "fice", "fira", "grace", "gwen", "haly", "jen", "kath", "kis", "leigh", "la", "lie", "lile", "lienne", "lyse", "mia", "mita", "ne", "na", "ni", "nys", "ola", "ora", "phina", "prys", "rana", "ree", "ri", "ris", "sica", "sira", "sys", "tina", "trix", "ula", "vira", "vyre", "wyn", "wyse", "yola", "yra", "zana", "zira"]
    nm12 = ["amber", "apple", "autumn", "barley", "big", "boulder", "bramble", "bright", "bronze", "brush", "cherry", "cinder", "clear", "cloud", "common", "copper", "deep", "dust", "earth", "elder", "ember", "fast", "fat", "fern", "flint", "fog", "fore", "free", "glen", "glow", "gold", "good", "grand", "grass", "great", "green", "haven", "heart", "high", "hill", "hog", "humble", "keen", "laughing", "lea", "leaf", "light", "little", "lone", "long", "lunar", "marble", "mild", "mist", "moon", "moss", "night", "nimble", "proud", "quick", "raven", "reed", "river", "rose", "rumble", "shadow", "silent", "silver", "smooth", "soft", "spring", "still", "stone", "stout", "strong", "summer", "sun", "swift", "tall", "tea", "ten", "thistle", "thorn", "toss", "true", "twilight", "under", "warm", "whisper", "wild", "wise"]
    nm13 = ["ace", "barrel", "beam", "belly", "berry", "bloom", "blossom", "bluff", "bottle", "bough", "brace", "braid", "branch", "brand", "bridge", "brook", "brush", "cheeks", "cloak", "cobble", "creek", "crest", "dance", "dancer", "dew", "dream", "earth", "eye", "eyes", "feet", "fellow", "finger", "fingers", "flow", "flower", "foot", "found", "gather", "glide", "grove", "hand", "hands", "hare", "heart", "hill", "hollow", "kettle", "lade", "leaf", "man", "mane", "mantle", "meadow", "moon", "mouse", "pot", "rabbit", "seeker", "shadow", "shine", "sky", "song", "spark", "spell", "spirit", "step", "stride", "sun", "surge", "top", "topple", "vale", "water", "whistle", "willow", "wind", "wood", "woods"]

    rndTp = randnum(0, 2)
    if rndTp == 0:
        # Male
        for _ in range(10000):
            if halflingName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                halflingName = nm1[rnd] + nm2[rnd2]
                halflingName = testSwear(halflingName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if halflingName == "":
                rnd = randnum(0, len(nm3))
                rnd2 = randnum(0, len(nm4))
                halflingName = nm3[rnd] + nm4[rnd2]
                halflingName = testSwear(halflingName)
                continue
            else:
                break

    #Surname
    rnd = randnum(0, len(nm12))
    rnd2 = randnum(0, len(nm13))
    for _ in range(10000):
        if nm12[rnd] == nm13[rnd2]:
            rnd2 = randnum(0, len(nm13))
            continue
        else:
            break
    surName = nm12[rnd] + nm13[rnd2]
    return halflingName.capitalize() + " " + surName.capitalize()

def human():
    humanName = ""
    surName = ""
    nm1 = ["", "", "b", "bh", "f", "h", "j", "kh", "m", "n", "nh", "r", "rh", "s", "z"]
    nm2 = ["a", "e", "u", "a", "e", "u", "a", "e", "u", "i", "ei"]
    nm3 = ["b", "d", "hm", "hn", "hl", "kh", "l", "m", "rd", "r", "s", "sh", "z"]
    nm4 = ["d", "m", "n", "r"]
    nm5 = ["", "", "c", "f", "h", "j", "m", "n", "r", "s", "sh", "y", "z"]
    nm6 = ["a", "e", "u", "a", "e", "u", "o", "o", "i", "i", "ei"]
    nm7 = ["d", "f", "hn", "hl", "hm", "hr", "l", "m", "n", "p", "r", "s", "sh", "sm", "sn", "t", "v", "z"]
    nm8 = ["h", "l"]
    nm9 = ["b", "bh", "c", "d", "dh", "h", "j", "kh", "m", "n", "p", "r", "rh", "sh", "z"]
    nm10 = ["a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "a", "a", "ei"]
    nm11 = ["d", "h", "hr", "hl", "k", "kh", "l", "m", "mm", "n", "nn", "ss", "st", "sh"]
    nm12 = ["", "", "", "", "", "d", "l", "m", "n", "r"]
    nm13 = ["", "b", "br", "d", "g", "gr", "h", "m", "n", "r", "st", "t", "v"]
    nm14 = ["a", "e", "i", "o", "u"]
    nm15 = ["", "br", "cr", "gr", "kv", "kr", "l", "ll", "ld", "lv", "nd", "ng", "nk", "nv", "rd", "rg", "rk", "rst", "rv", "v"]
    nm16 = ["", "", "", "d", "dd", "g", "l", "lm", "m", "n", "r", "rk", "rn"]
    nm17 = ["", "c", "j", "jh", "k", "l", "m", "n", "r", "s", "sh", "t"]
    nm18 = ["a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "ee", "ai", "ei", "ie"]
    nm19 = ["ch", "dr", "l", "ll", "lr", "ldr", "ls", "lz", "n", "ndr", "rl", "r", "rr", "rv", "ss", "sr", "sv", "w", "z", "zz", "zn"]
    nm20 = ["", "", "", "", "h", "l", "ll", "n"]
    nm21 = ["Axe", "Glow", "Blade", "Blood", "Bone", "Cloud", "Crag", "Crest", "Doom", "Dream", "Coven", "Elf", "Fern", "Feather", "Fire", "Fist", "Flame", "Forest", "Hammer", "Heart", "Hell", "Leaf", "Light", "Moon", "Rage", "River", "Rock", "Shade", "Shadow", "Shield", "Snow", "Spirit", "Star", "Steel", "Stone", "Swift", "Tree", "Whisper", "Wind", "Wolf", "Wood", "Gloom", "Glory", "Orb", "Ash", "Blaze", "Amber", "Autumn", "Barley", "Battle", "Bear", "Black", "Blue", "Boulder", "Bright", "Bronze", "Burning", "Cask", "Chest", "Cinder", "Clan", "Claw", "Clear", "Cliff", "Cold", "Common", "Crystal", "Dark", "Dawn", "Day", "Dead", "Death", "Deep", "Dew", "Dirge", "Distant", "Down", "Dragon", "Dusk", "Dust", "Eagle", "Earth", "Ember", "Even", "Far", "Flat", "Flint", "Fog", "Fore", "Four", "Free", "Frost", "Frozen", "Full", "Fuse", "Gold", "Horse", "Gore", "Grand", "Gray", "Grass", "Great", "Green", "Grizzly", "Hallow", "Hallowed", "Hard", "Hawk", "Haze", "Heavy", "Haven", "High", "Hill", "Holy", "Honor", "Forest", "Humble", "Hydra", "Ice", "Iron", "Keen", "Laughing", "Lightning", "Lion", "Lone", "Long", "Low", "Luna", "Marble", "Meadow", "Mild", "Mirth", "Mist", "Molten", "Monster", "Morning", "Moss", "Mountain", "Moon", "Mourn", "Mourning", "Night", "Noble", "Nose", "Oat", "Ocean", "Pale", "Peace", "Phoenix", "Pine", "Plain", "Pride", "Proud", "Pyre", "Rain", "Rapid", "Raven", "Red", "Regal", "Rich", "Rose", "Rough", "Rumble", "Rune", "Sacred", "Sage", "Saur", "Sea", "Serpent", "Sharp", "Silent", "Silver", "Simple", "Single", "Skull", "Sky", "Slate", "Smart", "Snake", "Soft", "Solid", "Spider", "Spring", "Stag", "Star", "Stern", "Still", "Storm", "Stout", "Strong", "Summer", "Sun", "Tall", "Three", "Thunder", "Titan", "True", "Truth", "Marsh", "Tusk", "Twilight", "Two", "Void", "War", "Wheat", "Whit", "White", "Wild", "Winter", "Wise", "Wyvern", "Young", "Alpen", "Crest", "Crow", "Fallen", "Farrow", "Haven", "Master", "Nether", "Nickle", "Raven", "River", "Stone", "Tarren", "Terra", "Water", "Willow", "Wooden"]
    nm22 = ["axe", "glow", "beam", "blade", "blood", "bone", "cloud", "dane", "crag", "crest", "doom", "dream", "feather", "fire", "fist", "flame", "forest", "hammer", "heart", "hell", "leaf", "light", "moon", "rage", "river", "rock", "shade", "claw", "shadow", "shield", "snow", "spirit", "star", "steel", "stone", "swift", "tree", "whisper", "wind", "wolf", "wood", "gloom", "glory", "orb", "ash", "blaze", "arm", "arrow", "bane", "bash", "basher", "beard", "belly", "bend", "bender", "binder", "bleeder", "blight", "bloom", "blossom", "blower", "glade", "bluff", "bough", "bow", "brace", "braid", "branch", "brand", "breaker", "breath", "breeze", "brew", "bringer", "brook", "brow", "caller", "chaser", "reaper", "chewer", "cleaver", "creek", "crusher", "cut", "cutter", "dancer", "dew", "down", "draft", "dreamer", "drifter", "dust", "eye", "eyes", "fall", "fang", "flare", "flaw", "flayer", "flow", "follower", "flower", "force", "forge", "fury", "gaze", "gazer", "gem", "gleam", "glide", "grain", "grip", "grove", "guard", "gust", "hair", "hand", "helm", "hide", "horn", "hunter", "jumper", "keep", "keeper", "killer", "lance", "lash", "less", "mane", "mantle", "mark", "maul", "maw", "might", "more", "mourn", "oak", "ore", "peak", "pelt", "pike", "punch", "reaver", "rider", "ridge", "ripper", "roar", "run", "runner", "scar", "scream", "scribe", "seeker", "shaper", "shard", "shot", "shout", "singer", "sky", "slayer", "snarl", "snout", "soar", "song", "sorrow", "spark", "spear", "spell", "spire", "splitter", "sprinter", "stalker", "steam", "stream", "strength", "stride", "strider", "strike", "striker", "sun", "surge", "sword", "sworn", "tail", "taker", "talon", "thorn", "tide", "toe", "track", "trap", "trapper", "vale", "valor", "vigor", "walker", "ward", "watcher", "water", "weaver", "whirl", "whisk", "winds", "wing", "woods", "wound", "brooke", "fall", "fallow", "horn", "root", "shine", "swallow", "thorne", "willow", "wood"]
    nm23 = ["", "", "b", "br", "f", "g", "gl", "gr", "h", "k", "m", "n", "p", "r", "s", "v"]
    nm24 = ["a", "e", "i", "o"]
    nm25 = ["b", "br", "d", "dr", "dg", "g", "gr", "r", "rg", "rd", "rv", "s", "v", "z"]
    nm26 = ["f", "l", "m", "n", "r"]
    nm27 = ["c", "ch", "h", "k", "l", "m", "n", "r", "s", "t", "v", "z"]
    nm28 = ["h", "hn", "hr", "l", "lm", "lr", "ln", "n", "nn", "r", "rn", "rl", "rm", "t", "th", "thr", "z"]
    nm29 = ["", "", "", "", "", "", "h", "l", "n", "s"]
    nm30 = ["b", "ch", "d", "gr", "gl", "k", "m", "n", "r", "s", "sh", "st", "v"]
    nm31 = ["a", "e", "i", "o", "u"]
    nm32 = ["d", "dr", "k", "kr", "kn", "l", "m", "n", "r", "rg", "rk", "rn", "rd", "v", "vr", "z"]
    nm33 = ["dz", "g", "n", "rsk", "sk", "tsk", "v", "z"]
    nm34 = ["", "", "", "bl", "br", "fr", "g", "gr", "l", "m", "r", "st", "str", "t", "tr", "v", "z"]
    nm35 = ["a", "e", "o", "u"]
    nm36 = ["ck", "dr", "dv", "gr", "gn", "lc", "ld", "lv", "lb", "m", "nn", "nd", "nv", "rd", "rc", "rk", "rb"]
    nm37 = ["m", "n", "r", "rth", "th"]
    nm38 = ["", "", "b", "c", "h", "k", "l", "m", "n", "r", "s", "v", "w", "z"]
    nm39 = ["fn", "fl", "fr", "g", "l", "lg", "lr", "m", "n", "r", "rh", "sh", "str", "th", "thr", "v", "vr"]
    nm40 = ["", "", "", "", "y"]
    nm43 = ["b", "d", "g", "h", "j", "k", "l", "m", "n", "r", "s", "t", "th", "v", "z"]
    nm44 = ["a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "io", "ao", "eo", "eu", "ue"]
    nm45 = ["d-k", "d-v", "k-d", "k-v", "k-m", "k-r", "m-k", "m-z", "m-v", "n-v", "n-z", "n-d", "r-k", "r-v", "r-z", "t-k", "r-d", "h-k", "h-z", "-k", "-d", "-m", "-n", "-v", "-z", "-t", "-r", "ch", "d", "h", "hp", "hk", "hv", "j", "k", "m", "n", "r", "rh", "t", "th", "v", "z", "ch", "d", "h", "hp", "hk", "hv", "j", "k", "m", "n", "r", "rh", "t", "th", "v", "z", "ch", "d", "h", "hp", "hk", "hv", "j", "k", "m", "n", "r", "rh", "t", "th", "v", "z"]
    nm46 = ["", "", "d", "f", "h", "k", "n", "r", "s", "th", "z"]
    nm47 = ["c", "ch", "f", "h", "k", "l", "m", "n", "r", "s", "t", "th", "v", "z"]
    nm48 = ["ch", "f", "fr", "h", "l", "m", "n", "ph", "s", "sh", "r", "th", "z", "zr", "zh"]
    nm49 = ["", "", "", "", "", "", "", "h", "s", "th"]
    nm50 = ["b", "d", "f", "h", "j", "l", "m", "n", "r", "s", "v", "z"]
    nm51 = ["a", "e", "i", "u", "a", "e", "i", "u", "a", "e", "i", "u", "a", "e", "i", "o", "u", "ue", "uu"]
    nm52 = ["cr", "ch", "hp", "hk", "hr", "j", "kr", "kd", "l", "lr", "ldr", "lt", "ltr", "nd", "nsk", "nkh", "nth", "ndr", "nkr", "nz", "pr", "pv", "th", "thr", "v", "vr", "z", "zr", "zd"]
    nm53 = ["b", "d", "ft", "fk", "hd", "hr", "hk", "k", "kt", "ld", "m", "t"]
    nm54 = ["b", "br", "d", "dr", "f", "g", "j", "k", "m", "r", "s", "sh", "t", "vl", "z"]
    nm55 = ["a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "oo", "ou", "au"]
    nm56 = ["d", "dj", "j", "lm", "ld", "lv", "m", "mz", "mv", "n", "nz", "nd", "nr", "nd", "r", "rg", "rd", "rl", "rv", "rz", "sl", "sv", "sd", "th", "tv", "v", "z"]
    nm57 = ["c", "d", "k", "r", "s", "sk", "t"]
    nm58 = ["", "", "d", "f", "h", "l", "m", "n", "r", "s", "sh", "t", "th", "v", "y", "z"]
    nm59 = ["a", "e", "i", "u"]
    nm60 = ["ch", "dr", "dh", "f", "fr", "gr", "h", "ldr", "lm", "ln", "lv", "lr", "mm", "mz", "mv", "ndr", "nr", "r", "rr", "rr", "rv", "rs", "rl", "v", "vr", "v", "vl"]
    nm61 = ["", "", "", "", "", "", "", "", "", "", "", "", "l", "n", "s", "sh", "th"]
    nm62 = ["", "", "ch", "d", "g", "gr", "h", "m", "n", "r", "st", "t", "tr", "v", "vr", "z"]
    nm63 = ["a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "ye", "ya"]
    nm64 = ["b", "d", "dz", "g", "k", "ld", "lb", "lm", "lz", "m", "mr", "mz", "n", "nz", "ng", "nt", "r", "rg", "rn", "rk", "th", "tr", "tv", "v", "vr", "vz", "b", "d", "g", "k", "m", "n", "r", "v"]
    nm65 = ["", "", "ch", "f", "h", "j", "l", "m", "q", "sh", "t", "th", "w", "z"]
    nm66 = ["a", "i", "e", "o", "u", "ia", "ui", "io", "ie", "iu"]
    nm67 = ["", "", "", "h", "m", "n", "ng", "p", "w", "y"]
    nm68 = ["b", "c", "ch", "d", "j", "l", "m", "n", "p", "q", "sh", "t", "ts", "x", "y", "z"]
    nm69 = ["ai", "ia", "ao", "ei", "iao", "ui", "ua", "ue"]
    nm70 = ["", "", "", "c", "ch", "d", "h", "j", "k", "l", "m", "n", "p", "q", "s", "sh", "t", "w", "x", "y", "z"]
    nm71 = ["a", "i", "u", "ai", "ia", "iao", "ue", "ei", "ie", "ua", "ao"]
    nm72 = ["", "", "", "m", "n", "ng", "y"]
    nm73 = ["", "", "ch", "cr", "d", "gr", "f", "fr", "h", "m", "p", "r", "s", "t", "v", "z"]
    nm74 = ["a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "ai", "ie", "ue", "ea"]
    nm75 = ["b", "br", "c", "dr", "l", "ld", "lb", "m", "mb", "n", "nr", "nt", "nch", "r", "rf", "rv", "rn", "rc", "rd", "rt", "st", "sc", "t", "v", "z"]
    nm76 = ["", "", "l", "n", "r", "s", "z"]
    nm77 = ["", "", "", "b", "d", "f", "j", "l", "m", "q", "s", "v"]
    nm78 = ["a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "a", "e", "i", "o", "ui", "ua", "ai", "ia", "ie", "ei"]
    nm79 = ["d", "l", "lm", "m", "n", "nc", "nd", "ndr", "nt", "nn", "r", "rt", "s", "t", "tt", "v"]
    nm80 = ["", "", "b", "c", "d", "f", "g", "h", "j", "m", "p", "r", "s", "v", "z"]
    nm81 = ["br", "c", "dr", "g", "h", "l", "lb", "ld", "m", "n", "nd", "nz", "r", "rn", "rg", "s", "sc", "sq", "st", "v", "z"]
    nm82 = ["", "", "", "", "l", "n", "r", "s"]
    nm83 = [
        "Delmon",
        "Karcsi",
        "Quesnel",
        "Aaron",
        "Abdiel",
        "Abdullah",
        "Abel",
        "Abelard",
        "Abilo",
        "Abraham",
        "Abram",
        "Acel",
        "Achille",
        "Achilles",
        "Achilleus",
        "Achim",
        "Achmed",
        "Ackerley",
        "Ackley",
        "Acton",
        "Adalard",
        "Adalbero",
        "Adalbert",
        "Adalbrecht",
        "Adalwine",
        "Adam",
        "Adan",
        "Addi",
        "Addisen",
        "Addison",
        "Adelard",
        "Adelbert",
        "Adelfo",
        "Aden",
        "Adger",
        "Adhelard",
        "Adi",
        "Adison",
        "Aditya",
        "Adolf",
        "Adolfo",
        "Adolph",
        "Adonai",
        "Adonija",
        "Adonis",
        "Adray",
        "Adrian",
        "Adrianus",
        "Adriel",
        "Adrien",
        "Advent",
        "Ageline",
        "Agrican",
        "Agron",
        "Agustin",
        "Ahmad",
        "Ahmed",
        "Aidan",
        "Aiden",
        "Aiken",
        "Ailen",
        "Akim",
        "Alain",
        "Alan",
        "Albaric",
        "Albero",
        "Albert",
        "Alberto",
        "Albin",
        "Albrecht",
        "Alcot",
        "Alcott",
        "Alden",
        "Alder",
        "Aldo",
        "Aldred",
        "Aldren",
        "Aldrich",
        "Aldrick",
        "Aldridge",
        "Aldrych",
        "Aldwin",
        "Aldwyn",
        "Alec",
        "Alejandro",
        "Aleron",
        "Alessandro",
        "Alessio",
        "Alex",
        "Alexander",
        "Alexandre",
        "Alexandro",
        "Alexei",
        "Alexis",
        "Alexzander",
        "Alf",
        "Alfie",
        "Alfons",
        "Alfonse",
        "Alfonso",
        "Alfred",
        "Alfredo",
        "Alfric",
        "Alfrid",
        "Algar",
        "Alger",
        "Algernon",
        "Algrenon",
        "Ali",
        "Alijah",
        "Alke",
        "Alkuin",
        "Alkwin",
        "Allan",
        "Allard",
        "Allen",
        "Allie",
        "Allon",
        "Allston",
        "Allvar",
        "Aloin",
        "Alois",
        "Aloisius",
        "Alon",
        "Alonso",
        "Alonzo",
        "Aloys",
        "Alphons",
        "Alphonse",
        "Alphonso",
        "Alphonsus",
        "Alric",
        "Altfried",
        "Altman",
        "Alton",
        "Aluin",
        "Alvan",
        "Alvaro",
        "Alvertos",
        "Alvin",
        "Alvis",
        "Alvord",
        "Alvyn",
        "Alwin",
        "Alwyn",
        "Amadeo",
        "Amadeus",
        "Amari",
        "Amarion",
        "Amaud",
        "Amaury",
        "Ambert",
        "Amel",
        "Amerigo",
        "Amery",
        "Ames",
        "Amey",
        "Amir",
        "Ammon",
        "Amo",
        "Amory",
        "Amos",
        "Amou",
        "Amoux",
        "Amsden",
        "Anatol",
        "Anatole",
        "Anaxagoras",
        "Anaximander",
        "Ancel",
        "Ancil",
        "Anderl",
        "Anderson",
        "Andor",
        "Andre",
        "Andrea",
        "Andreas",
        "Andrei",
        "Andres",
        "Andrew",
        "Andrey",
        "Andrick",
        "Andrijan",
        "Andrin",
        "Andy",
        "Angel",
        "Angelico",
        "Angelino",
        "Angelo",
        "Angelus",
        "Angus",
        "Anno",
        "Anse",
        "Ansel",
        "Ansell",
        "Anselm",
        "Anselme",
        "Ansgar",
        "Anshelm",
        "Ansko",
        "Ansley",
        "Answald",
        "Anthony",
        "Antoine",
        "Anton",
        "Antonio",
        "Antonius",
        "Antony",
        "Antwan",
        "Aramis",
        "Arber",
        "Arcadius",
        "Arch",
        "Archaimbaud",
        "Archambault",
        "Archard",
        "Archenhaud",
        "Archer",
        "Archerd",
        "Archibald",
        "Archie",
        "Archimbald",
        "Archy",
        "Arden",
        "Arendt",
        "Ari",
        "Arian",
        "Aribert",
        "Ariel",
        "Arjen",
        "Arjun",
        "Arledge",
        "Arley",
        "Arlo",
        "Armand",
        "Armande",
        "Armando",
        "Armani",
        "Armin",
        "Arminius",
        "Armond",
        "Armstrong",
        "Arnald",
        "Arnaldo",
        "Arnall",
        "Arnatt",
        "Arnaud",
        "Arndell",
        "Arndt",
        "Arne",
        "Arnet",
        "Arney",
        "Arnhold",
        "Arnie",
        "Arnim",
        "Arno",
        "Arnold",
        "Arnott",
        "Aron",
        "Arthur",
        "Artur",
        "Arturo",
        "Artus",
        "Arundel",
        "Arvie",
        "Arvin",
        "Arvis",
        "Arvon",
        "Arwin",
        "Asa",
        "Ascelin",
        "Asher",
        "Ashley",
        "Ashton",
        "Asterios",
        "Athelstan",
        "Attila",
        "Auberon",
        "Aubert",
        "Aubin",
        "Aubrey",
        "Aubry",
        "Audric",
        "Audwin",
        "August",
        "Augustin",
        "Augustinus",
        "Augusto",
        "Augustus",
        "Auhert",
        "Aurélien",
        "Aurel",
        "Aurelian",
        "Aurelianus",
        "Aurelius",
        "Auriville",
        "Austen",
        "Austin",
        "Austyn",
        "Avenall",
        "Aveneil",
        "Avenelle",
        "Avent",
        "Averill",
        "Avery",
        "Awarnach",
        "Axel",
        "Ayden",
        "Baby",
        "Bailey",
        "Baldemar",
        "Baldo",
        "Baldric",
        "Balduin",
        "Baldus",
        "Baldwin",
        "Balko",
        "Ballard",
        "Balthasar",
        "Balthassar",
        "Bancroft",
        "Baptist",
        "Baptiste",
        "Barclay",
        "Barden",
        "Barklay",
        "Barkley",
        "Barks",
        "Barksdale",
        "Barnabas",
        "Barnard",
        "Barnet",
        "Barnett",
        "Baron",
        "Barr",
        "Barret",
        "Barrett",
        "Barrie",
        "Barron",
        "Barry",
        "Bart",
        "Barthel",
        "Bartholomaeus",
        "Bartlett",
        "Bartram",
        "Baruch",
        "Bas",
        "Basil",
        "Bast",
        "Bastian",
        "Bastle",
        "Battist",
        "Battista",
        "Baudouin",
        "Baudric",
        "Bax",
        "Baxter",
        "Bay",
        "Bayard",
        "Baylen",
        "Bayley",
        "Beacher",
        "Beal",
        "Beale",
        "Beall",
        "Beaman",
        "Beardsley",
        "Beau",
        "Beaufort",
        "Beauregard",
        "Beauvais",
        "Bede",
        "Beldon",
        "Bell",
        "Bellamy",
        "Ben",
        "Bendix",
        "Benedict",
        "Benedikt",
        "Benediktus",
        "Bengt",
        "Beni",
        "Benito",
        "Benjamin",
        "Benjamino",
        "Bennet",
        "Bennett",
        "Benno",
        "Benny",
        "Beno",
        "Bente",
        "Bentley",
        "Beppo",
        "Berenger",
        "Bergen",
        "Bergess",
        "Berit",
        "Berkeley",
        "Berkley",
        "Bernard",
        "Bernardo",
        "Bernd",
        "Berne",
        "Bernhard",
        "Bernhardt",
        "Bernie",
        "Bernt",
        "Berny",
        "Bert",
        "Berthold",
        "Berthoud",
        "Berti",
        "Bertie",
        "Bertold",
        "Bertolt",
        "Berton",
        "Bertram",
        "Bertran",
        "Bertrand",
        "Berty",
        "Bevis",
        "Bilal",
        "Billy",
        "Bing",
        "Birch",
        "Björn",
        "Bjarne",
        "Bjorn",
        "Blade",
        "Blaine",
        "Blais",
        "Blaisdell",
        "Blaise",
        "Blaize",
        "Blake",
        "Blase",
        "Blayze",
        "Blaze",
        "Bo",
        "Bob",
        "Bobby",
        "Bobby-Jo",
        "Bodil",
        "Bodin",
        "Bodo",
        "Bogart",
        "Bogdan",
        "Bolton",
        "Bond",
        "Bonham",
        "Boniface",
        "Bonifacius",
        "Bonifatius",
        "Bonifaz",
        "Booker",
        "Boone",
        "Booth",
        "Boothe",
        "Bordan",
        "Borden",
        "Boris",
        "Borris",
        "Bosco",
        "Bosse",
        "Bosso",
        "Both",
        "Botho",
        "Boto",
        "Boyce",
        "Bozo",
        "Brad",
        "Braden",
        "Bradford",
        "Bradley",
        "Bradly",
        "Bradney",
        "Brady",
        "Bradyn",
        "Braeden",
        "Braedon",
        "Braid",
        "Braiden",
        "Bran",
        "Brand",
        "Branden",
        "Brandon",
        "Branford",
        "Brant",
        "Braulio",
        "Braxton",
        "Bray",
        "Brayan",
        "Brayden",
        "Braydon",
        "Brayton",
        "Brecht",
        "Brendan",
        "Brenden",
        "Brendon",
        "Brennan",
        "Brennen",
        "Brent",
        "Brentan",
        "Brenton",
        "Bret",
        "Brett",
        "Brewster",
        "Brian",
        "Brice",
        "Brigham",
        "Brinley",
        "Brisco",
        "Brock",
        "Brocton",
        "Brod",
        "Broderick",
        "Brodie",
        "Brody",
        "Bromley",
        "Bromwell",
        "Bromwood",
        "Bronson",
        "Bronwen",
        "Bronwyn",
        "Brook",
        "Brooks",
        "Bruce",
        "Brunelle",
        "Bruno",
        "Bryan",
        "Bryant",
        "Bryce",
        "Brycen",
        "Brys",
        "Bryson",
        "Buckley",
        "Bud",
        "Buiron",
        "Burcet",
        "Burdett",
        "Burdette",
        "Burel",
        "Burg",
        "Burgess",
        "Burghard",
        "Burkhard",
        "Burkhart",
        "Burley",
        "Burne",
        "Burns",
        "Burt",
        "Burton",
        "Buster",
        "Byrne",
        "Byron",
        "Cade",
        "Caden",
        "Cadwell",
        "Cael",
        "Caiden",
        "Cain",
        "Caio",
        "Cal",
        "Calder",
        "Caldwell",
        "Cale",
        "Caleb",
        "Calhoun",
        "Calliste",
        "Callixtus",
        "Calvert",
        "Calvin",
        "Camden",
        "Cameron",
        "Camren",
        "Camron",
        "Carden",
        "Carel",
        "Carl",
        "Carleton",
        "Carlisle",
        "Carlo",
        "Carlos",
        "Carlton",
        "Carlyle",
        "Carol",
        "Carolos",
        "Carolus",
        "Carrington",
        "Carson",
        "Carsten",
        "Carter",
        "Carvell",
        "Carver",
        "Casey",
        "Casimir",
        "Cason",
        "Caspar",
        "Castor",
        "Catcher",
        "Caulder",
        "Cayden",
        "Cearbhall",
        "Cecco",
        "Cedric",
        "Celestino",
        "Cerdic",
        "Cesar",
        "Chad",
        "Chadwick",
        "Chaim",
        "Chance",
        "Chandler",
        "Chane",
        "Chaney",
        "Chanler",
        "Channing",
        "Chapin",
        "Chapman",
        "Chappel",
        "Chappell",
        "Charles",
        "Charley",
        "Charlie",
        "Charlot",
        "Charlton",
        "Charly",
        "Chase",
        "Chaunce",
        "Chauncey",
        "Chauncy",
        "Chayne",
        "Chaz",
        "Cheney",
        "Cheval",
        "Chevalier",
        "Chevell",
        "Chevy",
        "Cheyne",
        "Chilton",
        "Chip",
        "Choncey",
        "Chrestien",
        "Chris",
        "Christian",
        "Christien",
        "Christinus",
        "Christofor",
        "Christoph",
        "Christophe",
        "Christopher",
        "Christopherus",
        "Chuck",
        "Claas",
        "Claiborne",
        "Clarence",
        "Clark",
        "Claudde",
        "Claude",
        "Claudio",
        "Claudius",
        "Claus",
        "Clay",
        "Clayton",
        "Cleavon",
        "Clemens",
        "Clement",
        "Cleopas",
        "Cleve",
        "Cleveland",
        "Cliff",
        "Clifford",
        "Clifton",
        "Clint",
        "Clinton",
        "Clive",
        "Clovis",
        "Coby",
        "Cody",
        "Cohen",
        "Colan",
        "Colbert",
        "Colbey",
        "Colborn",
        "Colby",
        "Cole",
        "Coleman",
        "Colin",
        "Coljar",
        "Collin",
        "Collins",
        "Colt",
        "Colten",
        "Colter",
        "Colton",
        "Colyn",
        "Con",
        "Conner",
        "Conni",
        "Connie",
        "Connor",
        "Conny",
        "Conor",
        "Conrad",
        "Constantin",
        "Constantinus",
        "Cooper",
        "Copper",
        "Corben",
        "Corbett",
        "Corbin",
        "Corbinian",
        "Corby",
        "Corbyn",
        "Cordalles",
        "Cordell",
        "Corey",
        "Corin",
        "Cornelio",
        "Cornelius",
        "Cort",
        "Cortez",
        "Cortland",
        "Corvin",
        "Cory",
        "Court",
        "Courtenay",
        "Courtland",
        "Courtnay",
        "Courtney",
        "Coyan",
        "Coyne",
        "Craig",
        "Crawford",
        "Creighton",
        "Cretien",
        "Cristian",
        "Cristobal",
        "Cristopher",
        "Cromwell",
        "Cruz",
        "Cullen",
        "Curcio",
        "Currier",
        "Curt",
        "Curtice",
        "Curtis",
        "Curtiss",
        "Cynric",
        "Cyrano",
        "Cyrill",
        "Cyrillus",
        "Cyrus",
        "D'Arcy",
        "D'anton",
        "D'arcy",
        "Dabbert",
        "Dace",
        "Dacey",
        "Dacian",
        "Dag",
        "Dagobert",
        "Daine",
        "Dakota",
        "Dale",
        "Dallas",
        "Dallin",
        "Dalton",
        "Damian",
        "Damiano",
        "Damien",
        "Damion",
        "Damon",
        "Dan",
        "Dandelion",
        "Dandre",
        "Dane",
        "Dangelo",
        "Daniel",
        "Danilo",
        "Danniell",
        "Danny",
        "Dante",
        "Danton",
        "Daquan",
        "Darcel",
        "Darcell",
        "Darcio",
        "Darcy",
        "Dareau",
        "Darek",
        "Darian",
        "Dariel",
        "Dariell",
        "Darien",
        "Darin",
        "Dario",
        "Darion",
        "Darius",
        "Darko",
        "Darnell",
        "Darrel",
        "Darrell",
        "Darren",
        "Darrin",
        "Darrion",
        "Darrius",
        "Darroll",
        "Darryl",
        "Darryll",
        "Dartagnan",
        "Darvell",
        "Darwin",
        "Darwyn",
        "Daryl",
        "Daryll",
        "Dash",
        "Dashawn",
        "Dashiell",
        "Dave",
        "Davet",
        "David",
        "Davin",
        "Davion",
        "Davis",
        "Davon",
        "Davy",
        "Dawson",
        "Dax",
        "Dayadi",
        "Dayne",
        "Dayton",
        "Dean",
        "Dean Deandre",
        "Deangelo",
        "Declan",
        "Dedrick",
        "Del",
        "Delaine",
        "Delancy",
        "Delane",
        "Delaney",
        "Delano",
        "Delmar",
        "Delmer",
        "Delmont",
        "Delmore",
        "Delray",
        "Delrick",
        "Delrico",
        "Delron",
        "Delroy",
        "Demarcus",
        "Demetrius",
        "Dempster",
        "Denis",
        "Deniz",
        "Dennet",
        "Dennis",
        "Denton",
        "Denver",
        "Denys",
        "Denzel",
        "Deon",
        "Deonte",
        "Derck",
        "Dereck",
        "Derek",
        "Derell",
        "Derick",
        "Derik",
        "Derk",
        "Derrall",
        "Derrek",
        "Derrell",
        "Derrick",
        "Derrik",
        "Derrill",
        "Derry",
        "Derwood",
        "Deryck",
        "Deryk",
        "Deshaun",
        "Deshawn",
        "Desmond",
        "Desmund",
        "Destan",
        "Destin",
        "Deston",
        "Destrey",
        "Destrie",
        "Destry",
        "Detlef",
        "Detlev",
        "Devan",
        "Devante",
        "Deven",
        "Deveral",
        "Devere",
        "Devereau",
        "Devereaux",
        "Deverel",
        "Deverell",
        "Deverick",
        "Devery",
        "Devin",
        "Devon",
        "Devonte",
        "Devry",
        "Devyn",
        "Dexter",
        "Diandre",
        "Dicken",
        "Dickens",
        "Dickenson",
        "Dickinson",
        "Didier",
        "Diederich",
        "Diedrich",
        "Diego",
        "Dieter",
        "Diether",
        "Dietmar",
        "Dietrich",
        "Digby",
        "Dilan",
        "Dillan",
        "Dillen",
        "Dillon",
        "Dimitri",
        "Dimitrij",
        "Dion",
        "Diondre",
        "Dionte",
        "Dirk",
        "Ditmar",
        "Dittmar",
        "Dix",
        "Dixie",
        "Dixon",
        "Dob",
        "Dobbs",
        "Dolf",
        "Dolph",
        "Domenic",
        "Domenico",
        "Domian",
        "Domingo",
        "Dominic",
        "Dominick",
        "Dominik",
        "Dominikus",
        "Dominique",
        "Don",
        "Donald",
        "Donat",
        "Donatello",
        "Donatien",
        "Donato",
        "Donatus",
        "Donavan",
        "Dondre",
        "Donny",
        "Donovan",
        "Dontae",
        "Donte",
        "Dorian",
        "Dorkas",
        "Dorset",
        "Dorsey",
        "Douglas",
        "Dover",
        "Doyle",
        "Doyt",
        "Dragan",
        "Drago",
        "Drake",
        "Draven",
        "Drew",
        "Dru",
        "Duane",
        "Dudley",
        "Dudly",
        "Dumont",
        "Duncan",
        "Dunstan",
        "Duran",
        "Durand",
        "Durango",
        "Durant",
        "Durante",
        "Dureau",
        "Duron",
        "Durrant",
        "Durwald",
        "Durward",
        "Durwin",
        "Durwood",
        "Dustin",
        "Duston",
        "Dusty",
        "Dustyn",
        "Duval",
        "Dwayne",
        "Dwenn",
        "Dwennon",
        "Dwight",
        "Dwighte",
        "Dwite",
        "Dwyght",
        "Dwyghte",
        "Dwyte",
        "Dylan",
        "Dylon",
        "Ean",
        "Earl",
        "Easton",
        "Eaton",
        "Ebbo",
        "Eberhard",
        "Eckart",
        "Eckbert",
        "Eckehart",
        "Ed",
        "Eddie",
        "Eddy",
        "Ede",
        "Edel",
        "Edelhart",
        "Edgar",
        "Edgard",
        "Edgardo",
        "Edmar",
        "Edmon",
        "Edmond",
        "Edmund",
        "Edmundo",
        "Edo",
        "Edsel",
        "Eduard",
        "Eduardo",
        "Edvard",
        "Edward",
        "Edwardo",
        "Edwards",
        "Edwardson",
        "Edwin",
        "Efraim",
        "Efrain",
        "Efrem",
        "Efren",
        "Egan",
        "Egbert",
        "Egbrecht",
        "Egerton",
        "Egidius",
        "Egnatius",
        "Egon",
        "Ehrhard",
        "Eicren",
        "Eike",
        "Ekbrecht",
        "Elbert",
        "Elbridge",
        "Elden",
        "Elder",
        "Eldon",
        "Eldridge",
        "Eleasar",
        "Eleazar",
        "Elery",
        "Elfred",
        "Eli",
        "Elia",
        "Elian",
        "Elias",
        "Eliezer",
        "Elija",
        "Elijah",
        "Eliot",
        "Eliott",
        "Eliseo",
        "Elisha",
        "Ellerey",
        "Ellery",
        "Elliot",
        "Elliott",
        "Ellis",
        "Elman",
        "Elmar",
        "Elmer",
        "Elmo",
        "Elmore",
        "Elon",
        "Eloy",
        "Elric",
        "Elroy",
        "Elten",
        "Elton",
        "Elvin",
        "Elvis",
        "Emanuel",
        "Emersen",
        "Emerson",
        "Emery",
        "Emil",
        "Emile",
        "Emiliano",
        "Emilio",
        "Emlyn",
        "Emmanuel",
        "Emmerich",
        "Emmerson",
        "Emmery",
        "Emmett",
        "Emmyrson",
        "Emory",
        "Emyrson",
        "Endrik",
        "Enes",
        "Engelbert",
        "Engelbrecht",
        "Englebert",
        "Ennio",
        "Enno",
        "Enrico",
        "Enrique",
        "Enzio",
        "Ephraim",
        "Eppie",
        "Eppo",
        "Erhard",
        "Eric",
        "Erich",
        "Erick",
        "Erik",
        "Eriq",
        "Ermin",
        "Ernest",
        "Ernesto",
        "Ernst",
        "Errol",
        "Erskine",
        "Erwin",
        "Esau",
        "Escott",
        "Esmond",
        "Esmund",
        "Esra",
        "Esteban",
        "Estevan",
        "Ethan",
        "Ethelbert",
        "Ethelred",
        "Ethen",
        "Etienne",
        "Eufemio",
        "Eugen",
        "Eugene",
        "Euphemius",
        "Evan",
        "Everett",
        "Ewald",
        "Ewart",
        "Ewing",
        "Eyvind",
        "Ezechiel",
        "Ezekiel",
        "Ezequiel",
        "Ezra",
        "Fabian",
        "Fabiano",
        "Fabianus",
        "Fabien",
        "Fabio",
        "Fabius",
        "Fairfax",
        "Fairleigh",
        "Fairley",
        "Falk",
        "Falko",
        "Farald",
        "Faralt",
        "Faramond",
        "Farand",
        "Farant",
        "Farland",
        "Farley",
        "Farly",
        "Farold",
        "Farolt",
        "Farrand",
        "Farrell",
        "Faruk",
        "Faust",
        "Faustino",
        "Faustinus",
        "Fausto",
        "Faustus",
        "Federico",
        "Federigo",
        "Fedor",
        "Felipe",
        "Felix",
        "Felizian",
        "Ferd",
        "Ferdel",
        "Ferdi",
        "Ferdie",
        "Ferdinand",
        "Ferdinando",
        "Ferdy",
        "Fernand",
        "Fernando",
        "Ferrand",
        "Fester",
        "Fidel",
        "Fidelio",
        "Fidelis",
        "Fidelius",
        "Fielding",
        "Fiete",
        "Filip",
        "Filippo",
        "Filiz",
        "Finn",
        "Fitz",
        "Fleming",
        "Flemming",
        "Fletcher",
        "Florens",
        "Florentin",
        "Florentinus",
        "Florentus",
        "Florenz",
        "Florestan",
        "Flori",
        "Florian",
        "Florianus",
        "Floridus",
        "Florin",
        "Floris",
        "Florus",
        "Floyd",
        "Flurin",
        "Folker",
        "Folkher",
        "Folkmar",
        "Fontaine",
        "Fontane",
        "Fontayne",
        "Fonteyne",
        "Forbes",
        "Ford",
        "Forrest",
        "Fortun",
        "Fortune",
        "Francesco",
        "Francis",
        "Francisco",
        "Franciscus",
        "Francois",
        "Franek",
        "Frank",
        "Franke",
        "Frankie",
        "Franklin",
        "Franko",
        "Franky",
        "Frantisek",
        "Franz",
        "Franziskus",
        "Fred",
        "Freddie",
        "Freddy",
        "Frederic",
        "Frederick",
        "Fredi",
        "Fredrick",
        "Free",
        "Freidhelm",
        "Freman",
        "Fremont",
        "Fridericus",
        "Fridolin",
        "Friedel",
        "Frieder",
        "Friedl",
        "Friedrich",
        "Frithjof",
        "Fritjof",
        "Fritz",
        "Fulbert",
        "Fulbright",
        "Fuller",
        "Fulton",
        "Fynn",
        "Görkem",
        "Günter",
        "Günther",
        "Gabor",
        "Gabriel",
        "Gabriele",
        "Gabriello",
        "Gabrio",
        "Gace",
        "Gael",
        "Gaetan",
        "Gage",
        "Gaige",
        "Gaillard",
        "Gall",
        "Galli",
        "Gallo",
        "Gallus",
        "Gannon",
        "Garan",
        "Gard",
        "Gardiner",
        "Garen",
        "Garett",
        "Garfield",
        "Garin",
        "Garion",
        "Garlan",
        "Garland",
        "Garlen",
        "Garlyn",
        "Garnell",
        "Garner",
        "Garnet",
        "Garnier",
        "Garon",
        "Garren",
        "Garret",
        "Garrett",
        "Garrick",
        "Garrin",
        "Garrison",
        "Garron",
        "Garryson",
        "Garvin",
        "Gary",
        "Garyson",
        "Gascon",
        "Gaspar",
        "Gaspard",
        "Gaston",
        "Gauthier",
        "Gautier",
        "Gaven",
        "Gavin",
        "Gavyn",
        "Gaylord",
        "Gebbo",
        "Gebert",
        "Gebhard",
        "Gedeon",
        "Geffrey",
        "Gehrt",
        "Geof",
        "Geoff",
        "Geoffrey",
        "Georg",
        "George",
        "Georgio",
        "Geppert",
        "Ger",
        "Gerald",
        "Gerard",
        "Gerardo",
        "Gerd",
        "Gere",
        "Gereon",
        "Gerfried",
        "Gerhard",
        "Gerhardt",
        "Gerhart",
        "Gerion",
        "Germain",
        "German",
        "Germano",
        "Gero",
        "Gerold",
        "Gerome",
        "Geron",
        "Geronimo",
        "Gerrald",
        "Gerrard",
        "Gerrell",
        "Gerrit",
        "Gerry",
        "Gert",
        "Gervais",
        "Gervase",
        "Gerwald",
        "Gerwin",
        "Giacomo",
        "Gian",
        "Gian-Franco",
        "Gian-Luca",
        "Gian-Marco",
        "Giancarlo",
        "Gianni",
        "Gideon",
        "Gidi",
        "Gidion",
        "Gieselherr",
        "Giffard",
        "Gifferd",
        "Gifford",
        "Gil",
        "Gilbert",
        "Gilberto",
        "Gilford",
        "Gill",
        "Gilleasbuig",
        "Gilles",
        "Gillian",
        "Gino",
        "Giovanni",
        "Giovanny",
        "Gironimo",
        "Giso",
        "Giuliano",
        "Giulio",
        "Giuseppe",
        "Glen",
        "Glenn",
        "Godard",
        "Godart",
        "Goddard",
        "Goddart",
        "Godfrey",
        "Goeran",
        "Goldman",
        "Goliat",
        "Goliath",
        "Gonzalo",
        "Goran",
        "Gordon",
        "Gorius",
        "Goswin",
        "Gotbert",
        "Gotfrid",
        "Gottfried",
        "Gotthard",
        "Gotthold",
        "Gottlieb",
        "Gower",
        "Graciano",
        "Grady",
        "Graeme",
        "Graham",
        "Granger",
        "Grant",
        "Granville",
        "Gratian",
        "Gratianus",
        "Gray",
        "Grayson",
        "Graziano",
        "Gregor",
        "Gregorio",
        "Gregory",
        "Grenville",
        "Greyson",
        "Griffin",
        "Grigor",
        "Grimbald",
        "Grischa",
        "Griswold",
        "Grosvenor",
        "Guadalupe",
        "Gualtiero",
        "Guarniero",
        "Guido",
        "Guifford",
        "Guillaume",
        "Guillermo",
        "Gunar",
        "Gunnar",
        "Gunner",
        "Guntar",
        "Gunter",
        "Gunthar",
        "Gunther",
        "Guntram",
        "Gustaf",
        "Gustav",
        "Gustave",
        "Gustavo",
        "Gustl",
        "Guy",
        "Hacket",
        "Hackett",
        "Hadden",
        "Haden",
        "Hadley",
        "Hadrian",
        "Hadrianus",
        "Hagen",
        "Hagley",
        "Haiko",
        "Haimo",
        "Haines",
        "Haio",
        "Hajo",
        "Hakan",
        "Hakon",
        "Halbert",
        "Haley",
        "Hall",
        "Hallam",
        "Halsey",
        "Halton",
        "Hamelin",
        "Hamelyn",
        "Hamilton",
        "Hamlet",
        "Hamlin",
        "Hamlyn",
        "Hamza",
        "Hanibal",
        "Hannecke",
        "Hannes",
        "Hannibal",
        "Hanniel",
        "Hanno",
        "Hans",
        "Hans-Jorg",
        "Hans-Peter",
        "Hans-carl",
        "Hansi",
        "Harald",
        "Harbert",
        "Harbin",
        "Harcourt",
        "Harden",
        "Hardey",
        "Hardi",
        "Hardie",
        "Hardmod",
        "Hardouin",
        "Hardy",
        "Harlan",
        "Harland",
        "Harley",
        "Harlon",
        "Harm",
        "Harman",
        "Harmen",
        "Harmon",
        "Harold",
        "Harper",
        "Harri",
        "Harrison",
        "Harry",
        "Hartmod",
        "Hartmut",
        "Harv",
        "Harvey",
        "Hasan",
        "Hasko",
        "Hassan",
        "Hastings",
        "Hauke",
        "Havel",
        "Hawel",
        "Hawk",
        "Hawthorne",
        "Hayden",
        "Haydon",
        "Hayes",
        "Hayo",
        "Haywood",
        "Heath",
        "Hector",
        "Hedley",
        "Heiko",
        "Heimo",
        "Hein",
        "Heiner",
        "Heini",
        "Heino",
        "Heinrich",
        "Heinz",
        "Heio",
        "Hektor",
        "Helge",
        "Helgo",
        "Helias",
        "Helke",
        "Hellmut",
        "Hellmuth",
        "Helmi",
        "Helmo",
        "Helmut",
        "Helmuth",
        "Hendrick",
        "Hendrik",
        "Henley",
        "Henning",
        "Henno",
        "Henri",
        "Henrick",
        "Henricus",
        "Henrik",
        "Henry",
        "Herbert",
        "Heribert",
        "Heriberto",
        "Herman",
        "Hermann",
        "Hernando",
        "Herrick",
        "Herrmann",
        "Herve",
        "Herwin",
        "Hesekiel",
        "Hewett",
        "Heymo",
        "Hias",
        "Hieronymus",
        "Hildebrand",
        "Hilliard",
        "Hillier",
        "Hillyer",
        "Hilton",
        "Hinnerk",
        "Hinz",
        "Hippokrates",
        "Hobart",
        "Holden",
        "Holdger",
        "Holge",
        "Holger",
        "Hollis",
        "Holm",
        "Horst",
        "Horton",
        "Houston",
        "Howard",
        "Howe",
        "Hubert",
        "Hubertus",
        "Hudson",
        "Huey",
        "Hugbert",
        "Hugh",
        "Hugo",
        "Hulbard",
        "Hulbert",
        "Hulburd",
        "Hulh",
        "Hulk",
        "Humbert",
        "Humberto",
        "Humbie",
        "Humfrey",
        "Humfry",
        "Humph",
        "Humphrey",
        "Hunt",
        "Hunter",
        "Huntley",
        "Huprecht",
        "Hurlbart",
        "Hurlbert",
        "Hurn",
        "Hutton",
        "Hyatt",
        "Ian",
        "Ibrahim",
        "Ignace",
        "Ignacio",
        "Ignatius",
        "Ignatz",
        "Ignaz",
        "Ignazio",
        "Igor",
        "Ildiko",
        "Ilja",
        "Immanuel",
        "Immo",
        "Inglebert",
        "Ingmar",
        "Ingo",
        "Ingomar",
        "Ingraham",
        "Ingram",
        "Ingwar",
        "Innocentius",
        "Innozenz",
        "Iram",
        "Irvin",
        "Irving",
        "Irwin",
        "Isaac",
        "Isaak",
        "Isai",
        "Isaiah",
        "Isaias",
        "Ischell",
        "Isiah",
        "Isidor",
        "Isidorius",
        "Ismael",
        "Ismail",
        "Israel",
        "Isreal",
        "Issac",
        "Ivan",
        "Iven",
        "Ives",
        "Ivo",
        "Iwan",
        "Izaiah",
        "Jörg",
        "Jörn",
        "Jürgen",
        "Jabari",
        "Jace",
        "Jack",
        "Jackson",
        "Jacky",
        "Jacob",
        "Jacobus",
        "Jacoby",
        "Jacque",
        "Jacquelin",
        "Jacques",
        "Jaden",
        "Jadon",
        "Jadyn",
        "Jaeden",
        "Jagger",
        "Jaheem",
        "Jaheim",
        "Jahiem",
        "Jahn",
        "Jaiden",
        "Jaime",
        "Jair",
        "Jairo",
        "Jake",
        "Jakie",
        "Jakob",
        "Jakobe",
        "Jakobus",
        "Jalen",
        "Jamal",
        "Jamar",
        "Jamari",
        "Jamel",
        "James",
        "Jameson",
        "Jamie",
        "Jamil",
        "Jamir",
        "Jamison",
        "Jan",
        "Jan-Martin",
        "Janek",
        "Janko",
        "Jannes",
        "Jannik",
        "Jannis",
        "Janosch",
        "Janus",
        "Janusz",
        "Jaquan",
        "Jaquez",
        "Jared",
        "Jaren",
        "Jarman",
        "Jaro",
        "Jarod",
        "Jaromil",
        "Jaromir",
        "Jaron",
        "Jarred",
        "Jarrett",
        "Jarrod",
        "Jarv",
        "Jarvey",
        "Jarvis",
        "Jascha",
        "Jase",
        "Jasmin",
        "Jason",
        "Jasper",
        "Javen",
        "Javier",
        "Javion",
        "Javon",
        "Jaxon",
        "Jaxson",
        "Jaxson  Jay",
        "Jay",
        "Jayce",
        "Jayden",
        "Jaydon",
        "Jaye",
        "Jaylan",
        "Jaylen",
        "Jaylin",
        "Jaylon",
        "Jayson",
        "Jean",
        "Jean Baptiste",
        "Jean-Baptiste",
        "Jean-Carlo",
        "Jean-Christophe",
        "Jean-Claude",
        "Jean-Luca",
        "Jean-Marie",
        "Jean-Pierre",
        "Jeff",
        "Jeffers",
        "Jefferson",
        "Jeffery",
        "Jeffrey",
        "Jefrem",
        "Jehudi",
        "Jendrich",
        "Jendrick",
        "Jendrik",
        "Jenik",
        "Jens",
        "Jeoffroi",
        "Jerard",
        "Jeremia",
        "Jeremiah",
        "Jeremias",
        "Jeremy",
        "Jerker",
        "Jermaine",
        "Jeroen",
        "Jeroma",
        "Jerome",
        "Jeronimus",
        "Jerrit",
        "Jerrold",
        "Jerry",
        "Jervis",
        "Jesaja",
        "Jesajas",
        "Jesekiel",
        "Jesper",
        "Jesse",
        "Jessie",
        "Jesus",
        "Jett",
        "Jevon",
        "Jim",
        "Jimmy",
        "Jo",
        "Joachim",
        "Joan",
        "Joaquin",
        "Jobst",
        "Jochen",
        "Jochim",
        "Joe",
        "Joel",
        "Joey",
        "Johan",
        "Johann",
        "Johannes",
        "John",
        "John-paul",
        "Johnathan",
        "Johnathon",
        "Johnn",
        "Johnnie",
        "Johnny",
        "Johnson",
        "Jolie",
        "Jon",
        "Jona",
        "Jonah",
        "Jonas",
        "Jonatan",
        "Jonathan",
        "Jonathon",
        "Jonko",
        "Jonn",
        "Jonnie",
        "Jordan",
        "Jorden",
        "Jordis",
        "Jordon",
        "Jordy",
        "Jorg",
        "Jorge",
        "Joris",
        "Jose",
        "Josef",
        "Joseph",
        "Josh",
        "Joshua",
        "Josiah",
        "Josias",
        "Jost",
        "Josua",
        "Josue",
        "Jourdan",
        "Jovan",
        "Jovani",
        "Jovany",
        "Joy",
        "Joyanna",
        "Juan",
        "Juanito",
        "Judah",
        "Jude",
        "Juhani",
        "Jul",
        "Jules",
        "Julian",
        "Julianus",
        "Julien",
        "Julio",
        "Julius",
        "Jullien",
        "Junior",
        "Juniper",
        "Jupp",
        "Jurgen",
        "Juri",
        "Jussuf",
        "Justice",
        "Justin",
        "Justinian",
        "Justinianus",
        "Justinus",
        "Justus",
        "Justyn",
        "Kaarle",
        "Kaarlo",
        "Kade",
        "Kaden",
        "Kadin",
        "Kadir",
        "Kai",
        "Kai-Olaf",
        "Kai-Uwe",
        "Kaiden",
        "Kain",
        "Kale",
        "Kaleb",
        "Kalle",
        "Kallist",
        "Kallistus",
        "Kallixtus",
        "Kalman",
        "Kameron",
        "Kamil",
        "Kampion",
        "Kamron",
        "Kane",
        "Kareem",
        "Karel",
        "Kari",
        "Karim",
        "Karl",
        "Karl-Heinz",
        "Karlens",
        "Karlheinz",
        "Karlis",
        "Karlitis",
        "Karol",
        "Karoly",
        "Karson",
        "Karstan",
        "Karsten",
        "Kasey",
        "Kasimir",
        "Kaspar",
        "Kasper",
        "Kastor",
        "Kay",
        "Kayden",
        "Keagan",
        "Keanu",
        "Keaton",
        "Keegan",
        "Keenan",
        "Kegan",
        "Kei",
        "Keith",
        "Kelby",
        "Kellen",
        "Kelly",
        "Kelsey",
        "Kelton",
        "Kelvin",
        "Kemal",
        "Ken",
        "Kendall",
        "Kendrick",
        "Kenelm",
        "Kenley",
        "Kennedy",
        "Kenneth",
        "Kenny",
        "Keno",
        "Kent",
        "Kenton",
        "Kenyon",
        "Keon",
        "Kerman",
        "Keshawn",
        "Kester",
        "Keven",
        "Kevin",
        "Kevon",
        "Keyon",
        "Keyshawn",
        "Khalid",
        "Khalil",
        "Kian",
        "Kieran",
        "Kilby",
        "Kilian",
        "Killian",
        "Kim",
        "Kimberley",
        "Kimon",
        "King",
        "Kingsley",
        "Kinnard",
        "Kinnell",
        "Kinsey",
        "Kipp",
        "Kipper",
        "Kippy",
        "Kirk",
        "Kjell",
        "Klaas",
        "Klaudius",
        "Klaus",
        "Klemens",
        "Klement",
        "Kleopas",
        "Kleophas",
        "Klopas",
        "Knox",
        "Knut",
        "Kobe",
        "Koby",
        "Kody",
        "Kolas",
        "Kolby",
        "Kole",
        "Kolja",
        "Kolton",
        "Konrad",
        "Konradin",
        "Konstantin",
        "Korbin",
        "Korbinian",
        "Korey",
        "Kornel",
        "Kornelius",
        "Kort",
        "Kory",
        "Kosha",
        "Kosta",
        "Kostis",
        "Kostja",
        "Kourosh",
        "Kristian",
        "Kristofer",
        "Kristopher",
        "Kunibert",
        "Kuno",
        "Kunz",
        "Kurt",
        "Kurtis",
        "Kylan",
        "Kyle",
        "Kyler",
        "Kyree",
        "Kyrill",
        "Kyrillus",
        "L'Angley",
        "Ladislaus",
        "Lafayette",
        "Lajos",
        "Lamar",
        "Lamarr",
        "Lambert",
        "Lambrecht",
        "Lamont",
        "Lampert",
        "Lamprecht",
        "Lance",
        "Lancelin",
        "Lancelot",
        "Landan",
        "Landen",
        "Landers",
        "Landis",
        "Lando",
        "Landon",
        "Lane",
        "Lang",
        "Langley",
        "Laramie",
        "Larry",
        "Lars",
        "Larue",
        "Lasalle",
        "Laslo",
        "Lasse",
        "Laszlo",
        "Latimer",
        "Latrell",
        "Launcelot",
        "Laurence",
        "Laurent",
        "Laurentius",
        "Laurenz",
        "Laux",
        "Lawrence",
        "Lawson",
        "Layne",
        "Layton",
        "Lazarus",
        "Leal",
        "Leander",
        "Leandre",
        "Leandro",
        "Lee",
        "Leeroy",
        "Legget",
        "Legolas",
        "Leies",
        "Leif",
        "Leigh",
        "Leland",
        "Lenard",
        "Lennard",
        "Lennart",
        "Leo",
        "Leocadie",
        "Leodegrance",
        "Leon",
        "Leonard",
        "Leonardo",
        "Leonce",
        "Leone",
        "Leonel",
        "Leonhard",
        "Leonid",
        "Leonore",
        "Leopold",
        "Leroi",
        "Leron",
        "Leroux",
        "Leroy",
        "Lester",
        "Leszek",
        "Leva",
        "Leveret",
        "Leverett",
        "Levi",
        "Levin",
        "Lewis",
        "Lex",
        "Liam",
        "Libold",
        "Liborius",
        "Lincoln",
        "Lind",
        "Lindberg",
        "Linden",
        "Lindon",
        "Linn",
        "Lino",
        "Linus",
        "Linwood",
        "Lion",
        "Lionel",
        "Lionell",
        "Lionello",
        "Lisandro",
        "Lisle",
        "Litton",
        "Livio",
        "Llewellyn",
        "Logan",
        "Loisl",
        "London",
        "Lonell",
        "Lonnell",
        "Lonnie",
        "Loreno",
        "Lorenz",
        "Lorenzo",
        "Loring",
        "Loris",
        "Lothair",
        "Lothar",
        "Louie",
        "Louis",
        "Louvel",
        "Lovell",
        "Lowe",
        "Lowell",
        "Loyal",
        "Luc",
        "Luca",
        "Lucas",
        "Lucian",
        "Luciano",
        "Lucien",
        "Ludolf",
        "Ludovic",
        "Ludovico",
        "Ludovicus",
        "Ludwig",
        "Luglio",
        "Luigi",
        "Luis",
        "Luitpold",
        "Luka",
        "Lukas",
        "Luke",
        "Luther",
        "Lutz",
        "Lyle",
        "Lyndon",
        "Lyonel",
        "Lyre",
        "Lysander",
        "Lytton",
        "Mace",
        "Madelon",
        "Madison",
        "Maginhart",
        "Magnus",
        "Mahieu",
        "Maik",
        "Mailhairer",
        "Maitland",
        "Makepeace",
        "Malachi",
        "Malakai",
        "Malcolm",
        "Malik",
        "Malin",
        "Malleville",
        "Mallory",
        "Malou",
        "Malte",
        "Malvin",
        "Malwin",
        "Mandel",
        "Manfred",
        "Mani",
        "Manilo",
        "Manley",
        "Manly",
        "Manneville",
        "Manning",
        "Manolito",
        "Manolo",
        "Mansfield",
        "Mantel",
        "Manton",
        "Manuel",
        "Manville",
        "Many",
        "Marc",
        "Marceau",
        "Marcel",
        "Marcellinus",
        "Marcello",
        "Marcellus",
        "Marcelo",
        "Marco",
        "Marcos",
        "Marcus",
        "Marden",
        "Mardyth",
        "Marek",
        "Marenus",
        "Marian",
        "Mariano",
        "Marin",
        "Marino",
        "Marinus",
        "Mario",
        "Mariolino",
        "Marius",
        "Mark",
        "Markes",
        "Markey",
        "Marko",
        "Markus",
        "Marland",
        "Marley",
        "Marlo",
        "Marlon",
        "Marlow",
        "Marlowe",
        "Marmion",
        "Marq",
        "Marque",
        "Marquez",
        "Marquis",
        "Marquise",
        "Marsden",
        "Marsdon",
        "Marsh",
        "Marshal",
        "Marshall",
        "Marston",
        "Mart",
        "Marten",
        "Marti",
        "Martin",
        "Martino",
        "Maruck",
        "Marvin",
        "Marwin",
        "Marwood",
        "Marzellus",
        "Maslin",
        "Mason",
        "Masselin",
        "Masson",
        "Mateo",
        "Mather",
        "Mathew",
        "Mathias",
        "Mathieu",
        "Mats",
        "Matteo",
        "Mattes",
        "Matthew",
        "Matthias",
        "Matthieu",
        "Mattias",
        "Matty",
        "Matze",
        "Maurice",
        "Mauricio",
        "Mauritius",
        "Maurizio",
        "Maurus",
        "Maverick",
        "Max",
        "Maxence",
        "Maxim",
        "Maxime",
        "Maximilian",
        "Maximillian",
        "Maximo",
        "Maximus",
        "Maxwell",
        "Mayhew",
        "Maynard",
        "Mayne",
        "Maynor",
        "Mead",
        "Medwin",
        "Mees",
        "Mehmet",
        "Meinert",
        "Meinhard",
        "Mekhi",
        "Melchior",
        "Melton",
        "Melville",
        "Melvin",
        "Menachem",
        "Menard",
        "Mercer",
        "Merla",
        "Merle",
        "Merlin",
        "Merlion",
        "Merrell",
        "Merrick",
        "Merrill",
        "Mertin",
        "Merwin",
        "Meus",
        "Micah",
        "Michael",
        "Michail",
        "Micheal",
        "Michel",
        "Michele",
        "Mick",
        "Miguel",
        "Mika",
        "Mike",
        "Mikel",
        "Milan",
        "Miles",
        "Milko",
        "Millard",
        "Miller",
        "Mills",
        "Millson",
        "Milo",
        "Milt",
        "Milten",
        "Milto",
        "Milton",
        "Milty",
        "Mino",
        "Miquel",
        "Mircha",
        "Mirek",
        "Mirko",
        "Misael",
        "Miso",
        "Mitchel",
        "Mitchell",
        "Mohamed",
        "Mohammad",
        "Mohammed",
        "Moises",
        "Momo",
        "Mont-Gomerie",
        "Montague",
        "Montaigu",
        "Montaine",
        "Montgomery",
        "Moor",
        "Moore",
        "More",
        "Morell",
        "Moreno",
        "Morgan",
        "Moritz",
        "Moriz",
        "Morris",
        "Morven",
        "Moses",
        "Moshe",
        "Muck",
        "Muhammad",
        "Mustafa",
        "Mutz",
        "Myles",
        "Nann",
        "Napoleon",
        "Nash",
        "Nasir",
        "Natan",
        "Nathan",
        "Nathanael",
        "Nathanial",
        "Nathaniel",
        "Nathen",
        "Navid",
        "Nayan",
        "Neal",
        "Nealson",
        "Ned",
        "Neddie",
        "Neddy",
        "Nedes",
        "Nehemiah",
        "Neil",
        "Neilson",
        "Neivin",
        "Nelles",
        "Nellie",
        "Nelly",
        "Nelson",
        "Neo",
        "Nepomuk",
        "Nero",
        "Nestor",
        "Neuman",
        "Neumann",
        "Neuveville",
        "Neville",
        "Newall",
        "Newbold",
        "Newell",
        "Newgate",
        "Newland",
        "Newlin",
        "Newman",
        "Newmie",
        "Newton",
        "Nicandro",
        "Nichol",
        "Nicholas",
        "Nick",
        "Nickolas",
        "Nico",
        "Nicodemo",
        "Nicolai",
        "Nicolas",
        "Nicolaus",
        "Niels",
        "Nigel",
        "Nikhil",
        "Nikita",
        "Niklas",
        "Niko",
        "Nikodemus",
        "Nikol",
        "Nikolas",
        "Nikolaus",
        "Nils",
        "Nilson",
        "Nimet",
        "Nino",
        "Noa",
        "Noah",
        "Noe",
        "Noel",
        "Noel  Nolan",
        "Noell",
        "Nolan",
        "Norbert",
        "Noreis",
        "Norice",
        "Norm",
        "Normal",
        "Norman",
        "Normand",
        "Normen",
        "Normie",
        "Norris",
        "North",
        "Norton",
        "Norville",
        "Norvin",
        "Norward",
        "Norwell",
        "Norwin",
        "Norwood",
        "Norwyn",
        "Nouel",
        "Nowles",
        "Numen",
        "Nuran",
        "Nyle",
        "ONille",
        "Oakley",
        "Obert",
        "Octave",
        "Octavio",
        "Odell",
        "Oden",
        "Odin",
        "Odo",
        "Odolf",
        "Odysseus",
        "Ogden",
        "Olaf",
        "Ole",
        "Oleg",
        "Oli",
        "Olin",
        "Oliver",
        "Olivier",
        "Omar",
        "Omari",
        "Omarion",
        "Onfroi",
        "Onnan",
        "Onno",
        "Onnond",
        "Oralndo",
        "Orazio",
        "Orion",
        "Orlan",
        "Orlando",
        "Orman",
        "Ormen",
        "Ornand",
        "Orson",
        "Orvelle",
        "Orvil",
        "Orville",
        "Osbaldo",
        "Osbert",
        "Osborn",
        "Osborne",
        "Oscar",
        "Osgood",
        "Oskar",
        "Osmar",
        "Osmond",
        "Ossie",
        "Osvaldo",
        "Oswald",
        "Oswaldo",
        "Oswall",
        "Oswell",
        "Oswin",
        "Otger",
        "Othello",
        "Othmar",
        "Otmar",
        "Otmund",
        "Otto",
        "Otwin",
        "Ourson",
        "Ove",
        "Owe",
        "Owen",
        "Oxford",
        "Oxon",
        "Oxton",
        "Ozzie",
        "Paavo",
        "Pablo",
        "Pacey",
        "Packard",
        "Paco",
        "Padgett",
        "Page",
        "Paget",
        "Paien",
        "Paige",
        "Palmer",
        "Palmiro",
        "Pancratius",
        "Pankratz",
        "Paolo",
        "Parfait",
        "Paris",
        "Park",
        "Parke",
        "Parker",
        "Parkley",
        "Parks",
        "Parr",
        "Parry",
        "Pascal",
        "Pascual",
        "Pasquale",
        "Pat",
        "Paton",
        "Patric",
        "Patrick",
        "Patten",
        "Pattin",
        "Patton",
        "Paul",
        "Paule",
        "Paulus",
        "Pawel",
        "Paxon",
        "Paxton",
        "Payton",
        "Pearson",
        "Pedro",
        "Peer",
        "Pelham",
        "Pell",
        "Pelton",
        "Penley",
        "Penn",
        "Penrod",
        "Pepi",
        "Pepin",
        "Pepino",
        "Pepperell",
        "Peppi",
        "Peppin",
        "Per",
        "Perceval",
        "Percival",
        "Percy",
        "Perren",
        "Perrin",
        "Perry",
        "Perryn",
        "Peter",
        "Petrus",
        "Peverell",
        "Peyton",
        "Pharamond",
        "Phil",
        "Philip",
        "Philipp",
        "Philippe",
        "Phillip",
        "Phillipe",
        "Phoenix",
        "Pierce",
        "Piero",
        "Pierpont",
        "Pierre",
        "Pierrepont",
        "Piers",
        "Pierson",
        "Pietro",
        "Pio",
        "Piperel",
        "Pippin",
        "Piret",
        "Pirmin",
        "Pit",
        "Pius",
        "Plat",
        "Platt",
        "Pollard",
        "Pomeroy",
        "Pommelraie",
        "Porter",
        "Porteur",
        "Portier",
        "Pranav",
        "Preruet",
        "Prescott",
        "Presley",
        "Preston",
        "Prewitt",
        "Priest",
        "Priestley",
        "Priestly",
        "Prince",
        "Priour",
        "Prisko",
        "Pruet",
        "Pruie",
        "Pruitt",
        "Pryor",
        "Putnam",
        "Putney",
        "Quennel",
        "Quent",
        "Quentin",
        "Quenton",
        "Quentrell",
        "Quincey",
        "Quincy",
        "Quinn",
        "Quint",
        "Quinten",
        "Quintin",
        "Quintinus",
        "Quinton",
        "Quintrell",
        "Quintus",
        "Quinzi",
        "Quirin",
        "Quirinus",
        "Régis",
        "Rab",
        "Rabbit",
        "Rad",
        "Radbert",
        "Radcliff",
        "Radcliffe",
        "Radclyf",
        "Radclyffe",
        "Radford",
        "Radley",
        "Radnor",
        "Radomil",
        "Rae",
        "Rafael",
        "Raff",
        "Raffael",
        "Raffaello",
        "Raffi",
        "Raghnall",
        "Rahul",
        "Rai",
        "Raik",
        "Raimond",
        "Raimondo",
        "Raimund",
        "Raimundo",
        "Rainald",
        "Rainer",
        "Rainger",
        "Rainier",
        "Raleigh",
        "Ralf",
        "Ralph",
        "Ralston",
        "Rambert",
        "Ramiro",
        "Ramon",
        "Ramond",
        "Ramsay",
        "Ramses",
        "Ramsey",
        "Ramzey",
        "Ramzi",
        "Randall",
        "Randy",
        "Ranger",
        "Ranier",
        "Ransden",
        "Ransford",
        "Ransley",
        "Ransom",
        "Raoul",
        "Raphael",
        "Rashad",
        "Rasiel",
        "Raul",
        "Raven",
        "Ravi",
        "Ravinger",
        "Ravinia",
        "Rawdon",
        "Rawley",
        "Rawlings",
        "Rawlins",
        "Rawls",
        "Rawly",
        "Rawson",
        "Ray",
        "Rayburn",
        "Rayce",
        "Rayder",
        "Raydon",
        "Rayfield",
        "Rayford",
        "Raylen",
        "Raymon",
        "Raymond",
        "Raymund",
        "Raymundo",
        "Raynard",
        "Raynell",
        "Read",
        "Reade",
        "Reading",
        "Reagan",
        "Reamonn",
        "Red",
        "Redd",
        "Redding",
        "Redfield",
        "Redford",
        "Redgrave",
        "Redman",
        "Redwald",
        "Reece",
        "Reed",
        "Reese",
        "Reg",
        "Reggie",
        "Reggy",
        "Reginald",
        "Regnauld",
        "Reid",
        "Reilly",
        "Reimar",
        "Reimund",
        "Reinald",
        "Reiner",
        "Reinhard",
        "Reinhold",
        "Reinold",
        "Reinwald",
        "Rell",
        "Remi",
        "Remington",
        "Remme",
        "Remmie",
        "Remmy",
        "Remo",
        "Remy",
        "René",
        "Renald",
        "Renard",
        "Renato",
        "Renault",
        "Rene",
        "Renne",
        "Rennie",
        "Renny",
        "Reto",
        "Reuben",
        "Reule",
        "Reve",
        "Rex",
        "Rey",
        "Reymond",
        "Reymundo",
        "Reynaldo",
        "Reynard",
        "Reynold",
        "Reynolds",
        "Rhett",
        "Ricard",
        "Ricardo",
        "Rich",
        "Richard",
        "Richardo",
        "Richmond",
        "Rick",
        "Rickard",
        "Rickey",
        "Rickie",
        "Ricky",
        "Rico",
        "Rider",
        "Ridley",
        "Rigby",
        "Rigoberto",
        "Riley",
        "Rinaldo",
        "Riobard",
        "Rip",
        "Ripley",
        "Rique",
        "Rishley",
        "Risto",
        "Riston",
        "River",
        "Rob",
        "Robb",
        "Robben",
        "Robbie",
        "Robbins",
        "Robby",
        "Rober",
        "Robert",
        "Roberto",
        "Robey",
        "Robin",
        "Robinson",
        "Rocco",
        "Roch",
        "Roche",
        "Rochester",
        "Rocke",
        "Rocky",
        "Rod",
        "Rodd",
        "Roddie",
        "Roddric",
        "Roddrick",
        "Roddy",
        "Rodel",
        "Rodell",
        "Roderic",
        "Roderich",
        "Roderick",
        "Rodge",
        "Rodger",
        "Rodhlann",
        "Rodi",
        "Rodman",
        "Rodmond",
        "Rodmund",
        "Rodney",
        "Rodolf",
        "Rodolfo",
        "Rodolph",
        "Rodrigo",
        "Roel",
        "Rogelio",
        "Roger",
        "Rogj",
        "Rohan",
        "Roi",
        "Rol",
        "Roland",
        "Rolando",
        "Rolf",
        "Rolfe",
        "Rollan",
        "Rolland",
        "Rollie",
        "Rollin",
        "Rollo",
        "Rolof",
        "Rolph",
        "Rolt",
        "Romain",
        "Roman",
        "Romano",
        "Romek",
        "Romeo",
        "Ron",
        "Ronald",
        "Ronaldo",
        "Ronan",
        "Ronnie",
        "Ronny",
        "Rory",
        "Roselin",
        "Ross",
        "Roswald",
        "Roswall",
        "Roswell",
        "Roth",
        "Rousse",
        "Roussel",
        "Rousset",
        "Rousskin",
        "Rouven",
        "Rowan",
        "Rowe",
        "Rowland",
        "Roy",
        "Royal",
        "Royce",
        "Royden",
        "Ruben",
        "Rubert",
        "Ruddy",
        "Rudi",
        "Rudiger",
        "Rudolf",
        "Rudolfo",
        "Rudolph",
        "Rudy",
        "Rudyard",
        "Ruelle",
        "Ruff",
        "Ruffe",
        "Ruggero",
        "Rui",
        "Rule",
        "Rupert",
        "Ruppert",
        "Ruprecht",
        "Rush",
        "Rushe",
        "Rushkin",
        "Ruskin",
        "Russ",
        "Russel",
        "Russell",
        "Rust",
        "Rutherford",
        "Ruthren",
        "Ruven",
        "Ryan",
        "Rycroft",
        "Ryder",
        "Rylan",
        "Ryland",
        "Ryle",
        "Rylee",
        "Ryley",
        "Ryman",
        "Rypley",
        "Ryton",
        "Sönke",
        "Sören",
        "Sabastian",
        "Saber",
        "Sacharja",
        "Sadddique",
        "Sage",
        "Saladin",
        "Saladino",
        "Salentin",
        "Salim",
        "Salomo",
        "Salomon",
        "Salomone",
        "Salvador",
        "Salvator",
        "Salvatore",
        "Sam",
        "Sami",
        "Samir",
        "Sammy",
        "Samson",
        "Samuel",
        "Samy",
        "Sanborn",
        "Sandford",
        "Sandon",
        "Sandro",
        "Sandy",
        "Sanford",
        "Santiago",
        "Santino",
        "Santos",
        "Sargent",
        "Sascha",
        "Satordi",
        "Saul",
        "Sauville",
        "Saverio",
        "Saville",
        "Savion",
        "Sawyer",
        "Schorsch",
        "Scipio",
        "Scipione",
        "Scot",
        "Scott",
        "Scottie",
        "Scotty",
        "Seabert",
        "Seabright",
        "Seabrook",
        "Seabury",
        "Seamus",
        "Sean",
        "Searl",
        "Searlas",
        "Searle",
        "Searlus",
        "Sebastian",
        "Sebastiano",
        "Sebastien",
        "Seberg",
        "Sebert",
        "Seid",
        "Seignour",
        "Selby",
        "Selim",
        "Semaj",
        "Semjon",
        "Senad",
        "Senet",
        "Senior",
        "Sennet",
        "Sepp",
        "Seppel",
        "Sepperl",
        "Seppi",
        "Sergej",
        "Sergio",
        "Sergius",
        "Sesto",
        "Seth",
        "Severin",
        "Severinus",
        "Severn",
        "Severus",
        "Sevim",
        "Sevrin",
        "Seward",
        "Sewell",
        "Seymour",
        "Shamar",
        "Shane",
        "Shannon",
        "Shaun",
        "Shaw",
        "Shawn",
        "Shayne",
        "Shea",
        "Sheldon",
        "Shell",
        "Shelley",
        "Shelli",
        "Shelly",
        "Shemar",
        "Shep",
        "Shepard",
        "Shepherd",
        "Shepley",
        "Sheppard",
        "Sherborne",
        "Sherlock",
        "Sherm",
        "Sherman",
        "Sherwin",
        "Sherwood",
        "Shipley",
        "Sid",
        "Siddel",
        "Sidney",
        "Sidwell",
        "Siegfrid",
        "Siegfried",
        "Siegmund",
        "Sigfrid",
        "Sigfried",
        "Siggi",
        "Sigismond",
        "Sigismund",
        "Sigmond",
        "Sigmund",
        "Sigwald",
        "Silas",
        "Silvain",
        "Silvester",
        "Silvestre",
        "Silvio",
        "Silvius",
        "Simeon",
        "Simon",
        "Sinan",
        "Sincere",
        "Sinclair",
        "Sinclaire",
        "Sinjin",
        "Sisto",
        "Siward",
        "Sixt",
        "Sixtus",
        "Skrolan",
        "Skylar",
        "Skyler",
        "Slade",
        "Snowden",
        "Snowdun",
        "Sobek",
        "Solomon",
        "Somer",
        "Somerled",
        "Somerville",
        "Sonke",
        "Sonny",
        "Sorel",
        "Soren",
        "Sorrell",
        "Spangler",
        "Speck",
        "Spence",
        "Spencer",
        "Spenser",
        "Spike",
        "Spiros",
        "Sprague",
        "Spyridon",
        "Spyros",
        "Stanberry",
        "Stanbury",
        "Stanek",
        "Stanfield",
        "Stanford",
        "Stanhope",
        "Stanislaus",
        "Stanleigh",
        "Stanley",
        "Stanly",
        "Stanmore",
        "Stanton",
        "Stanway",
        "Stanwick",
        "Stanwyck",
        "Stefan",
        "Steffen",
        "Stein",
        "Stephan",
        "Stephen",
        "Stephon",
        "Sterling",
        "Steve",
        "Steven",
        "Stockman",
        "Stockton",
        "Stockwell",
        "Stokley",
        "Stone",
        "Stroud",
        "Stuart",
        "Studs",
        "Suleiman",
        "Sullivan",
        "Sumarville",
        "Sumner",
        "Sven",
        "Swen",
        "Syd",
        "Sydell",
        "Sydney",
        "Syed",
        "Sylwester",
        "Taavi",
        "Tabaluga",
        "Taillefer",
        "Talbot",
        "Talehot",
        "Talon",
        "Tancred",
        "Tanner",
        "Tarek",
        "Tarik",
        "Tariq",
        "Tarzan",
        "Tassilo",
        "Tasso",
        "Tate",
        "Tavin",
        "Tavion",
        "Taylor",
        "Tayrese",
        "Tearlach",
        "Ted",
        "Teddic",
        "Teddie",
        "Tedman",
        "Tedmund",
        "Tedric",
        "Telfer",
        "Telfor",
        "Telford",
        "Telfour",
        "Terenz",
        "Terrance",
        "Terrel",
        "Terrell",
        "Terrence",
        "Terrill",
        "Terris",
        "Terry",
        "Thabo",
        "Thaddäus",
        "Thaddeus",
        "Thaisen",
        "Thane",
        "Thassilo",
        "Thatcher",
        "Thees",
        "Theo",
        "Theobald",
        "Theodor",
        "Theodore",
        "Theodoric",
        "Theodorick",
        "Theron",
        "Therron",
        "Thibaud",
        "Thibaut",
        "Thieny",
        "Thierry",
        "Thiery",
        "Thomas",
        "Thor",
        "Thorald",
        "Thoralf",
        "Thorben",
        "Thorbert",
        "Thorburn",
        "Thorley",
        "Thormond",
        "Thorn",
        "Thorndyke",
        "Thorne",
        "Thornley",
        "Thornton",
        "Thorpe",
        "Thorsten",
        "Thurber",
        "Thure",
        "Thurlow",
        "Thurman",
        "Thurmon",
        "Thurmond",
        "Tibault",
        "Tibbald",
        "Tiberio",
        "Tiberius",
        "Tibor",
        "Till",
        "Tillmann",
        "Tilmann",
        "Tilo",
        "Tim",
        "Timo",
        "Timon",
        "Timothy",
        "Tino",
        "Tioboid",
        "Tiran",
        "Tirell",
        "Tito",
        "Titus",
        "Tizian",
        "Tiziano",
        "Tjorven",
        "Tobi",
        "Tobia",
        "Tobias",
        "Toby",
        "Todd",
        "Toffel",
        "Tom",
        "Tomas",
        "Tomaso",
        "Tombke",
        "Tomke",
        "Tomkin",
        "Tomlin",
        "Tommy",
        "Tompkin",
        "Toni",
        "Tonio",
        "Tony",
        "Torben",
        "Torge",
        "Torold",
        "Torsten",
        "Tostig",
        "Toussnint",
        "Towne",
        "Townes",
        "Townley",
        "Townsend",
        "Trace",
        "Tracy",
        "Tranter",
        "Traugott",
        "Travers",
        "Travis",
        "Travon",
        "Tre",
        "Trent",
        "Trenton",
        "Trever",
        "Treves",
        "Trevin",
        "Trevion",
        "Trevon",
        "Trevor",
        "Trey",
        "Treyton",
        "Tripp",
        "Tristan",
        "Tristen",
        "Tristian",
        "Tristin",
        "Triston",
        "Troy",
        "Troyes",
        "True",
        "Trueman",
        "Truesdale",
        "Truman",
        "Trystan",
        "Tucker",
        "Turner",
        "Ty",
        "Tybalt",
        "Tyce",
        "Tycho",
        "Tychon",
        "Tye",
        "Tyeis",
        "Tyeson",
        "Tyler",
        "Tylor",
        "Tyne",
        "Tyree",
        "Tyrell",
        "Tyrese",
        "Tyron",
        "Tyrone",
        "Tyshawn",
        "Tyson",
        "Udo",
        "Ugo",
        "Ugolino",
        "Uhland",
        "Uland",
        "Ulf",
        "Uli",
        "Ulises",
        "Ulixes",
        "Ulli",
        "Ulric",
        "Ulrich",
        "Ulrico",
        "Ulysses",
        "Umberto",
        "Urban",
        "Urbano",
        "Urbanus",
        "Urias",
        "Uriel",
        "Urija",
        "Urs",
        "Ursinus",
        "Ursio",
        "Ursus",
        "Uto",
        "Utto",
        "Uve",
        "Uvo",
        "Uwe",
        "Uwo",
        "Vachel",
        "Vail",
        "Valdemar",
        "Valdimar",
        "Valdimiro",
        "Valdis",
        "Valentianus",
        "Valentin",
        "Valentiniano",
        "Valentino",
        "Valentinus",
        "Valentius",
        "Valerian",
        "Valerianus",
        "Valerio",
        "Valerius",
        "Valiant",
        "Vallis",
        "Vallois",
        "Vance",
        "Vardan",
        "Varden",
        "Vardon",
        "Vasco",
        "Vaughn",
        "Vayle",
        "Veit",
        "Verddun",
        "Verdell",
        "Verel",
        "Vern",
        "Vernay",
        "Verne",
        "Vernell",
        "Verner",
        "Verney",
        "Vernon",
        "Verrall",
        "Verrell",
        "Verrill",
        "Veryl",
        "Vic",
        "Vicente",
        "Vick",
        "Vico",
        "Vicq",
        "Victor",
        "Victorian",
        "Victorianus",
        "Victorinus",
        "Vidal",
        "Videl",
        "Vike",
        "Viktor",
        "Viktorin",
        "Vilmos",
        "Vincent",
        "Vincentius",
        "Vincenz",
        "Vincenzo",
        "Vinzenez",
        "Vinzent",
        "Vinzenz",
        "Virgil",
        "Vital",
        "Vitale",
        "Vitalis",
        "Vito",
        "Vittorio",
        "Vladimir",
        "Volkan",
        "Volker",
        "Volkher",
        "Volkmar",
        "Volkmer",
        "Vollert",
        "Volmar",
        "Volney",
        "Von",
        "Wade",
        "Waggoner",
        "Wagner",
        "Wain",
        "Waine",
        "Wake",
        "Wakefield",
        "Wakeley",
        "Wakeman",
        "Walcot",
        "Walcott",
        "Waldemar",
        "Waldo",
        "Waldomar",
        "Waldron",
        "Walker",
        "Wallace",
        "Wallach",
        "Wallas",
        "Waller",
        "Wallie",
        "Wallis",
        "Wally",
        "Walmond",
        "Walmund",
        "Walsh",
        "Walt",
        "Walter",
        "Walters",
        "Walther",
        "Walton",
        "Wanja",
        "Wanko",
        "Ward",
        "Wardell",
        "Warden",
        "Wardley",
        "Warfield",
        "Warford",
        "Waring",
        "Warley",
        "Warmond",
        "Warmund",
        "Warner",
        "Warnke",
        "Warrane",
        "Warren",
        "Warrick",
        "Warton",
        "Warwick",
        "Washington",
        "Wassilie",
        "Wat",
        "Watkins",
        "Watson",
        "Watt",
        "Waverly",
        "Way",
        "Wayland",
        "Waylon",
        "Wayne",
        "Webb",
        "Weber",
        "Webley",
        "Webster",
        "Weimer",
        "Welborne",
        "Welby",
        "Welch",
        "Weldon",
        "Welf",
        "Welford",
        "Weller",
        "Welles",
        "Wells",
        "Welsh",
        "Welton",
        "Wenceslas",
        "Wendel",
        "Wendelin",
        "Wendell",
        "Wenzel",
        "Werner",
        "Wernher",
        "Werther",
        "Wes",
        "Wesley",
        "Wess",
        "Wessely",
        "West",
        "Westbrook",
        "Westby",
        "Westcott",
        "Westleigh",
        "Weston",
        "Wetherby",
        "Wheaton",
        "Wheeler",
        "Whit",
        "Whitby",
        "Whitcomb",
        "Whitelaw",
        "Whitfield",
        "Whitford",
        "Whitley",
        "Whitlock",
        "Whitman",
        "Whitmore",
        "Whittaker",
        "Wiatt",
        "Wiclef",
        "Wiclif",
        "Wilbur",
        "Wiley",
        "Wilfer",
        "Wilfert",
        "Wilfred",
        "Wilfrid",
        "Wilfried",
        "Wilhelm",
        "Will",
        "Willem",
        "Willi",
        "William",
        "Willie",
        "Willow",
        "Willy",
        "Wilmer",
        "Wilmot",
        "Wilson",
        "Wim",
        "Winchell",
        "Windemuth",
        "Windham",
        "Windsor",
        "Winemar",
        "Winfield",
        "Winfred",
        "Winfrey",
        "Winfrid",
        "Winfried",
        "Wingate",
        "Winimar",
        "Winmar",
        "Winslow",
        "Winsor",
        "Winston",
        "Winthrop",
        "Winton",
        "Winward",
        "Wirt",
        "Wirth",
        "Witas",
        "Witt",
        "Witter",
        "Witton",
        "Wladimir",
        "Wladisla",
        "Woitech",
        "Wolf",
        "Wolfe",
        "Wolfgang",
        "Wolfram",
        "Wolter",
        "Woodie",
        "Woodrow",
        "Woodruff",
        "Woodward",
        "Woody",
        "Wright",
        "Wulf",
        "Wum",
        "Wyatt",
        "Wylie",
        "Wyn",
        "Wyndam",
        "Wynton",
        "Xander",
        "Xaver",
        "Xaverius",
        "Xavier",
        "Xzavier",
        "Yadiel",
        "Yahir",
        "Yamil",
        "Yan",
        "Yannic",
        "Yannick",
        "Yannis",
        "Yasin",
        "Yehudi",
        "Yorik",
        "York",
        "Yosef",
        "Yul",
        "Yule",
        "Yven",
        "Yves",
        "Ywan",
        "Zachariah",
        "Zacharias",
        "Zachary",
        "Zachery",
        "Zack",
        "Zackary",
        "Zackery",
        "Zadoc",
        "Zain",
        "Zaire",
        "Zakary",
        "Zander",
        "Zane",
        "Zavier",
        "Zayne",
        "Zechariah",
        "Zenobio",
        "Zero",
        "Zeus",
        "Zino",
        "Zion",
        "Zyrus",
    ]
    nm84 = [
        "Aaliyah",
        "Abagail",
        "Abbey",
        "Abbie",
        "Abbigail",
        "Abby",
        "Abelia",
        "Abelina",
        "Abella",
        "Abigail",
        "Abigale",
        "Abigayle",
        "Abril",
        "Aceline",
        "Adalene",
        "Adalicia",
        "Adalie",
        "Adaliz",
        "Adalyn",
        "Addie",
        "Addison",
        "Adela",
        "Adelaide",
        "Adele",
        "Adelia",
        "Adelina",
        "Adeline",
        "Adelisa",
        "Adelise",
        "Adelle",
        "Adelynn",
        "Adilene",
        "Adorlee",
        "Adreanna",
        "Adriana",
        "Adriane",
        "Adrianna",
        "Adrianne",
        "Adriene",
        "Adrienne",
        "Adula",
        "Aeldrida",
        "Aelfreda",
        "Afra",
        "Afrodille",
        "Afton",
        "Agatha",
        "Agathe",
        "Agda",
        "Aget",
        "Aggy",
        "Aglaia",
        "Aglaja",
        "Agnes",
        "Agnese",
        "Agnita",
        "Agrona",
        "Aida",
        "Aiglentina",
        "Aileen",
        "Aillsa",
        "Ailsa",
        "Ailssa",
        "Aimee",
        "Ainsley",
        "Aischa",
        "Aisha",
        "Aislinn",
        "Aiyana",
        "Aja",
        "Akira",
        "Alaina",
        "Alaine",
        "Alair",
        "Alana",
        "Alanis",
        "Alanna",
        "Alarica",
        "Alarice",
        "Alarise",
        "Alayna",
        "Alban",
        "Alberta",
        "Albertina",
        "Albertyna",
        "Albertyne",
        "Alcott",
        "Alda",
        "Alden",
        "Aldercy",
        "Alea",
        "Aleah",
        "Alejandra",
        "Alena",
        "Alessandra",
        "Aletta",
        "Alex",
        "Alexa",
        "Alexandra",
        "Alexandrea",
        "Alexandria",
        "Alexandrina",
        "Alexandrine",
        "Alexia",
        "Alexiana",
        "Alexis",
        "Alexus",
        "Alexys",
        "Alfonsine",
        "Alhertine",
        "Alia",
        "Alice",
        "Alicia",
        "Alida",
        "Alina",
        "Alisa",
        "Alisanne",
        "Alisha",
        "Alisia",
        "Alison",
        "Alissa",
        "Alita",
        "Alivia",
        "Alix",
        "Alixandra",
        "Aliya",
        "Aliyah",
        "Aliza",
        "Alize",
        "Allaire",
        "Alleffra",
        "Allegra",
        "Allesha",
        "Allete",
        "Allie",
        "Allison",
        "Ally",
        "Allyson",
        "Allyssa",
        "Alma",
        "Almuth",
        "Alondra",
        "Alonza",
        "Aloys",
        "Aloyse",
        "Alphonsina",
        "Alphonsine",
        "Alsatia",
        "Althea",
        "Althee",
        "Alva",
        "Alvina",
        "Alvine",
        "Alwara",
        "Alwera",
        "Alwine",
        "Alycia",
        "Alysa",
        "Alysha",
        "Alyson",
        "Alyssa",
        "Alyssandra",
        "Amabel",
        "Amabella",
        "Amabelle",
        "Amabilia",
        "Amadea",
        "Amalberga",
        "Amalia",
        "Amalie",
        "Amanda",
        "Amani",
        "Amara",
        "Amarante",
        "Amari",
        "Amata",
        "Amaya",
        "Amber",
        "Amberjill",
        "Ambra",
        "Ambre",
        "Amedea",
        "Amedee",
        "Amelia",
        "Amelie",
        "Amely",
        "America",
        "Ami",
        "Amia",
        "Amie",
        "Amina",
        "Amira",
        "Amite",
        "Amitee",
        "Amity",
        "Amrei",
        "Amy",
        "Amya",
        "Ana",
        "Anabel",
        "Anahi",
        "Anais",
        "Anastasia",
        "Anastasija",
        "Anastina",
        "Anaya",
        "Ancelin",
        "Ancelina",
        "Andie",
        "Andra",
        "Andrea",
        "Andree",
        "Aneta",
        "Anette",
        "Ange",
        "Angel",
        "Angela",
        "Angeletta",
        "Angelette",
        "Angelia",
        "Angelica",
        "Angelika",
        "Angelina",
        "Angeline",
        "Angelique",
        "Angie",
        "Angilia",
        "Anika",
        "Anina",
        "Anissa",
        "Anita",
        "Aniya",
        "Aniyah",
        "Anja",
        "Anjali",
        "Anjuschka",
        "Anka",
        "Anke",
        "Ann",
        "Anna",
        "Annabel",
        "Annabella",
        "Annabelle",
        "Annalena",
        "Annalise",
        "Annamaria",
        "Anne",
        "Anne-Kathrin",
        "Annekathrin",
        "Anneke",
        "Annelie",
        "Anneliese",
        "Annemarie",
        "Annett",
        "Annette",
        "Annia",
        "Annie",
        "Annika",
        "Annike",
        "Annique",
        "Anouk",
        "Ansley",
        "Antje",
        "Antoinette",
        "Antonella",
        "Antonette",
        "Antonia",
        "Antonie",
        "Antonina",
        "Anuschka",
        "Anya",
        "Apollina",
        "Apolline",
        "Appollonia",
        "April",
        "Arabela",
        "Arabella",
        "Araceli",
        "Aracely",
        "Arantxa",
        "Arcene",
        "Arely",
        "Aria",
        "Ariadne",
        "Ariana",
        "Ariane",
        "Arianna",
        "Arianne",
        "Ariel",
        "Ariele",
        "Ariella",
        "Arielle",
        "Arjean",
        "Arleigh",
        "Arlene",
        "Arleta",
        "Arlett",
        "Arlette",
        "Armani",
        "Armelle",
        "Armina",
        "Armine",
        "Arminia",
        "Arnalda",
        "Arnelle",
        "Arsène",
        "Aruna",
        "Aryanna",
        "Ash",
        "Ashanti",
        "Ashby",
        "Ashe",
        "Ashford",
        "Ashi",
        "Ashlan",
        "Ashlee",
        "Ashleigh",
        "Ashley",
        "Ashli",
        "Ashlie",
        "Ashlin",
        "Ashling",
        "Ashly",
        "Ashlyn",
        "Ashlynn",
        "Ashton",
        "Ashtyn",
        "Asia",
        "Aspen",
        "Asta",
        "Asteria",
        "Astred",
        "Astrid",
        "Athena",
        "Auberta",
        "Aubina",
        "Aubine",
        "Aubree",
        "Aubrey",
        "Aubriana",
        "Aubrianne",
        "Aubrie",
        "Aubry",
        "Audery",
        "Audey",
        "Audie",
        "Audra",
        "Audrey",
        "Audry",
        "Aurelia",
        "Aurelie",
        "Aurica",
        "Aurora",
        "Aurorette",
        "Autumn",
        "Ava",
        "Aveline",
        "Avery",
        "Avicia",
        "Avon",
        "Avril",
        "Axelle",
        "Ayana",
        "Ayanna",
        "Ayasha",
        "Ayla",
        "Aylin",
        "Aysche",
        "Aysun",
        "Azzura",
        "Babette",
        "Baby",
        "Baerbel",
        "Bailee",
        "Bailey",
        "Barbara",
        "Bathilda",
        "Bathilde",
        "Batilda",
        "Batilde",
        "Baxter",
        "Baylee",
        "Bea",
        "Beata",
        "Beate",
        "Beatrice",
        "Beatrix",
        "Beatriz",
        "Bebe",
        "Becky",
        "Belana",
        "Belda",
        "Belen",
        "Belinda",
        "Beline",
        "Bell",
        "Bella",
        "Belle",
        "Benedetta",
        "Benedicta",
        "Benedikta",
        "Benita",
        "Bente",
        "Berangaria",
        "Berdine",
        "Berengaria",
        "Berenice",
        "Berenike",
        "Berit",
        "Bernadea",
        "Bernadette",
        "Bernadina",
        "Bernadine",
        "Bernarda",
        "Bernarde",
        "Berneen",
        "Bernelle",
        "Bernetta",
        "Bernette",
        "Bernhardine",
        "Bernice",
        "Berniss",
        "Bernita",
        "Bernyce",
        "Bert",
        "Berta",
        "Berte",
        "Bertha",
        "Berthe",
        "Bertie",
        "Bertille",
        "Bertina",
        "Berty",
        "Bessy",
        "Bethany",
        "Bette",
        "Betti",
        "Bettina",
        "Bettine",
        "Bev",
        "Beverely",
        "Beverley",
        "Beverly",
        "Bianca",
        "Bianka",
        "Bibi",
        "Bibijana",
        "Bijou",
        "Bille",
        "Billie",
        "Billy",
        "Bina",
        "Bine",
        "Binga",
        "Binia",
        "Birger",
        "Birgit",
        "Birgitta",
        "Birke",
        "Birte",
        "Blaine",
        "Blanca",
        "Blanch",
        "Blanche",
        "Blanchefleur",
        "Blandina",
        "Blanka",
        "Blenda",
        "Blondell",
        "Blondelle",
        "Blondene",
        "Blossom",
        "Blythe",
        "Bo",
        "Bobbi",
        "Bobbie",
        "Bobby",
        "Bojana",
        "Bojena",
        "Bonnie",
        "Bonny",
        "Borissa",
        "Brandi",
        "Brandy",
        "Brea",
        "Breana",
        "Breanna",
        "Brenda",
        "Brenna",
        "Breonna",
        "Bret",
        "Brett",
        "Bretta",
        "Brettany",
        "Brette",
        "Bria",
        "Briana",
        "Brianna",
        "Brianne",
        "Bridget",
        "Bridgett",
        "Bridgette",
        "Brielle",
        "Brigette",
        "Brigitta",
        "Brigitte",
        "Brionna",
        "Brisa",
        "Brita",
        "Britney",
        "Britt",
        "Britta",
        "Brittany",
        "Brittney",
        "Bronja",
        "Bronwen",
        "Bronwyn",
        "Brook",
        "Brooke",
        "Brookes",
        "Brooklyn",
        "Brooklynn",
        "Brooks",
        "Brucie",
        "Brunella",
        "Brunhild",
        "Brunhilda",
        "Brunhilde",
        "Bryana",
        "Bryanna",
        "Brynn",
        "Buffy",
        "Burgi",
        "Cäzilie",
        "Cadence",
        "Cadencia",
        "Cady",
        "Caitlin",
        "Caitlyn",
        "Caja",
        "Calandre",
        "Calantha",
        "Calanthe",
        "Cali",
        "Calista",
        "Callie",
        "Cam",
        "Cameron",
        "Camila",
        "Camile",
        "Camilla",
        "Camille",
        "Camillei",
        "Camm",
        "Cammi",
        "Cammie",
        "Camryn",
        "Camyron",
        "Candace",
        "Candice",
        "Candide",
        "Capucina",
        "Capucine",
        "Cara",
        "Caress",
        "Caressa",
        "Caresse",
        "Carin",
        "Carina",
        "Carine",
        "Carissa",
        "Carla",
        "Carlee",
        "Carley",
        "Carli",
        "Carlie",
        "Carling",
        "Carlotta",
        "Carly",
        "Carmela",
        "Carmelia",
        "Carmen",
        "Carnation",
        "Caro",
        "Carol",
        "Carola",
        "Carole",
        "Carolin",
        "Carolina",
        "Caroline",
        "Carolyn",
        "Carressa",
        "Carrie",
        "Carry",
        "Carson",
        "Carsta",
        "Casandra",
        "Casey",
        "Cassandra",
        "Cassidy",
        "Cassie",
        "Catalina",
        "Cateline",
        "Catharina",
        "Catherine",
        "Cathleen",
        "Cathrin",
        "Cayla",
        "Cecelia",
        "Cecile",
        "Cecilia",
        "Cecilie",
        "Cecille",
        "Cedrine",
        "Celesse",
        "Celeste",
        "Celestia",
        "Celestiel",
        "Celestine",
        "Celestyn",
        "Celestyna",
        "Celia",
        "Celie",
        "Celina",
        "Celine",
        "Cellina",
        "Cendrillon",
        "Cerise",
        "Chana",
        "Chanel",
        "Chanell",
        "Chanelle",
        "Channelle",
        "Chantae",
        "Chantal",
        "Chantalle",
        "Chantay",
        "Chante",
        "Chantel",
        "Chantell",
        "Chantelle",
        "Chantrell",
        "Chardae",
        "Charee",
        "Charis",
        "Charisse",
        "Charity",
        "Charlaine",
        "Charlayne",
        "Charleen",
        "Charleena",
        "Charlena",
        "Charlene",
        "Charlette",
        "Charline",
        "Charlisa",
        "Charlita",
        "Charlize",
        "Charlot",
        "Charlotta",
        "Charlotte",
        "Charmain",
        "Charmaine",
        "Charmayne",
        "Charmine",
        "Chasity",
        "Chaunte",
        "Chauntel",
        "Chaya",
        "Chelsea",
        "Chelsey",
        "Chelsie",
        "Chenelle",
        "Cher",
        "Chere",
        "Cheree",
        "Chereen",
        "Cherell",
        "Cherelle",
        "Cheri",
        "Cherie",
        "Cherina",
        "Cherine",
        "Cherise",
        "Cherita",
        "Cherree",
        "Cherrelle",
        "Cherry",
        "Cheryl",
        "Cheyanna",
        "Cheyanne",
        "Cheyenne",
        "Chiana",
        "Chianna",
        "Chiara",
        "Chlarimonda",
        "Chlarimonde",
        "Chloe",
        "Chlorinde",
        "Chloris",
        "Chlothilde",
        "Christa",
        "Christel",
        "Christian",
        "Christiana",
        "Christiane",
        "Christin",
        "Christina",
        "Christine",
        "Christy",
        "Ciara",
        "Cicilina",
        "Ciera",
        "Cierra",
        "Cilia",
        "Cinderella",
        "Cindy",
        "Cinzia",
        "Cira",
        "Citlali",
        "Claiborne",
        "Clair",
        "Claire",
        "Clara",
        "Claral",
        "Clare",
        "Clarette",
        "Claribel",
        "Clarice",
        "Clarimond",
        "Clarimonda",
        "Clarimonde",
        "Clarinda",
        "Clarissa",
        "Clarissa Claudia",
        "Clarisse",
        "Clarita",
        "Claudette",
        "Claudia",
        "Claudine",
        "Clemance",
        "Clemence",
        "Clementia",
        "Clementina",
        "Clementine",
        "Clodia",
        "Clothilda",
        "Clothilde",
        "Clotilda",
        "Clotilde",
        "Clovis",
        "Coco",
        "Coleta",
        "Coletta",
        "Colette",
        "Colleen",
        "Colletta",
        "Collette",
        "Columbia",
        "Comfort",
        "Comforte",
        "Conni",
        "Connie",
        "Conny",
        "Conrada",
        "Conradina",
        "Conradine",
        "Constance",
        "Constancia",
        "Constanze",
        "Cora",
        "Coralie",
        "Cordelia",
        "Cordula",
        "Corette",
        "Corina",
        "Corine",
        "Corinna",
        "Corinne",
        "Corliss",
        "Cornelia",
        "Corney",
        "Cortney",
        "Cosette",
        "Cosima",
        "Cosma",
        "Courtlyn",
        "Courtney",
        "Creissant",
        "Crescent",
        "Cristal",
        "Cristina",
        "Crystal",
        "Cybille",
        "Cynthia",
        "Cyprienne",
        "Daggy",
        "Dagmar",
        "Dagmara",
        "Dagny",
        "Daisey",
        "Daisi",
        "Daisy",
        "Dajana",
        "Dakota",
        "Dale",
        "Dalia",
        "Damaris",
        "Damia",
        "Damiana",
        "Damiane",
        "Damie",
        "Damien",
        "Dana",
        "Danae",
        "Dania",
        "Daniela",
        "Daniella",
        "Danielle",
        "Danja",
        "Danna",
        "Danny",
        "Dany",
        "Daphne",
        "Daralis",
        "Darby",
        "Darcel",
        "Darcell",
        "Darcelle",
        "Darcey",
        "Darchelle",
        "Darci",
        "Darcia",
        "Darcy",
        "Daria",
        "Darlene",
        "Dasia",
        "Daveney",
        "Dawina",
        "Dawn",
        "Dayana",
        "Dea",
        "Deanna",
        "Deasia",
        "Debby",
        "Debora",
        "Deborah",
        "Debra",
        "Deik",
        "Deja",
        "Dela",
        "Delaney",
        "Dele",
        "Delfine",
        "Delia",
        "Delight",
        "Delilah",
        "Delit",
        "Della",
        "Delmare",
        "Delphina",
        "Delphine",
        "Demelza",
        "Demie",
        "Denice",
        "Deniece",
        "Denise",
        "Denisha",
        "Denissa",
        "Denisse",
        "Dennise",
        "Denyse",
        "Dereka",
        "Derica",
        "Dericka",
        "Derrica",
        "Desarae",
        "Desaree",
        "Desideria",
        "Desirae",
        "Desirat",
        "Desire",
        "Desiree",
        "Destanee",
        "Destine",
        "Destinee",
        "Destiney",
        "Destini",
        "Destinie",
        "Destiny",
        "Devan",
        "Devana",
        "Devanna",
        "Devin",
        "Devon",
        "Devona",
        "Devondra",
        "Devonna",
        "Devonne",
        "Devyn",
        "Devynn",
        "Dezirae",
        "Deziree",
        "Di",
        "Diahann",
        "Diahna",
        "Diamanta",
        "Diamond",
        "Dian",
        "Diana",
        "Diandra",
        "Diane",
        "Dianna",
        "Diannah",
        "Dianne",
        "Dick",
        "Dickie",
        "Didina",
        "Dina",
        "Dionne",
        "Dior",
        "Dixie",
        "Dodo",
        "Dolores",
        "Domenica",
        "Dominica",
        "Dominika",
        "Dominique",
        "Donna",
        "Dora",
        "Dorchen",
        "Dore",
        "Doreen",
        "Dorene",
        "Dorette",
        "Dorika",
        "Dorine",
        "Doris",
        "Dorkas",
        "Doro",
        "Dorothea",
        "Dorothee",
        "Dorothy",
        "Dortas",
        "Dortje",
        "Dory",
        "Dragana",
        "Druella",
        "Druilla",
        "Dulce",
        "Dunja",
        "Dyana",
        "Dyann",
        "Dyanna",
        "Dylan",
        "Eada",
        "Eartha",
        "Easter",
        "Ebony",
        "Eda",
        "Edda",
        "Edeline",
        "Eden",
        "Edith",
        "Editha",
        "Edithe",
        "Edlyn",
        "Edmee",
        "Edolie",
        "Edsel",
        "Effi",
        "Eglantina",
        "Eglantine",
        "Eike",
        "Eila",
        "Eileen",
        "Ela",
        "Elaina",
        "Elaine",
        "Elayna",
        "Elber",
        "Elberta",
        "Elda",
        "Eldrida",
        "Eleanor",
        "Elektra",
        "Elena",
        "Eleonora",
        "Eleonore",
        "Eleta",
        "Elfi",
        "Elfie",
        "Elfreda",
        "Elfrida",
        "Elfrieda",
        "Elfriede",
        "Elga",
        "Eliana",
        "Eliane",
        "Elicia",
        "Elienor",
        "Elin",
        "Elina",
        "Elinore",
        "Elisa",
        "Elisabet",
        "Elisabeth",
        "Elisabetta",
        "Elisamarie",
        "Elise",
        "Elisha",
        "Elishia",
        "Elissa",
        "Elita",
        "Eliza",
        "Elizabeth",
        "Elka",
        "Elke",
        "Ella",
        "Ellaine",
        "Ellayne",
        "Elle",
        "Ellen",
        "Elli",
        "Ellie",
        "Ellinor",
        "Elmina",
        "Eloisa",
        "Eloise",
        "Eloisee",
        "Elrica",
        "Elsa",
        "Elsbeth",
        "Else",
        "Elvira",
        "Elvire",
        "Elyse",
        "Elyssa",
        "Ema",
        "Emanuela",
        "Emanuele",
        "Ember",
        "Emele",
        "Emelina",
        "Emeline",
        "Emelka",
        "Emely",
        "Emelyne",
        "Emerald",
        "Emeraude",
        "Emerson",
        "Emilee",
        "Emilia",
        "Emilie",
        "Emily",
        "Emma",
        "Emmalee",
        "Emmaline",
        "Emmalyn",
        "Emmeline",
        "Emmi",
        "Emmy",
        "Ena",
        "Encarna",
        "Engelberga",
        "Engelbert",
        "Engelberta",
        "Engelbertha",
        "Engelberthe",
        "Enna",
        "Enrica",
        "Eri",
        "Erica",
        "Ericka",
        "Erika",
        "Erin",
        "Erma",
        "Erme",
        "Ermina",
        "Erminia",
        "Erminie",
        "Erna",
        "Ernesta",
        "Ernstina",
        "Esdras",
        "Esme",
        "Esmeralda",
        "Esmeraude",
        "Esperanza",
        "Esra",
        "Essence",
        "Estee",
        "Estefani",
        "Estefania",
        "Estefany",
        "Estella",
        "Estelle",
        "Ester",
        "Esther",
        "Estrella",
        "Estrid",
        "Etelka",
        "Ethel",
        "Ethelda",
        "Ethelinda",
        "Etheline",
        "Ethyl",
        "Ethylyn",
        "Etta",
        "Eudokia",
        "Eudoxia",
        "Eufemia",
        "Eugenia",
        "Eugenie",
        "Eulalie",
        "Euphemia",
        "Euphrasia",
        "Eusebia",
        "Ev",
        "Eva",
        "Eva-maria",
        "Evangelina",
        "Evangeline",
        "Evchen",
        "Eve",
        "Evelia",
        "Evelien",
        "Evelin",
        "Evelina",
        "Eveline",
        "Evelyn",
        "Evelyne",
        "Evette",
        "Evi",
        "Evita",
        "Evon",
        "Evonna",
        "Evonne",
        "Evony",
        "Ewelina",
        "Ezra",
        "Fabia",
        "Fabiana",
        "Fabienne",
        "Fabiola",
        "Fae",
        "Faith",
        "Faithe",
        "Fanchon",
        "Fanchone",
        "Fanetta",
        "Fanette",
        "Fantina",
        "Fantine",
        "Fara",
        "Faralda",
        "Farrah",
        "Fastrada",
        "Fatima",
        "Fatime",
        "Fatma",
        "Faun",
        "Fauna",
        "Faunia",
        "Fausta",
        "Faustina",
        "Faustine",
        "Favor",
        "Fawnia",
        "Fay",
        "Fayanna",
        "Faye",
        "Fayette",
        "Fayme",
        "Fealty",
        "Fearn",
        "Fearne",
        "Federica",
        "Federiga",
        "Fedora",
        "Felda",
        "Felecia",
        "Feli",
        "Felicia",
        "Felicienne",
        "Felicitas",
        "Felicity",
        "Felina",
        "Felizitas",
        "Ferdinanda",
        "Fern",
        "Fernanda",
        "Fernandina",
        "Ferne",
        "Fernly",
        "Fidelia",
        "Fifi",
        "Fifine",
        "Filicia",
        "Finetta",
        "Finja",
        "Finnja",
        "Fiona",
        "Fjodora",
        "Fleta",
        "Fleur",
        "Fleurette",
        "Flora",
        "Florence",
        "Florentia",
        "Florenzia",
        "Floressa",
        "Floretta",
        "Florette",
        "Flori",
        "Floria",
        "Floriana",
        "Florida",
        "Florina",
        "Florinda",
        "Florrie",
        "Fontanne",
        "Fortuna",
        "Fortunat",
        "Franca",
        "France",
        "Francena",
        "Francene",
        "Frances",
        "Francesca",
        "Francille",
        "Francina",
        "Francine",
        "Francoise",
        "Franja",
        "Franka",
        "Fransiska",
        "Franzi",
        "Franziska",
        "Frauke",
        "Frauwa",
        "Frawa",
        "Freda",
        "Freddie",
        "Freida",
        "Frida",
        "Frieda",
        "Friederika",
        "Friederike",
        "Fritzi",
        "Fritzie",
        "Gabi",
        "Gabriela",
        "Gabriele",
        "Gabriella",
        "Gabrielle",
        "Gaby",
        "Gaetana",
        "Gaetane",
        "Gail",
        "Gala",
        "Galatea",
        "Galatee",
        "Galateia",
        "Gale",
        "Galiana",
        "Galiena",
        "Galilea",
        "Galina",
        "Galla",
        "Gallia",
        "Ganja",
        "Garland",
        "Garnet",
        "Garnett",
        "Gatty",
        "Gay",
        "Gayle",
        "Gemma",
        "Genesis",
        "Geneva",
        "Geneve",
        "Genevie",
        "Genevieve",
        "Genevre",
        "Genia",
        "Genie",
        "Genivee",
        "Genovefa",
        "Genoveva",
        "Georgette",
        "Georgia",
        "Georgine",
        "Georgitte",
        "Geraldene",
        "Geraldine",
        "Geralyn",
        "Geralynn",
        "Gerda",
        "Gerde",
        "Gerdi",
        "Gerdie",
        "Geri",
        "Gerlind",
        "Gerlinde",
        "Gerlindis",
        "Germain",
        "Germaine",
        "Germana",
        "Gerti",
        "Gertraud",
        "Gertraude",
        "Gertraut",
        "Gertrud",
        "Gertrude",
        "Gertrudis",
        "Gesa",
        "Gescha",
        "Gia",
        "Giana",
        "Gianna",
        "Gigi",
        "Gilla",
        "Gillian",
        "Gina",
        "Ginette",
        "Gioa",
        "Giovanna",
        "Gisela",
        "Gisele",
        "Gisella",
        "Giselle",
        "Gisselle",
        "Gitta",
        "Gitte",
        "Giuletta",
        "Giulia",
        "Giuliana",
        "Giulietta",
        "Giuseppa",
        "Giustina",
        "Gleda",
        "Gloria",
        "Gloriana",
        "Gloriosa",
        "Godiva",
        "Golda",
        "Goldie",
        "Grace",
        "Gracie",
        "Graciela",
        "Gracy",
        "Grania",
        "Gratia",
        "Grazia",
        "Graziella",
        "Greta",
        "Gretchen",
        "Grete",
        "Gretel",
        "Grethe",
        "Gretti",
        "Grit",
        "Gritt",
        "Grizelda",
        "Guadalupe",
        "Gudrun",
        "Gudrune",
        "Gudula",
        "Guilla",
        "Gulja",
        "Gunda",
        "Gunde",
        "Gundel",
        "Gundela",
        "Gundula",
        "Gustava",
        "Gustave",
        "Gwend",
        "Gwenda",
        "Gwendolin",
        "Gwendolina",
        "Gwendoline",
        "Gwendolyn",
        "Gypsy",
        "Gytha",
        "Hadley",
        "Hailee",
        "Hailey",
        "Hailie",
        "Haleigh",
        "Halette",
        "Haley",
        "Halfreida",
        "Halfrida",
        "Halfrieda",
        "Halie",
        "Halle",
        "Hallie",
        "Halsey",
        "Hana",
        "Hanna",
        "Hannah",
        "Hannchen",
        "Hanne",
        "Hannele",
        "Hannelore",
        "Hanni",
        "Hanrietta",
        "Hanriette",
        "Harley",
        "Harmony",
        "Harriet",
        "Harriett",
        "Harrietta",
        "Harriette",
        "Harva",
        "Harvelle",
        "Harvina",
        "Harvine",
        "Hattie",
        "Hatty",
        "Hauke",
        "Haven",
        "Hayden",
        "Haylee",
        "Hayleigh",
        "Hayley",
        "Haylie",
        "Hazel",
        "Heather",
        "Heaven",
        "Hedda",
        "Heddi",
        "Heddy",
        "Hedi",
        "Hedvige",
        "Hedwig",
        "Hedy",
        "Heide",
        "Heidi",
        "Heidrun",
        "Heidy",
        "Heike",
        "Heinrike",
        "Helaine",
        "Helen",
        "Helena",
        "Helene",
        "Helga",
        "Helma",
        "Helmi",
        "Heloise",
        "Hemma",
        "Hendrikje",
        "Henni",
        "Henrietta",
        "Henriette",
        "Henrika",
        "Henrike",
        "Hera",
        "Herma",
        "Hermia",
        "Hermine",
        "Hermione",
        "Hertha",
        "Hester",
        "Hetdt",
        "Hettie",
        "Hidie",
        "Hilaire",
        "Hild",
        "Hilda",
        "Hilde",
        "Hildegard",
        "Hildegarde",
        "Hildemar",
        "Hildie",
        "Hildreth",
        "Hildretha",
        "Hilke",
        "Hilma",
        "Hollace",
        "Hollee",
        "Holli",
        "Hollie",
        "Holly",
        "Hollye",
        "Honey",
        "Honore",
        "Hope",
        "Huberta",
        "Hubertha",
        "Huberthe",
        "Hubertina",
        "Hubertine",
        "Huette",
        "Hugette",
        "Huguetta",
        "Hulda",
        "Hunter",
        "Ida",
        "Idda",
        "Idelia",
        "Idina",
        "Idona",
        "Ignatia",
        "Iken",
        "Ila",
        "Ilga",
        "Iliana",
        "Iljana",
        "Ilka",
        "Ilona",
        "Ilonka",
        "Ilse",
        "Imani",
        "Imke",
        "Immaculata",
        "Immakulata",
        "Ina",
        "India",
        "Indira",
        "Indra",
        "Ine",
        "Ineke",
        "Ines",
        "Inga",
        "Inge",
        "Ingeborg",
        "Ingrid",
        "Inka",
        "Inke",
        "Inken",
        "Innocentia",
        "Innozentia",
        "Insa",
        "Iphigenie",
        "Ira",
        "Ireland",
        "Irena",
        "Irene",
        "Irina",
        "Irinka",
        "Iris",
        "Irma",
        "Irme",
        "Irmengard",
        "Irmgard",
        "Irmina",
        "Irmine",
        "Isa",
        "Isabeau",
        "Isabel",
        "Isabela",
        "Isabell",
        "Isabella",
        "Isabelle",
        "Isalda",
        "Isis",
        "Isolda",
        "Isolde",
        "Isotta",
        "Ita",
        "Itzel",
        "Iva",
        "Ivana",
        "Ivanka",
        "Ivona",
        "Ivonne",
        "Ivy",
        "Iwana",
        "Iwanka",
        "Iwanna",
        "Iyana",
        "Iyanna",
        "Izabella",
        "Jacalyn",
        "Jacey",
        "Jacinthe",
        "Jackeline",
        "Jackie",
        "Jacky",
        "Jaclyn",
        "Jacqualine",
        "Jacqueleen",
        "Jacqueline",
        "Jacquelyn",
        "Jacquelyne",
        "Jacquelynne",
        "Jacquenetta",
        "Jacquenette",
        "Jacqui",
        "Jada",
        "Jade",
        "Jaden",
        "Jadwiga",
        "Jadyn",
        "Jaelyn",
        "Jaida",
        "Jaiden",
        "Jaidyn",
        "Jailyn",
        "Jaime",
        "Jakayla",
        "Jaliyah",
        "Jalyn",
        "Jalynn",
        "Jamie",
        "Jamie-Lee",
        "Jamya",
        "Jana",
        "Janae",
        "Jane",
        "Janelle",
        "Janessa",
        "Janet",
        "Janette",
        "Janice",
        "Janie",
        "Janika",
        "Janina",
        "Janine",
        "Janiya",
        "Janka",
        "Jaquelin",
        "Jaqueline",
        "Jarvia",
        "Jasmeen",
        "Jasmin",
        "Jasmina",
        "Jasmine",
        "Jasmyn",
        "Jasmyne",
        "Jaycee",
        "Jayda",
        "Jayde",
        "Jayden",
        "Jayla",
        "Jaylene",
        "Jaylin",
        "Jaylyn",
        "Jaylynn",
        "Jazlyn",
        "Jazmin",
        "Jazmine",
        "Jazmyn",
        "Jazmyne",
        "Jazzmine",
        "Jazzmyn",
        "Jean",
        "Jeana",
        "Jeane",
        "Jeanee",
        "Jeanetta",
        "Jeanette",
        "Jeanice",
        "Jeanie",
        "Jeanina",
        "Jeanine",
        "Jeanna",
        "Jeanne",
        "Jeannette",
        "Jeannie",
        "Jeannine",
        "Jeanny",
        "Jeena",
        "Jehane",
        "Jelena",
        "Jelenka",
        "Jelika",
        "Jella",
        "Jena",
        "Jenette",
        "Jenifer",
        "Jenina",
        "Jenine",
        "Jenna",
        "Jenni",
        "Jennifer",
        "Jennine",
        "Jenny",
        "Jeri",
        "Jerica",
        "Jessamina",
        "Jessamine",
        "Jessamyn",
        "Jessica",
        "Jessie",
        "Jessika",
        "Jettchen",
        "Jette",
        "Jewel",
        "Jewell",
        "Jill",
        "Jillian",
        "Jimena",
        "Jineen",
        "Joan",
        "Joana",
        "Joanna",
        "Joanne",
        "Jocelin",
        "Jocelina",
        "Joceline",
        "Jocelyn",
        "Jocelyne",
        "Jocelynn",
        "Joeliyn",
        "Joell",
        "Joella",
        "Joelle",
        "Joellen",
        "Joelyn",
        "Johana",
        "Johanna",
        "Joi",
        "Joia",
        "Joie",
        "Jola",
        "Jolanda",
        "Jolande",
        "Jolanta",
        "Jolante",
        "Jolantha",
        "Jolanthe",
        "Jolee",
        "Joleigh",
        "Joli",
        "Jolie",
        "Jolien",
        "Jonesy",
        "Jonna",
        "Jordan",
        "Jordane",
        "Jordyn",
        "Josalyn",
        "Josalynn",
        "Joscelyn",
        "Josefa",
        "Josefin",
        "Josefina",
        "Josefine",
        "Joselyn",
        "Josepha",
        "Josephe",
        "Josephina",
        "Josephine",
        "Josette",
        "Josie",
        "Josilyn",
        "Josina",
        "Joslin",
        "Joslyn",
        "Journey",
        "Jovita",
        "Jowita",
        "Joy",
        "Joy  Joyce",
        "Joya",
        "Joyann",
        "Joyanna",
        "Joyanne",
        "Joyce",
        "Joyelle",
        "Jozlyn",
        "Juana",
        "Juanita",
        "Judit",
        "Judith",
        "Juditha",
        "Judy",
        "Julchen",
        "Jule",
        "Julee",
        "Juleen",
        "Julia",
        "Juliana",
        "Juliane",
        "Julianna",
        "Julianne",
        "Julie",
        "Julienne",
        "Juliet",
        "Julietta",
        "Juliette",
        "Julika",
        "Julissa",
        "Julita",
        "June",
        "Justeen",
        "Justice",
        "Justina",
        "Justine",
        "Justyne",
        "Jutta",
        "Jutte",
        "Kacie",
        "Kaela",
        "Kaelyn",
        "Kaia",
        "Kaila",
        "Kailee",
        "Kailey",
        "Kailyn",
        "Kaitlin",
        "Kaitlyn",
        "Kaitlynn",
        "Kaiya",
        "Kaleigh",
        "Kaley",
        "Kali",
        "Kaliyah",
        "Kallie",
        "Kalyn",
        "Kamille",
        "Kamryn",
        "Kara",
        "Karcsi",
        "Karen",
        "Kari",
        "Karin",
        "Karina",
        "Karissa",
        "Karla",
        "Karlee",
        "Karley",
        "Karli",
        "Karlie",
        "Karlotta",
        "Karly",
        "Karola",
        "Karolin",
        "Karolina",
        "Karoline",
        "Karoly",
        "Kasandra",
        "Kasey",
        "Kassandra",
        "Kassidy",
        "Katarina",
        "Kate",
        "Katelin",
        "Katelyn",
        "Katelynn",
        "Katerina",
        "Katharina",
        "Katharine",
        "Kathe",
        "Katherine",
        "Kathi",
        "Kathleen",
        "Kathrin",
        "Kathrina",
        "Kathrine",
        "Kathryn",
        "Kathy",
        "Katie",
        "Katinka",
        "Katja",
        "Katlyn",
        "Katriane",
        "Katrin",
        "Katrina",
        "Katy",
        "Kaya",
        "Kayla",
        "Kaylah",
        "Kaylee",
        "Kayleigh",
        "Kayley",
        "Kayli",
        "Kaylie",
        "Kaylin",
        "Kaylyn",
        "Kaylynn",
        "Keeley",
        "Keely",
        "Keila",
        "Keira",
        "Kelli",
        "Kellie",
        "Kelly",
        "Kelsey",
        "Kelsi",
        "Kelsie",
        "Kelsy",
        "Kemble",
        "Kendal",
        "Kendall",
        "Kendra",
        "Kenia",
        "Kenna",
        "Kennedi",
        "Kennedy",
        "Kenya",
        "Kenzie",
        "Kersten",
        "Kersti",
        "Kerstin",
        "Keyla",
        "Kezia",
        "Kiana",
        "Kianna",
        "Kiara",
        "Kiera",
        "Kierra",
        "Kiersten",
        "Kiley",
        "Kim",
        "Kimball",
        "Kimbell",
        "Kimberley",
        "Kimberly",
        "Kimble",
        "Kimby",
        "Kimmey",
        "Kimmi",
        "Kimmie",
        "Kimmy",
        "Kira",
        "Kirsten",
        "Kirstin",
        "Kiya",
        "Klara",
        "Klarina",
        "Klarinda",
        "Klarissa",
        "Klaudia",
        "Klementia",
        "Klementine",
        "Kleopatra",
        "Klothild",
        "Klothilde",
        "Konstantia",
        "Konstanza",
        "Konstanze",
        "Kora",
        "Kordula",
        "Korinna",
        "Kornelia",
        "Kourtney",
        "Kriemhild",
        "Kriemhilde",
        "Krimhild",
        "Krimhilde",
        "Krista",
        "Kristen",
        "Kristiane",
        "Kristin",
        "Kristina",
        "Krystal",
        "Kunigunda",
        "Kunigunde",
        "Kunissa",
        "Kya",
        "Kyla",
        "Kylee",
        "Kyleigh",
        "Kylie",
        "Kym",
        "Kymberly",
        "Kyra",
        "LaVergne",
        "Lace",
        "Lacee",
        "Lacene",
        "Lacey",
        "Laci",
        "Laciann",
        "Lacie",
        "Lacina",
        "Lacy",
        "Lacyann",
        "Laetitia",
        "Laila",
        "Lana",
        "Laney",
        "Lara",
        "Larissa",
        "Laura",
        "Laureen",
        "Laurel",
        "Lauren",
        "Laurene",
        "Laurentia",
        "Laurenzia",
        "Lauretta",
        "Laurette",
        "Laurina",
        "Laurine",
        "Lauryn",
        "Lavern",
        "Laverna",
        "Laverne",
        "Lavernia",
        "Lavonne",
        "Laycie",
        "Layla",
        "Lea",
        "Leah",
        "Leala",
        "Lealia",
        "Leander",
        "Leanna",
        "Lee",
        "Leefka",
        "Leefke",
        "Lei",
        "Leia",
        "Leigh",
        "Leila",
        "Leilani",
        "Leilena",
        "Lela",
        "Lena",
        "Lenchen",
        "Lene",
        "Leni",
        "Lenka",
        "Lenore",
        "Leoba",
        "Leoda",
        "Leola",
        "Leona",
        "Leonarda",
        "Leonda",
        "Leondra",
        "Leondrea",
        "Leone",
        "Leonela",
        "Leonelle",
        "Leonie",
        "Leonore",
        "Leontina",
        "Leontyne",
        "Leopolda",
        "Leopoldina",
        "Leopoldine",
        "Leota",
        "Lesley",
        "Leslie",
        "Lesly",
        "Leticia",
        "Letje",
        "Letya",
        "Lexi",
        "Lexie",
        "Lexus",
        "Leyla",
        "Lia",
        "Liana",
        "Liane",
        "Libby",
        "Liberty",
        "Lidda",
        "Liealia",
        "Lies",
        "Liesel",
        "Liesl",
        "Lil",
        "Lila",
        "Lili",
        "Lilian",
        "Liliana",
        "Liliane",
        "Lilith",
        "Lilli",
        "Lillian",
        "Lilliana",
        "Lillie",
        "Lilly",
        "Lilo",
        "Lily",
        "Lina",
        "Linchen",
        "Linda",
        "Lindsay",
        "Lindsey",
        "Line",
        "Linette",
        "Lioba",
        "Liriene",
        "Lirienne",
        "Lisa",
        "Lisbeth",
        "Lise",
        "Liselotte",
        "Lisenka",
        "Lisetta",
        "Lisette",
        "Lissette",
        "Lissy",
        "Litzy",
        "Livi",
        "Livia",
        "Livie",
        "Livvi",
        "Lizbeth",
        "Lizeth",
        "Lizette",
        "Lizzy",
        "Locke",
        "Loella",
        "Logan",
        "Logestilla",
        "Logistilla",
        "Lola",
        "Lolo",
        "London",
        "Lone",
        "Loraina",
        "Loraine",
        "Lorayne",
        "Lorchen",
        "Lore",
        "Lorelei",
        "Lorelia",
        "Lorelie",
        "Loren",
        "Lorena",
        "Lorenza",
        "Loretta",
        "Lorette",
        "Lorin",
        "Lorraina",
        "Lorraine",
        "Lottchen",
        "Lotte",
        "Lotye",
        "Louanna",
        "Louanne",
        "Louella",
        "Louisa",
        "Louise",
        "Lourdes",
        "Love",
        "Loveleen",
        "Lovie",
        "Luana",
        "Luane",
        "Luca",
        "Lucette",
        "Lucia",
        "Luciana",
        "Luciane",
        "Lucie",
        "Lucienne",
        "Lucile",
        "Lucilla",
        "Lucille",
        "Lucrece",
        "Lucy",
        "Ludmila",
        "Ludmilla",
        "Luella",
        "Luelle",
        "Luisa",
        "Luise",
        "Lukretia",
        "Lulu",
        "Luna",
        "Lundy",
        "Lunette",
        "Lupe",
        "Lurleen",
        "Luwana",
        "Luwanna",
        "Luwanne",
        "Luz",
        "Luzia",
        "Luzie",
        "Lydia",
        "Lydie",
        "Lyndsey",
        "Lynette",
        "Lynn",
        "Lynn-Marie",
        "Lynnette",
        "Lyonette",
        "Lyra",
        "Lyric",
        "Mabelle",
        "Macee",
        "Macey",
        "Maci",
        "Macie",
        "Mackenzie",
        "Macy",
        "Madalene",
        "Madalyn",
        "Madalynn",
        "Maddison",
        "Maddy",
        "Madeleina",
        "Madeleine",
        "Madelina",
        "Madeline",
        "Madelon",
        "Madelyn",
        "Madelynn",
        "Madie",
        "Madilyn",
        "Madisen",
        "Madison",
        "Madisyn",
        "Madita",
        "Madlen",
        "Madolen",
        "Mady",
        "Madyson",
        "Mae",
        "Maegan",
        "Maelee",
        "Maelynn",
        "Maeve",
        "Mafalda",
        "Magda",
        "Magdalen",
        "Magdalena",
        "Maggie",
        "Maggy",
        "Magnolia",
        "Mai",
        "Maia",
        "Maida",
        "Maidel",
        "Maidie",
        "Maidy",
        "Maika",
        "Maike",
        "Maiken",
        "Maiolaine",
        "Maira",
        "Mairin",
        "Maisie",
        "Maitane",
        "Maiya",
        "Maja",
        "Majori",
        "Makaila",
        "Makayla",
        "Makena",
        "Makenna",
        "Makenzie",
        "Malchen",
        "Male",
        "Maleah",
        "Malenka",
        "Malia",
        "Malica",
        "Malin",
        "Malina",
        "Maliyah",
        "Mallorie",
        "Mallory",
        "Manda",
        "Mandy",
        "Manette",
        "Manhattan",
        "Mania",
        "Manja",
        "Manjana",
        "Manny",
        "Manon",
        "Manuela",
        "Manuella",
        "Mara",
        "Marcelin",
        "Marcelina",
        "Marceline",
        "Marcella",
        "Marcelle",
        "Marcellia",
        "Marcellina",
        "Marchelle",
        "Marcie",
        "Maree",
        "Mareen",
        "Marei",
        "Mareike",
        "Marelda",
        "Maren",
        "Marene",
        "Marga",
        "Margaret",
        "Margareta",
        "Margarete",
        "Margaretha",
        "Margarita",
        "Margaux",
        "Margeaux",
        "Margery",
        "Margit",
        "Margo",
        "Margot",
        "Margret",
        "Marguerite",
        "Maria",
        "Mariah",
        "Mariam",
        "Marian",
        "Mariana",
        "Mariane",
        "Marianna",
        "Marianne",
        "Maribel",
        "Marie",
        "Mariechen",
        "Mariela",
        "Mariele",
        "Mariella",
        "Marielle",
        "Marietta",
        "Mariette",
        "Marija",
        "Marika",
        "Marike",
        "Marilena",
        "Marilyn",
        "Marina",
        "Marinka",
        "Marion",
        "Mariona",
        "Marionna",
        "Marisa",
        "Marisol",
        "Marissa",
        "Marit",
        "Maritza",
        "Marjolaina",
        "Marlee",
        "Marlene",
        "Marley",
        "Marlis",
        "Marlon",
        "Marquisa",
        "Marquise",
        "Marquisha",
        "Marta",
        "Marteena",
        "Martha",
        "Martina",
        "Martine",
        "Marveille",
        "Marvela",
        "Marvella",
        "Marvelle",
        "Mary",
        "Maryam",
        "Maryl",
        "Maryvonne",
        "Maschinka",
        "Masha",
        "Mateja",
        "Mathilda",
        "Mathilde",
        "Matilda",
        "Matilde",
        "Mattie",
        "Matty",
        "Maud",
        "Maude",
        "Maura",
        "Maureen",
        "Maurelle",
        "Maurina",
        "Maurine",
        "Mavis",
        "Mavise",
        "Maxime",
        "Maxine",
        "May",
        "Maya",
        "Mayda",
        "Mayra",
        "Mckayla",
        "Mckenna",
        "Mckenzie",
        "Meadow",
        "Meagan",
        "Meaghan",
        "Mechthild",
        "Mechthilde",
        "Mechtild",
        "Megan",
        "Meghan",
        "Meika",
        "Meike",
        "Meiken",
        "Mela",
        "Melaina",
        "Melaine",
        "Melanee",
        "Melania",
        "Melanie",
        "Melany",
        "Melina",
        "Melinda",
        "Meline",
        "Melisande",
        "Melissa",
        "Melitta",
        "Melodie",
        "Melody",
        "Melusina",
        "Mercedes",
        "Mercer",
        "Merci",
        "Mercy",
        "Meredith",
        "Meret",
        "Meriel",
        "Merla",
        "Merle",
        "Merlyn",
        "Merryl",
        "Meryl",
        "Meta",
        "Meyla",
        "Mia",
        "Mia  Miah",
        "Miah",
        "Micaela",
        "Micah",
        "Michaela",
        "Michela",
        "Michele",
        "Micheline",
        "Michella",
        "Michelle",
        "Mieke",
        "Miette",
        "Mignon",
        "Mignonette",
        "Mikaela",
        "Mikayla",
        "Milena",
        "Milina",
        "Millicent",
        "Millicente",
        "Millie",
        "Milva",
        "Mimi",
        "Mina",
        "Minchen",
        "Minda",
        "Mindy",
        "Mine",
        "Minerva",
        "Minetta",
        "Minette",
        "Mingo",
        "Minna",
        "Minne",
        "Minnie",
        "Minta",
        "Mira",
        "Mirabell",
        "Mirabella",
        "Mirabelle",
        "Miracle",
        "Miranda",
        "Mireille",
        "Mirella",
        "Mireya",
        "Miriam",
        "Mirielle",
        "Mirjam",
        "Mirla",
        "Mirth",
        "Missie",
        "Missy",
        "Missye",
        "Mistee",
        "Mistey",
        "Mistique",
        "Misty",
        "Miya",
        "Mollie",
        "Molly",
        "Mona",
        "Mone",
        "Moni",
        "Monica",
        "Monika",
        "Moniqua",
        "Monique",
        "Monja",
        "Monserrat",
        "Montana",
        "Moreen",
        "Morgan",
        "Moriah",
        "Munira",
        "Muriel",
        "Musetta",
        "Musette",
        "Mya",
        "Myah",
        "Mychele",
        "Mychelle",
        "Myra",
        "Myrla",
        "Myrna",
        "Mystique",
        "Nada",
        "Nadeen",
        "Nadia",
        "Nadina",
        "Nadine",
        "Nadinka",
        "Nadja",
        "Nadjeschda",
        "Naeva",
        "Nafia",
        "Naima",
        "Nan",
        "Nancey",
        "Nanci",
        "Nancie",
        "Nancy",
        "Nane",
        "Nanette",
        "Nanine",
        "Nann",
        "Nannerl",
        "Nannette",
        "Nanni",
        "Nanon",
        "Naomi",
        "Naomy",
        "Nara",
        "Narcisse",
        "Nastasia",
        "Nastjenka",
        "Nata",
        "Natalee",
        "Natalia",
        "Natalie",
        "Natalii",
        "Nataly",
        "Natascha",
        "Natasha",
        "Natassja",
        "Nathalee",
        "Nathalia",
        "Nathalie",
        "Nathaly",
        "Natuche",
        "Nayeli",
        "Neeske",
        "Neisa",
        "Nele",
        "Nella",
        "Nelli",
        "Nelly",
        "Nesrin",
        "Nessie",
        "Nettchen",
        "Netti",
        "Nevaeh",
        "Nia",
        "Nichol",
        "Nichole",
        "Nicki",
        "Nicky",
        "Nicola",
        "Nicole",
        "Nicoletta",
        "Nicolette",
        "Nicoline",
        "Nicolle",
        "Nikki",
        "Nikoletta",
        "Nikolina",
        "Nikoline",
        "Nila",
        "Nina",
        "Ninette",
        "Ninon",
        "Nissie",
        "Nissy",
        "Nixie",
        "Noa",
        "Noel",
        "Noele",
        "Noelia",
        "Noell",
        "Noella",
        "Noelle",
        "Noemi",
        "Noemie",
        "Nora",
        "Norberta",
        "Norberte",
        "Norbertha",
        "Norberthe",
        "Nordica",
        "Norma",
        "Nuria",
        "Nya",
        "Nyah",
        "Nyasia",
        "Nyla",
        "Nynette",
        "Odalys",
        "Odeletta",
        "Odelette",
        "Odetta",
        "Odette",
        "Odila",
        "Odile",
        "Odilia",
        "Olave",
        "Olga",
        "Olive",
        "Olivia",
        "Ollie",
        "Olva",
        "Olympe",
        "Olympia",
        "Olympie",
        "Oola",
        "Ophelia",
        "Ophelie",
        "Orane",
        "Orania",
        "Oriel",
        "Orla",
        "Orlanda",
        "Orlande",
        "Orlena",
        "Orlene",
        "Orlina",
        "Ornella",
        "Orsina",
        "Orsine",
        "Orsola",
        "Orsolya",
        "Ortelia",
        "Orva",
        "Ottilia",
        "Ottilie",
        "Oxana",
        "Page",
        "Paige",
        "Palma",
        "Palmiera",
        "Palmira",
        "Palmyra",
        "Paloma",
        "Pamela",
        "Pamelina",
        "Pandora",
        "Pansy",
        "Paola",
        "Paris",
        "Parker",
        "Parnella",
        "Pascala",
        "Pascale",
        "Pascaline",
        "Pasclina",
        "Patience",
        "Patrice",
        "Patricia",
        "Patrizia",
        "Paula",
        "Pauletta",
        "Paulette",
        "Paulina",
        "Pauline",
        "Pawla",
        "Payton",
        "Pearl",
        "Peggy",
        "Penelope",
        "Penny",
        "Pensee",
        "Pepi",
        "Perla",
        "Petra",
        "Peyton",
        "Philina",
        "Philine",
        "Philippa",
        "Philippe",
        "Philippina",
        "Philippine",
        "Phillipa",
        "Philomela",
        "Philomele",
        "Philomena",
        "Philomene",
        "Phinchen",
        "Phoebe",
        "Pia",
        "Pia-Marie",
        "Piera",
        "Pierretta",
        "Pierrette",
        "Pilar",
        "Piper",
        "Pleasance",
        "Poppy",
        "Precious",
        "Presley",
        "Princess",
        "Prisca",
        "Priscila",
        "Priscilla",
        "Priska",
        "Priszilla",
        "Prunella",
        "Prunellie",
        "Pyper",
        "Queena",
        "Quendolin",
        "Questa",
        "Quinn",
        "Rabea",
        "Rabia",
        "Rachael",
        "Rachel",
        "Rachele",
        "Rachelle",
        "Rachil",
        "Radella",
        "Radmila",
        "Radmilla",
        "Radomila",
        "Raegan",
        "Raffaela",
        "Rahel",
        "Raina",
        "Raison",
        "Raissa",
        "Rama",
        "Ramona",
        "Ramonda",
        "Raphaela",
        "Raphaele",
        "Raquel",
        "Ratna",
        "Raven",
        "Raymonda",
        "Raymonde",
        "Rayna",
        "Rea",
        "Reagan",
        "Reanna",
        "Rebeca",
        "Rebecca",
        "Rebekah",
        "Rebekka",
        "Recha",
        "Reese",
        "Regan",
        "Regina",
        "Regine",
        "Regula",
        "Reilly",
        "Reina",
        "Reine",
        "Relyea",
        "Renata",
        "Renate",
        "Rene",
        "Renee",
        "Reyna",
        "Rhea",
        "Rhiannon",
        "Ria",
        "Riana",
        "Rianna",
        "Rica",
        "Ricarda",
        "Richarda",
        "Richelle",
        "Rickie",
        "Ricky",
        "Rieke",
        "Rikchen",
        "Rike",
        "Riley",
        "Rilla",
        "Rille",
        "Rillette",
        "Rita",
        "Riva",
        "Rive",
        "Riya",
        "Ro",
        "Robbin",
        "Roberta",
        "Roberte",
        "Robertina",
        "Robin",
        "Robina",
        "Robine",
        "Robinetta",
        "Robinette",
        "Robyn",
        "Rocio",
        "Roddie",
        "Roddy",
        "Roderica",
        "Rodericka",
        "Roesia",
        "Rohais",
        "Roial",
        "Rola",
        "Rolanda",
        "Rolande",
        "Romaine",
        "Romana",
        "Romhilda",
        "Romhilde",
        "Romilda",
        "Romilde",
        "Romy",
        "Ronalda",
        "Ronalde",
        "Ronja",
        "Ronnie",
        "Ronny",
        "Rosa",
        "Rosalba",
        "Rosalie",
        "Rosalinde",
        "Rosamonde",
        "Rosamunde",
        "Rosanna",
        "Rose",
        "Rosegrethe",
        "Rosella",
        "Rosellina",
        "Rosemarie",
        "Rosemary",
        "Rosi",
        "Rosina",
        "Rosine",
        "Rosita",
        "Roswita",
        "Roswitha",
        "Roterica",
        "Roux",
        "Rownan",
        "Roxana",
        "Roxane",
        "Roxanne",
        "Roya",
        "Royale",
        "Rubie",
        "Ruby",
        "Rudella",
        "Rudelle",
        "Ruperta",
        "Rut",
        "Ruth",
        "Ryan",
        "Ryann",
        "Rylee",
        "Ryleigh",
        "Rylie",
        "Sabina",
        "Sabine",
        "Sabrina",
        "Sade",
        "Sadie",
        "Sage",
        "Sahra",
        "Saige",
        "Salene",
        "Sally",
        "Salma",
        "Salome",
        "Salvina",
        "Salwa",
        "Samantha",
        "Samara",
        "Samira",
        "Sandra",
        "Sandria",
        "Sandrina",
        "Sandrine",
        "Sandy",
        "Sanetra",
        "Sanne",
        "Saphira",
        "Sara",
        "Sarah",
        "Sarahi",
        "Sarai",
        "Sarina",
        "Sascha",
        "Sasha",
        "Saskia",
        "Sasna",
        "Satin",
        "Savana",
        "Savanah",
        "Savanna",
        "Savannah",
        "Saxona",
        "Scarlet",
        "Scarlett",
        "Searlait",
        "Selby",
        "Selden",
        "Seldon",
        "Selena",
        "Selene",
        "Selima",
        "Selina",
        "Selma",
        "Selwin",
        "Selwyn",
        "Serafin",
        "Serafina",
        "Seraphin",
        "Seraphina",
        "Seraphine",
        "Serena",
        "Serenity",
        "Serfine",
        "Serhilda",
        "Serhilde",
        "Serilda",
        "Serilde",
        "Shakira",
        "Shalina",
        "Shalyna",
        "Shana",
        "Shandy",
        "Shania",
        "Shanice",
        "Shaniya",
        "Shannon",
        "Shantala",
        "Shanton",
        "Sharla",
        "Sharleen",
        "Sharlene",
        "Sharon",
        "Shawna",
        "Shayla",
        "Shaylee",
        "Shayna",
        "Shea",
        "Sheila",
        "Shelby",
        "Sherey",
        "Sherlie",
        "Sheryl",
        "Sheyla",
        "Shir",
        "Shirl",
        "Shirlee",
        "Shirleen",
        "Shirleigh",
        "Shirley",
        "Shreya",
        "Shurl",
        "Shurlie",
        "Shyann",
        "Shyanne",
        "Sibilla",
        "Sibille",
        "Sibyla",
        "Sibylla",
        "Sibylle",
        "Sidney",
        "Sidonia",
        "Sidonie",
        "Sienna",
        "Sierra",
        "Sigfreda",
        "Sigfrieda",
        "Sigfriede",
        "Sigrid",
        "Sigrun",
        "Silana",
        "Silja",
        "Silka",
        "Silke",
        "Silvana",
        "Silvetta",
        "Silvette",
        "Silvia",
        "Silvina",
        "Simona",
        "Simone",
        "Simonetta",
        "Simonette",
        "Sina",
        "Sinja",
        "Sinje",
        "Sissi",
        "Sky",
        "Skye",
        "Skyla",
        "Skylar",
        "Skyler",
        "Slainie",
        "Slania",
        "Slanie",
        "Sofia",
        "Sofie",
        "Solaina",
        "Solaine",
        "Solange",
        "Solvig",
        "Sonia",
        "Sonja",
        "Sonya",
        "Sophia",
        "Sophie",
        "Soreen",
        "Sorren",
        "Stacey",
        "Stacy",
        "Stefana",
        "Stefania",
        "Stefanie",
        "Steffi",
        "Stella",
        "Stephania",
        "Stephanie",
        "Stephany",
        "Stina",
        "Stine",
        "Storm",
        "Storme",
        "Stormie",
        "Stormy",
        "Suleima",
        "Summer",
        "Susan",
        "Susana",
        "Susane",
        "Susanna",
        "Susanne",
        "Suse",
        "Susen",
        "Susi",
        "Susie",
        "Suzanne",
        "Suzette",
        "Suzy",
        "Svana",
        "Svea",
        "Svenja",
        "Swantje",
        "Swea",
        "Swenja",
        "Sydnee",
        "Sydney",
        "Sydni",
        "Sydnie",
        "Sylke",
        "Sylvia",
        "Sylvie",
        "Tabea",
        "Tabitha",
        "Tait",
        "Taite",
        "Taitum",
        "Talia",
        "Talida",
        "Talika",
        "Taliyah",
        "Tallis",
        "Tamar",
        "Tamara",
        "Tamia",
        "Tamira",
        "Tania",
        "Tanita",
        "Taniya",
        "Tanja",
        "Tanjura",
        "Tanya",
        "Tara",
        "Tara-Ann",
        "Taryn",
        "Tat",
        "Tatiana",
        "Tatjana",
        "Tatum",
        "Tatyana",
        "Tavia",
        "Taya",
        "Tayler",
        "Taylor",
        "Tayte",
        "Teagan",
        "Teite",
        "Tempeste",
        "Teresa",
        "Terese",
        "Tereza",
        "Tess",
        "Tessa",
        "Thabita",
        "Thalia",
        "Thea",
        "Theodora",
        "Theres",
        "Theresa",
        "Therese",
        "Theresia",
        "Theresina",
        "Thery",
        "Thilde",
        "Thistle",
        "Tia",
        "Tiana",
        "Tianna",
        "Tiara",
        "Tibelda",
        "Tierra",
        "Tiffanie",
        "Tiffany",
        "Tiffney",
        "Tilda",
        "Tilly",
        "Timea",
        "Tina",
        "Tinchen",
        "Tine",
        "Tinette",
        "Tizia",
        "Tiziana",
        "Tokessa",
        "Toni",
        "Tonja",
        "Tori",
        "Tosca",
        "Toska",
        "Tracy",
        "Trine",
        "Trinetta",
        "Trinette",
        "Trinity",
        "Trista",
        "Tristan",
        "Trix",
        "Trixi",
        "Tru",
        "Trudchen",
        "Trude",
        "Trudel",
        "Trudi",
        "Trudie",
        "Trudy",
        "Tuesday",
        "Tyler",
        "Tyra",
        "Uda",
        "Udele",
        "Udella",
        "Udelle",
        "Uka",
        "Ula",
        "Ulita",
        "Ulitta",
        "Uljana",
        "Ulla",
        "Ulli",
        "Ulrica",
        "Ulrika",
        "Ulrike",
        "Ulva",
        "Undine",
        "Unique",
        "Urania",
        "Urith",
        "Ursel",
        "Ursina",
        "Ursine",
        "Ursula",
        "Urte",
        "Uschi",
        "Uta",
        "Ute",
        "Vafara",
        "Vala",
        "Valborga",
        "Valburga",
        "Valda",
        "Valentina",
        "Valentine",
        "Valeraine",
        "Valere",
        "Valeri",
        "Valeria",
        "Valeriana",
        "Valeriane",
        "Valerie",
        "Valerien",
        "Valeska",
        "Valida",
        "Vallerie",
        "Vanadis",
        "Vanesa",
        "Vanessa",
        "Vania",
        "Vanja",
        "Vanni",
        "Varinka",
        "Vedetta",
        "Velda",
        "Velma",
        "Veloy",
        "Veneta",
        "Venetia",
        "Venetta",
        "Venus",
        "Vera",
        "Verena",
        "Verona",
        "Verone",
        "Veronica",
        "Veronika",
        "Veronique",
        "Vicky",
        "Victoria",
        "Victorina",
        "Victorine",
        "Vignetta",
        "Vignette",
        "Viktoria",
        "Viktorin",
        "Viktorina",
        "Viktorine",
        "Villetta",
        "Villette",
        "Vina",
        "Vineta",
        "Vinka",
        "Viola",
        "Violet",
        "Violett",
        "Violetta",
        "Violette",
        "Viollette",
        "Virginia",
        "Virginie",
        "Vittoria",
        "Vivian",
        "Viviana",
        "Viviane",
        "Vivien",
        "Vivienne",
        "Voleta",
        "Voletta",
        "Vroni",
        "Walborga",
        "Walburg",
        "Walburga",
        "Walburge",
        "Walda",
        "Waldburg",
        "Walli",
        "Wally",
        "Walpurgis",
        "Waltraud",
        "Wanda",
        "Wandie",
        "Wandis",
        "Wanja",
        "Warda",
        "Warenka",
        "Welda",
        "Wencke",
        "Wenda",
        "Wendeline",
        "Wendy",
        "Wenke",
        "Whitney",
        "Wiba",
        "Wibeke",
        "Wibke",
        "Wiebke",
        "Wigberta",
        "Wileen",
        "Wilf",
        "Wilfiede",
        "Wilfreda",
        "Wilfreida",
        "Wilfrieda",
        "Wilhelma",
        "Wilhelmina",
        "Wilhelmine",
        "Willa",
        "Willow",
        "Wilma",
        "Wilona",
        "Winifred",
        "Winifrieda",
        "Winnie",
        "Winny",
        "Winola",
        "Winona",
        "Winter",
        "Xandra",
        "Xaveria",
        "Xaverine",
        "Xaviere",
        "Xavierra",
        "Xavierre",
        "Xena",
        "Xenia",
        "Ximena",
        "Xiomara",
        "Yadira",
        "Yamina",
        "Yara",
        "Yaren",
        "Yasmin",
        "Yasmina",
        "Yasmine",
        "Yazmin",
        "Yedda",
        "Yelena",
        "Yesenia",
        "Yessenia",
        "Yetta",
        "Ynes",
        "Ynez",
        "Yola",
        "Yoland",
        "Yolanda",
        "Yolande",
        "Yolanthe",
        "Yolonda",
        "Ysabel",
        "Yseult",
        "Yuliana",
        "Yuria",
        "Yvette",
        "Yvonna",
        "Yvonne",
        "Zaida",
        "Zaina",
        "Zara",
        "Zarah",
        "Zaria",
        "Zeider",
        "Zelda",
        "Zena",
        "Zenobia",
        "Zenzi",
        "Zerelda",
        "Zerla",
        "Zerlina",
        "Zerline",
        "Zilli",
        "Zina",
        "Zoe",
        "Zoey",
        "Zoie",
        "Zorra",
        "Zuri",
        "Zuria",
        "Zurie",
    ]

    rndTp = randnum(0, 4)
    rndSur = randnum(0, 11)

    # Surname
    for _ in range(10000):
        if surName == "":
            if rndSur == 0:
                rnd = randnum(0, len(nm9))
                rnd2 = randnum(0, len(nm10))
                rnd3 = randnum(0, len(nm11))
                rnd4 = randnum(0, len(nm10))
                rnd5 = randnum(0, len(nm12))
                surName = nm9[rnd] + nm10[rnd2] + nm11[rnd3] + nm10[rnd4] + nm12[rnd5]
            elif rndSur == 1:
                rnd = randnum(0, len(nm21))
                rnd2 = randnum(0, len(nm22))
                for _ in range(10000):
                    if rnd == rnd2:
                        rnd2 = randnum(0, len(nm22))
                        continue
                    else:
                        break
                surName = nm21[rnd] + nm22[rnd2]
            elif rndSur < 4:
                rnd = randnum(0, len(nm30))
                rnd2 = randnum(0, len(nm31))
                rnd5 = randnum(0, len(nm33))
                if rndSur == 2:
                    surName = nm30[rnd] + nm31[rnd2] + nm33[rnd5]
                else:
                    # rndSur == 3
                    rnd3 = randnum(0, len(nm32))
                    rnd4 = randnum(0, len(nm31))
                    surName = nm30[rnd] + nm31[rnd2] + nm32[rnd3] + nm31[rnd4] + nm33[rnd5]
            elif rndSur == 4:
                rnd = randnum(0, len(nm21))
                rnd2 = randnum(0, len(nm22))
                for _ in range(10000):
                    if rnd == rnd2:
                        rnd2 = randnum(0, len(nm22))
                        continue
                    else:
                        break
                surName = nm21[rnd] + nm22[rnd2]
            elif rndSur < 7:
                rnd = randnum(0, len(nm50))
                rnd2 = randnum(0, len(nm51))
                rnd3 = randnum(0, len(nm52))
                rnd4 = randnum(0, len(nm51))
                rnd5 = randnum(0, len(nm53))
                if rndSur == 5:
                    rnd6 = randnum(0, len(nm52))
                    rnd7 = randnum(0, len(nm51))
                    surName = nm50[rnd] + nm51[rnd2] + nm52[rnd3] + nm51[rnd4] + nm52[rnd6] + nm51[rnd7] + nm53[rnd5]
                else:
                    # rndSur == 6
                    surName = nm50[rnd] + nm51[rnd2] + nm52[rnd3] + nm51[rnd4] + nm53[rnd5]
            elif rndSur < 9:
                rnd = randnum(0, len(nm62))
                rnd2 = randnum(0, len(nm63))
                rnd3 = randnum(0, len(nm64))
                rnd4 = randnum(0, len(nm63))
                rnd5 = randnum(0, len(nm64))
                rnd6 = randnum(0, len(nm63))
                if rndSur == 7:
                    rnd7 = randnum(0, len(nm64))
                    rnd8 = randnum(0, len(nm63))
                    surName = nm62[rnd] + nm63[rnd2] + nm64[rnd3] + nm63[rnd4] + nm64[rnd5] + nm63[rnd6] + nm64[rnd7] + nm63[rnd8]
            elif rndSur == 9:
                rnd = randnum(0, len(nm70))
                rnd2 = randnum(0, len(nm71))
                rnd3 = randnum(0, len(nm72))
                if rnd3 < 3:
                    for _ in range(10000):
                        if rnd < 3:
                            rnd = randnum(0, len(nm70))
                            continue
                        else:
                            break
                surName = nm70[rnd] + nm71[rnd2] + nm72[rnd3]
            else:
                # rndSur == 10
                rnd = randnum(0, len(nm80))
                rnd2 = randnum(0, len(nm14))
                rnd3 = randnum(0, len(nm81))
                rnd4 = randnum(0, len(nm14))
                rnd6 = randnum(0, len(nm81))
                rnd7 = randnum(0, len(nm14))
                rnd5 = randnum(0, len(nm82))
                surName = nm80[rnd] + nm14[rnd2] + nm81[rnd3] + nm14[rnd4] + nm81[rnd6] + nm14[rnd7] + nm82[rnd5]
            surName = testSwear(surName)
            continue
        else:
            break

    if rndTp == 0:
        # Male
        rndMas = randnum(0, 13)
        for _ in range(10000):
            if humanName == "":
                if rndMas == 0:
                    rnd = randnum(0, len(nm1))
                    rnd2 = randnum(0, len(nm2))
                    rnd3 = randnum(0, len(nm3))
                    rnd4 = randnum(0, len(nm2))
                    rnd5 = randnum(0, len(nm4))
                    humanName = nm1[rnd] + nm2[rnd2] + nm3[rnd3] + nm2[rnd4] + nm4[rnd5]
                elif rndMas == 1:
                    rnd = randnum(0, len(nm13))
                    rnd2 = randnum(0, len(nm14))
                    rnd3 = randnum(0, len(nm15))
                    rnd4 = randnum(0, len(nm14))
                    rnd5 = randnum(0, len(nm16))
                    if rnd5 < 3:
                        rnd3 = 0
                    else:
                        for _ in range(10000):
                            if rnd3 == 0:
                                rnd3 = randnum(0, len(nm15))
                                continue
                            else:
                                break
                    humanName = nm13[rnd] + nm14[rnd2] + nm15[rnd3] + nm14[rnd4] + nm16[rnd5]
                elif rndMas < 4:
                    rnd = randnum(0, len(nm23))
                    rnd2 = randnum(0, len(nm24))
                    rnd5 = randnum(0, len(nm26))
                    if rndMas == 2:
                        rnd3 = randnum(0, len(nm25))
                        rnd4 = randnum(0, len(nm24))
                        humanName = nm23[rnd] + nm24[rnd2] + nm25[rnd3] + nm24[rnd4] + nm26[rnd5]
                    else:
                        # rndMas == 3
                        humanName = nm23[rnd] + nm24[rnd2] + nm26[rnd5]
                elif rndMas < 6:
                    rnd = randnum(0, len(nm34))
                    rnd2 = randnum(0, len(nm35))
                    rnd5 = randnum(0, len(nm37))
                    if rndMas == 4:
                        rnd3 = randnum(0, len(nm36))
                        rnd4 = randnum(0, len(nm35))
                        humanName = nm34[rnd] + nm35[rnd2] + nm36[rnd3] + nm35[rnd4] + nm37[rnd5]
                    else:
                        # rndMas == 5
                        humanName = nm34[rnd] + nm35[rnd2] + nm37[rnd5]
                elif rndMas < 8:
                    rnd = randnum(0, len(nm43))
                    rnd2 = randnum(0, len(nm44))
                    rnd3 = randnum(0, len(nm45))
                    rnd4 = randnum(0, len(nm44))
                    rnd5 = randnum(0, len(nm46))
                    if rndMas == 6:
                        rnd6 = randnum(0, len(nm45))
                        rnd7 = randnum(0, len(nm44))
                        humanName = nm43[rnd] + nm44[rnd2] + nm45[rnd3] + nm44[rnd4] + nm45[rnd6] + nm44[rnd7] + nm46[rnd5]
                    else:
                        # rndMas == 7
                        humanName = nm43[rnd] + nm44[rnd2] + nm45[rnd3] + nm44[rnd4] + nm46[rnd5]
                elif rndMas < 10:
                    rnd = randnum(0, len(nm54))
                    rnd2 = randnum(0, len(nm55))
                    rnd3 = randnum(0, len(nm56))
                    rnd4 = randnum(0, len(nm55))
                    rnd5 = randnum(0, len(nm57))
                    if rndMas == 8:
                        rnd6 = randnum(0, len(nm56))
                        rnd7 = randnum(0, len(nm55))
                        humanName = nm54[rnd] + nm55[rnd2] + nm56[rnd3] + nm55[rnd4] + nm56[rnd6] + nm55[rnd7] + nm57[rnd5]
                    else:
                        # rndMas == 9
                        humanName = nm54[rnd] + nm55[rnd2] + nm56[rnd3] + nm55[rnd4] + nm57[rnd5]
                elif rndMas == 10:
                    rnd = randnum(0, len(nm65))
                    rnd2 = randnum(0, len(nm66))
                    rnd3 = randnum(0, len(nm67))
                    if rnd3 < 3:
                        for _ in range(10000):
                            if rnd < 2:
                                rnd = randnum(0, len(nm65))
                                continue
                            else:
                                break
                    humanName = nm65[rnd] + nm66[rnd2] + nm67[rnd3]
                else:
                    rnd = randnum(0, len(nm73))
                    rnd2 = randnum(0, len(nm74))
                    rnd3 = randnum(0, len(nm75))
                    rnd4 = randnum(0, len(nm74))
                    rnd5 = randnum(0, len(nm76))
                    if rndMas == 11:
                        rnd6 = randnum(0, len(nm75))
                        rnd7 = randnum(0, len(nm74))
                        humanName = nm73[rnd] + nm74[rnd2] + nm75[rnd3] + nm74[rnd4] + nm75[rnd6] + nm74[rnd7] + nm76[rnd5]
                    else:
                        # rndMas == 12
                        humanName = nm73[rnd] + nm74[rnd2] + nm75[rnd3] + nm74[rnd4] + nm76[rnd5]
                humanName = testSwear(humanName)
                continue
            else:
                break
        humanName = humanName.capitalize() + " " + surName.capitalize()
    elif rndTp == 1:
        # Female
        rndFem = randnum(0, 15)
        for _ in range(10000):
            if humanName == "":
                if rndFem < 2:
                    rnd = randnum(0, len(nm5))
                    rnd2 = randnum(0, len(nm6))
                    rnd3 = randnum(0, len(nm7))
                    rnd4 = randnum(0, len(nm6))
                    rnd5 = randnum(0, len(nm8))
                    if rndFem == 0:
                        rnd6 = randnum(0, len(nm7))
                        rnd7 = randnum(0, len(nm6))
                        humanName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm6[rnd4] + nm7[rnd6] + nm6[rnd7] + nm8[rnd5]
                    else:
                        # rndFem == 1
                        humanName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm6[rnd4] + nm8[rnd5]
                elif rndFem < 4:
                    rnd = randnum(0, len(nm17))
                    rnd2 = randnum(0, len(nm18))
                    rnd3 = randnum(0, len(nm19))
                    rnd4 = randnum(0, len(nm18))
                    rnd5 = randnum(0, len(nm20))
                    if rndFem == 2:
                        rnd6 = randnum(0, len(nm19))
                        rnd7 = randnum(0, len(nm18))
                        humanName = nm17[rnd] + nm18[rnd2] + nm19[rnd3] + nm18[rnd4] + nm19[rnd6] + nm18[rnd7] + nm20[rnd5]
                    else:
                        # rndFem == 3
                        humanName = nm17[rnd] + nm18[rnd2] + nm19[rnd3] + nm18[rnd4] + nm20[rnd5]
                elif rndFem < 6:
                    rnd = randnum(0, len(nm27))
                    rnd2 = randnum(0, len(nm24))
                    rnd5 = randnum(0, len(nm29))
                    if rndFem == 4:
                        rnd3 = randnum(0, len(nm28))
                        rnd4 = randnum(0, len(nm24))
                        humanName = nm27[rnd] + nm24[rnd2] + nm28[rnd3] + nm24[rnd4] + nm29[rnd5]
                    else:
                        # rndFem == 5
                        humanName = nm27[rnd] + nm24[rnd2] + nm29[rnd5]
                elif rndFem < 8:
                    rnd = randnum(0, len(nm38))
                    rnd2 = randnum(0, len(nm24))
                    rnd3 = randnum(0, len(nm39))
                    rnd4 = randnum(0, len(nm24))
                    rnd5 = randnum(0, len(nm40))
                    if rndFem == 6:
                        rnd6 = randnum(0, len(nm39))
                        rnd7 = randnum(0, len(nm24))
                        humanName = nm38[rnd] + nm24[rnd2] + nm39[rnd3] + nm24[rnd4] + nm39[rnd6] + nm24[rnd7] + nm40[rnd5]
                    else:
                        # rndFem == 7
                        humanName = nm38[rnd] + nm24[rnd2] + nm39[rnd3] + nm24[rnd4] + nm40[rnd5]
                elif rndFem < 10:
                    rnd = randnum(0, len(nm47))
                    rnd2 = randnum(0, len(nm14))
                    rnd3 = randnum(0, len(nm48))
                    rnd4 = randnum(0, len(nm14))
                    rnd5 = randnum(0, len(nm49))
                    if rndFem == 8:
                        rnd6 = randnum(0, len(nm48))
                        rnd7 = randnum(0, len(nm14))
                        humanName = nm47[rnd] + nm14[rnd2] + nm48[rnd3] + nm14[rnd4] + nm48[rnd6] + nm14[rnd7] + nm49[rnd5]
                    else:
                        # rndFem == 9
                        humanName = nm47[rnd] + nm14[rnd2] + nm48[rnd3] + nm14[rnd4] + nm49[rnd5]
                elif rndFem < 12:
                    rnd = randnum(0, len(nm58))
                    rnd2 = randnum(0, len(nm59))
                    rnd3 = randnum(0, len(nm60))
                    rnd4 = randnum(0, len(nm59))
                    rnd5 = randnum(0, len(nm61))
                    if rndFem == 10:
                        rnd6 = randnum(0, len(nm60))
                        rnd7 = randnum(0, len(nm59))
                        humanName = nm58[rnd] + nm59[rnd2] + nm60[rnd3] + nm59[rnd4] + nm60[rnd6] + nm59[rnd7] + nm61[rnd5]
                    else:
                        # rndFem == 11
                        humanName = nm58[rnd] + nm59[rnd2] + nm60[rnd3] + nm59[rnd4] + nm61[rnd5]
                elif rndFem == 12:
                    rnd = randnum(0, len(nm68))
                    rnd2 = randnum(0, len(nm69))
                    humanName = nm68[rnd] + nm69[rnd2]
                else:
                    rnd = randnum(0, len(nm77))
                    rnd2 = randnum(0, len(nm78))
                    rnd3 = randnum(0, len(nm79))
                    rnd4 = randnum(0, len(nm77))
                    if rndFem == 13:
                        rnd6 = randnum(0, len(nm79))
                        rnd7 = randnum(0, len(nm77))
                        humanName = nm77[rnd] + nm78[rnd2] + nm79[rnd3] + nm77[rnd4] + nm79[rnd6] + nm77[rnd7]
                    else:
                        # rndFem == 14
                        humanName = nm77[rnd] + nm78[rnd2] + nm79[rnd3] + nm77[rnd4]
                humanName = testSwear(humanName)
                continue
            else:
                break
        humanName = humanName.capitalize() + " " + surName.capitalize()
    elif rndTp == 2:
        rnd = randnum(0, len(nm83))
        humanName = nm83[rnd].capitalize() + " " + surName.capitalize()
    else:
        rnd = randnum(0, len(nm84))
        humanName = nm84[rnd].capitalize() + " " + surName.capitalize()
    return humanName

def dwarf():
    dwarfName = ""
    surName = ""
    nm1 = ["Ad", "Am", "Arm", "Baer", "Daer", "Bal", "Ban", "Bar", "Bel", "Ben", "Ber", "Bhal", "Bhar", "Bhel", "Bram", "Bran", "Brom", "Brum", "Bun", "Dal", "Dar", "Dol", "Dul", "Eb", "Em", "Erm", "Far", "Gal", "Gar", "Ger", "Gim", "Gral", "Gram", "Gran", "Grem", "Gren", "Gril", "Gry", "Gul", "Har", "Hjal", "Hjol", "Hjul", "Hor", "Hul", "Hur", "Kar", "Khar", "Kram", "Krom", "Krum", "Mag", "Mal", "Mel", "Mor", "Muir", "Mur", "Rag", "Ran", "Reg", "Rot", "Thal", "Thar", "Thel", "Ther", "Tho", "Thor", "Thul", "Thur", "Thy", "Tor", "Ty", "Um", "Urm", "Von"]
    nm2 = ["adin", "bek", "brek", "dahr", "dain", "dal", "dan", "dar", "dek", "dir", "dohr", "dor", "drak", "dram", "dren", "drom", "drum", "drus", "duhr", "dur", "dus", "garn", "gram", "gran", "grim", "grom", "gron", "grum", "grun", "gurn", "gus", "iggs", "kahm", "kam", "kohm", "kom", "kuhm", "kum", "kyl", "man", "mand", "mar", "mek", "miir", "min", "mir", "mond", "mor", "mun", "mund", "mur", "mus", "myl", "myr", "nam", "nar", "nik", "nir", "nom", "num", "nur", "nus", "nyl", "rak", "ram", "ren", "rig", "rigg", "rik", "rim", "rom", "ron", "rum", "rus", "ryl", "tharm", "tharn", "thran", "thrum", "thrun"]
    nm3 = ["An", "Ar", "Baer", "Bar", "Bel", "Belle", "Bon", "Bonn", "Braen", "Bral", "Bralle", "Bran", "Bren", "Bret", "Bril", "Brille", "Brol", "Bron", "Brul", "Bryl", "Brylle", "Bryn", "Bryt", "Byl", "Bylle", "Daer", "Dear", "Dim", "Ed", "Ein", "El", "Gem", "Ger", "Gwan", "Gwen", "Gwin", "Gwyn", "Gym", "Ing", "Jen", "Jenn", "Jin", "Jyn", "Kait", "Kar", "Kat", "Kath", "Ket", "Las", "Lass", "Les", "Less", "Lyes", "Lys", "Lyss", "Maer", "Maev", "Mar", "Mis", "Mist", "Myr", "Mys", "Myst", "Naer", "Nal", "Nas", "Nass", "Nes", "Nis", "Nys", "Raen", "Ran", "Red", "Reyn", "Run", "Ryn", "Sar", "Sol", "Tas", "Taz", "Tis", "Tish", "Tiz", "Tor", "Tys", "Tysh"]
    nm4 = ["belle", "bera", "delle", "deth", "dielle", "dille", "dish", "dora", "dryn", "dyl", "giel", "glia", "glian", "gwyn", "la", "leen", "leil", "len", "lin", "linn", "lyl", "lyn", "lynn", "ma", "mera", "mora", "mura", "myl", "myla", "nan", "nar", "nas", "nera", "nia", "nip", "nis", "niss", "nora", "nura", "nyl", "nys", "nyss", "ra", "ras", "res", "ri", "ria", "rielle", "rin", "ris", "ros", "ryl", "ryn", "sael", "selle", "sora", "syl", "thel", "thiel", "tin", "tyn", "va", "van", "via", "vian", "waen", "win", "wyn", "wynn"]
    nm5 = ["b", "br", "c", "d", "dr", "f", "g", "gl", "gr", "h", "l", "m", "r", "str", "t", "thr"]
    nm6 = ["ae", "a", "e", "o", "u", "a", "e", "o", "u", "a", "e", "o", "u", "a", "e", "o", "u"]
    nm7 = ["br", "d", "fd", "h", "k", "lbr", "ld", "ll", "mn", "ng", "nh", "nk", "r", "rd", "rth", "tg", "thg", "zz"]
    nm8 = ["a", "e", "i", "o", "u"]
    nm9 = ["g", "h", "k", "n", "r", "v"]
    nm10 = ["a", "a", "e", "e", "i", "o", "u"]
    nm11 = ["ck", "g", "hk", "hr", "k", "ln", "m", "n", "nn", "r", "rk", "rr", "rt"]
    nm12 = ["battle", "big", "black", "blood", "bold", "boulder", "brave", "brawn", "bright", "broad", "bronze", "brood", "burrow", "cold", "dark", "deep", "drunk", "even", "ever", "fire", "first", "flint", "frost", "frozen", "giant", "goblin", "gold", "golden", "gray", "great", "half", "hammer", "hard", "iron", "keen", "kind", "last", "light", "loud", "mad", "marble", "might", "molten", "mountain", "silver", "smug", "stark", "steel", "stern", "stone", "storm", "stout", "strong", "thunder", "troll", "true", "wild"]
    nm13 = ["ale", "anvil", "axe", "back", "bane", "beard", "belch", "belt", "blade", "bleeder", "blood", "boot", "boots", "bottom", "braid", "branch", "breaker", "breath", "brow", "buster", "delver", "eye", "eyes", "fall", "feast", "finder", "fist", "fists", "flight", "force", "forge", "found", "front", "fury", "gift", "grace", "grip", "guard", "hammer", "hand", "handle", "head", "heart", "helm", "hold", "horn", "kin", "kind", "kith", "mane", "mantle", "mask", "might", "pass", "past", "pride", "reach", "rest", "roar", "rock", "shaper", "shield", "song", "stand", "stone", "storm", "strike", "tale", "tankard", "ward"]

    rndSur = randnum(0, 2)
    rndTp = randnum(0, 2)

    if rndTp == 0:
        # Male
        for _ in range(10000):
            if dwarfName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                dwarfName = nm1[rnd] + nm2[rnd2]
                dwarfName = testSwear(dwarfName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if dwarfName == "":
                rnd = randnum(0, len(nm3))
                rnd2 = randnum(0, len(nm4))
                dwarfName = nm3[rnd] + nm4[rnd2]
                dwarfName = testSwear(dwarfName)
                continue
            else:
                break

    if rndSur == 0:
        # Elegant Surname
        rnd = randnum(0, len(nm12))
        rnd2 = randnum(0, len(nm13))
        for _ in range(10000):
            if nm12[rnd] == nm13[rnd2]:
                rnd2 = randnum(0, len(nm13))
                continue
            else:
                break
        surName = nm12[rnd] + nm13[rnd2]
    else:
        # Rando Surname
        nTp = randnum(0, 2)
        rnd = randnum(0, len(nm5))
        rnd2 = randnum(0, len(nm6))
        rnd3 = randnum(0, len(nm7))
        rnd4 = randnum(0, len(nm10))
        rnd5 = randnum(0, len(nm11))
        if nTp == 0:
            for _ in range(10000):
                if nm11[rnd5] == nm7[rnd3] and nm7[rnd3] == nm5[rnd]:
                    rnd3 = randnum(0, len(nm7))
                    continue
                else:
                    break
            surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm10[rnd4] + nm11[rnd5]
        else:
            rnd6 = randnum(0, len(nm8))
            rnd7 = randnum(0, len(nm9))
            for _ in range(10000):
                if nm11[rnd5] == nm9[rnd7] or nm9[rnd7] == nm7[rnd3]:
                    rnd7 = randnum(0, len(nm9))
                    continue
                else:
                    break
            surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm8[rnd6] + nm9[rnd7] + nm10[rnd4] + nm11[rnd5]

    surName = testSwear(surName)

    return dwarfName.capitalize() + " " + surName.capitalize()

def gnome():
    gnomeName = ""
    surName = ""
    nm1 = ["Al", "Ari", "Bil", "Bri", "Cal", "Cor", "Dav", "Dor", "Eni", "Er", "Far", "Fel", "Ga", "Gra", "His", "Hor", "Ian", "Ipa", "Je", "Jor", "Kas", "Kel", "Lan", "Lo", "Man", "Mer", "Nes", "Ni", "Or", "Oru", "Pana", "Po", "Qua", "Quo", "Ras", "Ron", "Sa", "Sal", "Sin", "Tan", "To", "Tra", "Um", "Uri", "Val", "Vor", "War", "Wil", "Wre", "Xal", "Xo", "Ye", "Yos", "Zan", "Zil"]
    nm2 = ["bar", "ben", "bis", "corin", "cryn", "don", "dri", "fan", "fiz", "gim", "grim", "hik", "him", "ji", "jin", "kas", "kur", "len", "lin", "min", "mop", "morn", "nan", "ner", "ni", "pip", "pos", "rick", "ros", "rug", "ryn", "ser", "ston", "tix", "tor", "ver", "vyn", "win", "wor", "xif", "xim", "ybar", "yur", "ziver", "zu"]
    nm3 = ["Alu", "Ari", "Ban", "Bree", "Car", "Cel", "Daphi", "Do", "Eili", "El", "Fae", "Fen", "Fol", "Gal", "Gren", "Hel", "Hes", "Ina", "Iso", "Jel", "Jo", "Klo", "Kri", "Lil", "Lori", "Min", "My", "Ni", "Ny", "Oda", "Or", "Phi", "Pri", "Qi", "Que", "Re", "Rosi", "Sa", "Sel", "Spi", "Ta", "Tifa", "Tri", "Ufe", "Uri", "Ven", "Vo", "Wel", "Wro", "Xa", "Xyro", "Ylo", "Yo", "Zani", "Zin"]
    nm4 = ["bi", "bys", "celi", "ci", "dira", "dysa", "fi", "fyx", "gani", "gyra", "hana", "hani", "kasys", "kini", "la", "li", "lin", "lys", "mila", "miphi", "myn", "myra", "na", "niana", "noa", "nove", "phina", "pine", "qaryn", "qys", "rhana", "roe", "sany", "ssa", "sys", "tina", "tra", "wyn", "wyse", "xi", "xis", "yaris", "yore", "za", "zyre"]
    nm5 = ["", "", "b", "d", "f", "g", "h", "l", "m", "n", "p", "r", "s", "t", "w", "z"]
    nm6 = ["ae", "oo", "ee", "aa", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u", "a", "e", "i", "o", "u"]
    nm7 = ["bbl", "ckl", "f", "ff", "ggl", "kk", "lb", "lk", "ln", "lr", "lw", "mb", "ml", "mm", "mml", "mp", "mpl", "nb", "ng", "ngg", "nn", "np", "p", "pl", "pp", "r", "rc", "rg", "rk", "rn", "rr", "s", "sg", "sgr"]
    nm8 = ["a", "a", "e", "e", "i", "o", "u"]
    nm9 = ["b", "d", "n", "r", "s", "t"]
    nm10 = ["a", "e", "e", "i", "o"]
    nm11 = ["", "", "ck", "g", "l", "l", "ll", "mp", "n", "n", "n", "nd", "r", "r", "rs", "s", "s"]
    nm12 = ["bl", "bbl", "ckl", "dl", "ddl", "ggl", "gl", "mbl", "mpl", "pl", "ppl"]
    nm13 = ["babble", "baffle", "bellow", "belly", "berry", "billow", "bold", "boon", "brass", "brisk", "broad", "bronze", "cobble", "copper", "dapple", "dark", "dazzle", "deep", "fapple", "fiddle", "fine", "fizzle", "flicker", "fluke", "glitter", "gobble", "gold", "iron", "kind", "last", "light", "long", "loud", "lucky", "marble", "pale", "pebble", "puddle", "quick", "quiet", "quill", "shadow", "short", "silver", "single", "sparkle", "spring", "squiggle", "stark", "stout", "strong", "swift", "thistle", "thunder", "tinker", "toggle", "tossle", "true", "twin", "twist", "waggle", "whistle", "wiggle", "wild", "wobble"]
    nm14 = ["back", "badge", "belch", "bell", "belt", "bit", "bloc", "bonk", "boot", "boots", "bottom", "braid", "branch", "brand", "case", "cheek", "cloak", "collar", "cord", "craft", "crag", "diggles", "drop", "dust", "dwadle", "fall", "feast", "fen", "fern", "field", "firn", "flight", "flow", "front", "gem", "gift", "grace", "guard", "hand", "heart", "helm", "hide", "hold", "kind", "ligt", "lob", "mane", "mantle", "mask", "patch", "peak", "pitch", "pocket", "reach", "rest", "river", "rock", "shield", "song", "span", "spark", "spell", "spring", "stamp", "stand", "stitch", "stone", "thread", "top", "trick", "twist", "wander"]

    rndSur = randnum(0, 2)
    rndTp = randnum(0, 2)

    if rndTp == 0:
        # Male
        for _ in range(10000):
            if gnomeName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                gnomeName = nm1[rnd] + nm2[rnd2]
                gnomeName = testSwear(gnomeName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if gnomeName == "":
                rnd = randnum(0, len(nm3))
                rnd2 = randnum(0, len(nm4))
                gnomeName = nm3[rnd] + nm4[rnd2]
                gnomeName = testSwear(gnomeName)
                continue
            else:
                break

    if rndSur == 0:
        # Elegant Surname
        rnd = randnum(0, len(nm13))
        rnd2 = randnum(0, len(nm14))
        for _ in range(10000):
            if nm13[rnd] == nm14[rnd2]:
                rnd2 = randnum(0, len(nm14))
                continue
            else:
                break
        surName = nm13[rnd] + nm14[rnd2]
    else:
        # Rando Surname
        nTp = randnum(0, 4)
        if nTp == 0:
            rnd = randnum(0, len(nm5))
            rnd2 = randnum(0, len(nm10))
            rnd3 = randnum(0, len(nm12))
            rnd4 = randnum(0, len(nm5))
            rnd5 = randnum(0, len(nm10))
            for _ in range(10000):
                if nm5[rnd] == "":
                    rnd = randnum(0, len(nm5))
                    continue
                else:
                    break

            for _ in range(10000):
                if nm5[rnd4] == "":
                    rnd4 = randnum(0, len(nm5))
                    continue
                else:
                    break
            surName = nm5[rnd] + nm10[rnd2] + nm12[rnd3] + "e" + nm5[rnd4] + nm10[rnd5] + nm12[rnd3] + "e"
        else:
            rnd = randnum(0, len(nm5))
            rnd2 = randnum(0, len(nm6))
            rnd3 = randnum(0, len(nm7))
            rnd4 = randnum(0, len(nm8))
            rnd5 = randnum(0, len(nm11))
            if nTp == 1:
                for _ in range(10000):
                    if nm7[rnd3] == nm5[rnd] or nm7[rnd3] == nm11[rnd5]:
                        rnd4 = randnum(0, len(nm5))
                        continue
                    else:
                        break
                surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm8[rnd4] + nm11[rnd5]
            else:
                rnd6 = randnum(0, len(nm9))
                rnd7 = randnum(0, len(nm10))
                for _ in range(10000):
                    if nm7[rnd3] == nm9[rnd6] or nm9[rnd6] == nm11[rnd5]:
                        rnd6 = randnum(0, len(nm9))
                        continue
                    else:
                        break
                if nTp == 2:
                    surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm8[rnd4] + nm9[rnd6] + nm10[rnd7] + nm11[rnd5]
                else:
                    rnd8 = randnum(0, len(nm9))
                    rnd9 = randnum(0, len(nm10))
                    for _ in range(10000):
                        if nm7[rnd3] == nm9[rnd8] or nm9[rnd6] == nm9[rnd8]:
                            rnd8 = randnum(0, len(nm9))
                            continue
                        else:
                            break
                    surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm8[rnd4] + nm9[rnd6] + nm10[rnd7] + nm9[rnd8] + nm10[rnd9] + nm11[rnd5]

    surName = testSwear(surName)

    return gnomeName.capitalize() + " " + surName.capitalize()

def dragonborn():
    dbName = ""
    surName = ""
    nm1 = ["Ali", "Ar", "Ba", "Bal", "Bel", "Bha", "Bren", "Caer", "Calu", "Dur", "Do", "Dra", "Era", "Faer", "Fro", "Gre", "Ghe", "Gora", "He", "Hi", "Ior", "Jin", "Jar", "Kil", "Kriv", "Lor", "Lumi", "Mar", "Mor", "Med", "Nar", "Nes", "Na", "Oti", "Orla", "Pri", "Pa", "Qel", "Ravo", "Ras", "Rho", "Sa", "Sha", "Sul", "Taz", "To", "Trou", "Udo", "Uro", "Vor", "Vyu", "Vrak", "Wor", "Wu", "Wra", "Wul", "Xar", "Yor", "Zor", "Zra"]
    nm2 = ["barum", "bor", "broth", "ciar", "crath", "daar", "dhall", "dorim", "farn", "fras", "gar", "ghull", "grax", "hadur", "hazar", "jhan", "jurn", "kax", "kris", "kul", "lasar", "lin", "mash", "morn", "naar", "prax", "qiroth", "qrin", "qull", "rakas", "rash", "rinn", "roth", "sashi", "seth", "skan", "trin", "turim", "varax", "vroth", "vull", "warum", "wunax", "xan", "xiros", "yax", "ythas", "zavur", "zire", "ziros"]
    nm3 = ["Ari", "A", "Bi", "Bel", "Cris", "Ca", "Drys", "Da", "Erli", "Esh", "Fae", "Fen", "Gur", "Gri", "Hin", "Ha", "Irly", "Irie", "Jes", "Jo", "Ka", "Kel", "Ko", "Lilo", "Lora", "Mal", "Mi", "Na", "Nes", "Nys", "Ori", "O", "Ophi", "Phi", "Per", "Qi", "Quil", "Rai", "Rashi", "So", "Su", "Tha", "Ther", "Uri", "Ushi", "Val", "Vyra", "Welsi", "Wra", "Xy", "Xis", "Ya", "Yr", "Zen", "Zof"]
    nm4 = ["birith", "bis", "bith", "coria", "cys", "dalynn", "drish", "drith", "faeth", "fyire", "gil", "gissa", "gwen", "hime", "hymm", "karyn", "kira", "larys", "liann", "lyassa", "meila", "myse", "norae", "nys", "patys", "pora", "qorel", "qwen", "rann", "riel", "rina", "rinn", "rish", "rith", "saadi", "shann", "sira", "thibra", "thyra", "vayla", "vyre", "vys", "wophyl", "wyn", "xiris", "xora", "yassa", "yries", "zita", "zys"]
    nm5 = ["", "", "", "", "c", "cl", "cr", "d", "dr", "f", "g", "k", "kl", "kr", "l", "m", "my", "n", "ny", "pr", "sh", "t", "th", "v", "y"]
    nm6 = ["a", "e", "i", "a", "e", "i", "o", "u", "a", "e", "i", "a", "e", "i", "o", "u", "a", "e", "i", "a", "e", "i", "o", "u", "aa", "ia", "ea", "ua", "uu"]
    nm7 = ["c", "cc", "ch", "lm", "lk", "lx", "ld", "lr", "ldr", "lt", "lth", "mb", "mm", "mp", "mph", "mr", "mt", "nk", "nx", "nc", "p", "ph", "r", "rd", "rj", "rn", "rrh", "rth", "st", "tht", "x"]
    nm8 = ["c", "cm", "cn", "d", "j", "k", "km", "l", "n", "nd", "ndr", "nk", "nsht", "nth", "r", "s", "sht", "shkm", "st", "t", "th", "x"]
    nm9 = ["d", "j", "l", "ll", "m", "n", "nd", "rg", "r", "rr", "rd"]
    nm10 = ["c", "d", "k", "l", "n", "r", "s", "sh", "th"]

    rndTp = randnum(0, 2)

    if rndTp == 0:
        # Male
        for _ in range(10000):
            if dbName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                dbName = nm1[rnd] + nm2[rnd2]
                dbName = testSwear(dbName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if dbName == "":
                rnd = randnum(0, len(nm3))
                rnd2 = randnum(0, len(nm4))
                dbName = nm3[rnd] + nm4[rnd2]
                dbName = testSwear(dbName)
                continue
            else:
                break

    # Rando Surname
    nTp = randnum(0, 3)
    rnd = randnum(0, len(nm5))
    rnd2 = randnum(0, len(nm6))
    rnd3 = randnum(0, len(nm7))
    rnd4 = randnum(0, len(nm6))
    rnd5 = randnum(0, len(nm10))

    for _ in range(10000):
        if nm7[rnd3] == nm5[rnd] or nm7[rnd3] == nm10[rnd5]:
            rnd3 = randnum(0, len(nm7))
            continue
        else:
            break

    if nTp == 0:
        surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm6[rnd4] + nm10[rnd5]
    else:
        rnd6 = randnum(0, len(nm6))
        rnd7 = randnum(0, len(nm8))
        for _ in range(10000):
            if nm7[rnd3] == nm8[rnd7] or nm8[rnd7] == nm10[rnd5]:
                rnd7 = randnum(0, len(nm8))
                continue
            else:
                break
        if nTp == 1:
            surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm6[rnd4] + nm8[rnd7] + nm6[rnd6] + nm10[rnd5]
        else:
            rnd8 = randnum(0, len(nm6))
            rnd9 = randnum(0, len(nm9))
            for _ in range(10000):
                if nm9[rnd9] == nm8[rnd7] or nm9[rnd9] == nm10[rnd5]:
                    rnd9 = randnum(0, len(nm9))
                    continue
                else:
                    break
            surName = nm5[rnd] + nm6[rnd2] + nm7[rnd3] + nm6[rnd4] + nm8[rnd7] + nm6[rnd6] + nm9[rnd9] + nm6[rnd8] + nm10[rnd5]
    surName = testSwear(surName)

    return dbName.capitalize() + " " + surName.capitalize()

def tabaxi():
    tName = ""
    nm1 = ["Afternoon Nap (Nap)", "Animal in the Woods (Woods)", "Answered Riddle (Riddle)", "Art of Shadows (Art)", "Aura of Passion (Aura)", "Aurora of Winter (Aurora)", "Autumn Harvest (Autumn)", "Beats of a Heart (Beats)", "Beauty of Summer (Summer)", "Beauty's Eye (Beauty)", "Belly of a Beast (Beast)", "Berry Bush (Bush)", "Big Heart (Big)", "Bird Feather (Bird)", "Bite Marks (Bite)", "Blank Board (Board)", "Blank Canvas (Canvas)", "Blazing Fire (Blaze)", "Blossoms in Summer (Blossom)", "Branch of a River (River)", "Breath of Fresh Air (Breath)", "Broken Chain (Chain)", "Bubble of a Cauldron (Bubble)", "Burden of Chains (Chains)", "Burning Desire (Desire)", "Burning Fire (Fire)", "Bush in the Forest (Forest)", "Bushy Branch (Branch)", "Busy Bee (Bee)", "Cadence of Water (Cadence)", "Cake of Chocolate (Cake)", "Call of a Bird (Bird)", "Call of the Owl (Owl)", "Call to Action (Action)", "Candle in the Dark (Candle)", "Cannon on Deck (Cannon)", "Carriage on the Road (Road)", "Clanking Bottle (Clank)", "Cloaking Dagger (Dagger)", "Cloud in the Sky (Sky)", "Coursing River (River)", "Cover of Clouds (Cover)", "Crescent Moon (Moon)", "Dangling Button (Button)", "Dangling Lace (Lace)", "Daydream at Night (Dream)", "Dew on the Grass (Dew)", "Dream of Days (Dream)", "Drifting Cloud (Cloud)", "Drifting Snowflake (Snowflake)", "Drop in a Pond (Drop)", "Dust of Chalk (Dust)", "Dust on the Road (Dust)", "Eclipse of the Moon (Eclipse)", "Edge of the World (Edge)", "End of Winter (Winter)", "Endless Time (Time)", "Fall of Water (Water)", "Fallen Twig (Twig)", "Fang of a Snake (Fang)", "Feather in the Wind (Feather)", "Fire in the Distance (Fire)", "Fish in the River (River)", "Flame of Passion (Passion)", "Flame of the Spirit (Flame)", "Flickering Fire (Fire)", "Flickering Flame (Flame)", "Flight of a Robin (Robin)", "Flow of the River (Flow)", "Flower in the Field (Flower)", "Flower of Ivory (Ivory)", "Forgotten Link (Link)", "Four-Leaf Clover (Clover)", "Fragrance of Spring (Spring)", "Friend of Foe (Friend)", "Gale of the Storm (Gale)", "Game of Chance (Game)", "Garden of Flowers (Flower)", "Gift of a Guest (Gift)", "Glow of the Sun (Sun)", "Grass of Spring (Grass)", "Guest at Home (Guest)", "Guide of Life (Guide)", "Hawk Feather (Hawk)", "Hen of the Flock (Hen)", "Hidden Depths (Depth)", "Hidden Treasure (Treasure)", "Hide of the Beast (Hide)", "High Noon (Noon)", "Honey of Bees (Honey)", "Hot Flame (Flame)", "Hot as Fire (Fire)", "Ice in Summer (Ice)", "Ice on the Lake (Ice)", "Ink on Skin (Ink)", "Jewel of the Mountain (Jewel)", "Kite in the Wind (Kite)", "Leaf on the Water (Leaf)", "Leaping Frog (Frog)", "Light in the Morning (Light)", "Lightning After Thunder (Lightning)", "Little Flower (Little)", "Lock on an Open Door (Lock)", "Locket on a Heart (Locket)", "Looping Coil (Coil)", "Loose String (String)", "Luck of the Draw (Luck)", "Marble in the Sky (Marble)", "Mark of Life (Mark)", "Melting of Snow (Snow)", "Mirror's Reflection (Mirror)", "Mist in the Morning (Mist)", "Mountain Boulder (Boulder)", "Needle in Hay (Needle)", "Night of Dreams (Night)", "Open Gates (Gate)", "Owl in the Morning (Owl)", "Page of a Book (Page)", "Paint on a Canvas (Paint)", "Patch in the Forest (Patch)", "Paw of a Bear (Paw)", "Peak of Mountains (Peak)", "Piece of the Puzzle (Piece)", "Plume in the Wind (Plume)", "Plume of Smoke (Smoke)", "Poem of Summer (Poem)", "Print of a Boot (Boot)", "Print of an Animal (Animal)", "Quill in the Grass (Quill)", "Rain in Summer (Rain)", "Rain of Fall (Rain)", "Rainbow After Rain (Rainbow)", "Rays of the Sun (Ray)", "Remnants of History (Remnant)", "Rhythm of Drums (Rhythm)", "Ringing of Bells (Bell)", "Rinkling Chains (Chains)", "Roar of a Bear (Roar)", "Rope in a Knot (Knot)", "Rustling of a Deer (Deer)", "Sailing Ship (Ship)", "Sand of the Beach (Sand)", "Sands of Time (Sand)", "Scarf in Summer (Scarf)", "Scratch on Wood (Scratch)", "Screech of Bats (Bat)", "Sea of Opportunity (Sea)", "Second Chance (Chance)", "Serpent Scale (Scale)", "Shadow of a Star (Shadow)", "Shadows in the Wind (Shadow)", "Sky Full of Stars (Sky)", "Sky of a Sunset (Sky)", "Sleight Hand (Hand)", "Smooth as Silk (Silk)", "Snapping Branch (Snap)", "Snow of the Mountain (Snow)", "Solstice of Summer (Solstice)", "Song of Paradise (Song)", "Sound of the Drum (Drum)", "Spark of Life (Spark)", "Sparkle of Light (Sparkle)", "Spell of Rain (Spell)", "Spots of a Leopard (Spot)", "Spring Blossom (Spring)", "Spring Winds (Spring)", "Star in the Morning (Star)", "Steady Rock (Rock)", "Stitch of Fabric (Stitch)", "Stone in Water (Stone)", "Storm at Sea (Sea)", "Storm on the Horizon (Storm)", "Strength of Love (Love)", "Stripes of a Tiger (Tiger)", "Stroke of a Brush (Brush)", "Summer Afternoon (Summer)", "Sunshine at Night (Sunshine)", "Tale of Wonder (Tale)", "Taste of Fruit (Taste)", "Three Tree (Three)", "Thrill of Life (Thrill)", "Thunder in the Morning (Thunder)", "Ticking Clock (Clock)", "Tome of Secrets (Tome)", "Top Card (Card)", "Trail in the Woods (Trail)", "Tree Blossom (Blossom)", "Tree in the Woods (Tree)", "Tricking Treat (Trick)", "Two River (River)", "Unpulled Cart (Cart)", "Unread Book (Book)", "Veil of Shadows (Veil)", "Veil of a Mask (Veil)", "Wave on the Shore (Wave)", "Windy Shore (Shore)", "Wing of an Angel (Angel)", "Winter Breath (Winter)", "Wish Upon a Star (Wish)", "Wonder of the World (Wonder)"]
    nm2 = ["Active", "Agile", "Amused", "Amusing", "Ancient", "Angelic", "Arctic", "Austere", "Bizarre", "Bold", "Brash", "Brave", "Bright", "Bronze", "Cheeky", "Clever", "Curious", "Defiant", "Dynamic", "Eager", "Elegant", "Elite", "Emerald", "Ethereal", "Faint", "Fine", "Five", "Flawless", "Four", "Fragile", "Fragrant", "Free", "Fresh", "Gentle", "Gold", "Golden", "Grand", "Half", "Happy", "Hearty", "Hidden", "Humble", "Hushed", "Icy", "Jade", "Jolly", "Kind", "Lazy", "Light", "Little", "Lone", "Lost", "Lucky", "Magic", "Mellow", "Merry", "Misty", "Mystery", "Nimble", "Odd", "Opal", "Prime", "Proud", "Pure", "Quick", "Quiet", "Quirky", "Radiant", "Rare", "Ruby", "Sapphire", "Secret", "Serene", "Seven", "Shady", "Silent", "Single", "Six", "Smooth", "Stout", "Subtle", "Sweet", "Swift", "Three", "Tranquil", "True", "Twin", "Two", "Velvet", "Vibrant", "Violet", "Wild"]
    nm3 = ["Animal", "Aspect", "Bat", "Beach", "Bear", "Beast", "Beauty", "Beetle", "Bell", "Berry", "Bird", "Bit", "Bite", "Block", "Board", "Boat", "Book", "Boot", "Bottle", "Brain", "Branch", "Breath", "Brush", "Bubble", "Bush", "Button", "Cable", "Cake", "Candle", "Candy", "Cannon", "Canvas", "Card", "Carriage", "Cart", "Chain", "Chains", "Chalk", "Chance", "Child", "Clock", "Cloud", "Clover", "Coil", "Deer", "Device", "Dream", "Drop", "Dust", "Edge", "Fang", "Feather", "Fire", "Fish", "Flame", "Flower", "Frog", "Game", "Garden", "Gate", "Gift", "Glove", "Grass", "Guest", "Guide", "Hen", "Hide", "Honey", "Ice", "Ink", "Jewel", "Kite", "Knot", "Lace", "Leaf", "Light", "Lightning", "Link", "Lock", "Locket", "Love", "Luck", "Marble", "Mark", "Mask", "Mirror", "Needle", "Night", "Owl", "Page", "Patch", "Path", "Peak", "Piece", "Plume", "Poem", "Quill", "Quilt", "Rain", "Riddle", "River", "Robin", "Rock", "Scale", "Scarf", "Scratch", "Sea", "Shadow", "Shoe", "Shore", "Silk", "Smoke", "Snow", "Snowflake", "Song", "Spark", "Sparkle", "Spell", "Star", "Stitch", "Stone", "Storm", "Straw", "Stream", "String", "Stripe", "Tale", "Thing", "Thrill", "Thunder", "Timber", "Time", "Tome", "Trail", "Tree", "Trick", "Veil", "Wave", "Wind", "Wing", "Wish", "Wonder"]

    rndTp = randnum(0, 2)
    if rndTp == 0:
        rnd = randnum(0, len(nm1))
        tName = nm1[rnd]
    else:
        rnd = randnum(0, len(nm2))
        rnd2 = randnum(0, len(nm3))
        nTp = randnum(0, 2)
        if nTp == 0:
            tName = nm2[rnd] + " " + nm3[rnd2] + " (" + nm2[rnd] + ")"
        else:
            tName = nm2[rnd] + " " + nm3[rnd2] + " (" + nm3[rnd2] + ")"
    return tName

def tiefling():
    tName = ""
    nm1 = ["Aet", "Ak", "Am", "Aran", "And", "Ar", "Ark", "Bar", "Car", "Cas", "Dam", "Dhar", "Eb", "Ek", "Er", "Gar", "Gu", "Gue", "Hor", "Ia", "Ka", "Kai", "Kar", "Kil", "Kos", "Ky", "Loke", "Mal", "Male", "Mav", "Me", "Mor", "Neph", "Oz", "Ral", "Re", "Rol", "Sal", "Sha", "Sir", "Ska", "The", "Thy", "Thyne", "Ur", "Uri", "Val", "Xar", "Zar", "Zer", "Zher", "Zor"]
    nm2 = ["adius", "akas", "akos", "char", "cis", "cius", "dos", "emon", "ichar", "il", "ilius", "ira", "lech", "lius", "lyre", "marir", "menos", "meros", "mir", "mong", "mos", "mus", "non", "rai", "rakas", "rakir", "reus", "rias", "ris", "rius", "ron", "ros", "rus", "rut", "shoon", "thor", "thos", "thus", "us", "venom", "vir", "vius", "xes", "xik", "xikas", "xire", "xius", "xus", "zer", "zire"]
    nm4 = ["Af", "Agne", "Ani", "Ara", "Ari", "Aria", "Bel", "Bri", "Cre", "Da", "Di", "Dim", "Dor", "Ea", "Fri", "Gri", "His", "In", "Ini", "Kal", "Le", "Lev", "Lil", "Ma", "Mar", "Mis", "Mith", "Na", "Nat", "Ne", "Neth", "Nith", "Ori", "Pes", "Phe", "Qu", "Ri", "Ro", "Sa", "Sar", "Seiri", "Sha", "Val", "Vel", "Ya", "Yora", "Yu", "Za", "Zai", "Ze"]
    nm5 = ["bis", "borys", "cria", "cyra", "dani", "doris", "faris", "firith", "goria", "grea", "hala", "hiri", "karia", "ki", "laia", "lia", "lies", "lista", "lith", "loth", "lypsis", "lyvia", "maia", "meia", "mine", "narei", "nirith", "nise", "phi", "pione", "punith", "qine", "rali", "rissa", "seis", "solis", "spira", "tari", "tish", "uphis", "vari", "vine", "wala", "wure", "xibis", "xori", "yis", "yola", "za", "zes"]

    rndTp = randnum(0, 2)
    if rndTp == 0:
        # Male
        for _ in range(10000):
            if tName == "":
                rnd = randnum(0, len(nm1))
                rnd2 = randnum(0, len(nm2))
                tName = nm1[rnd] + nm2[rnd2]
                tName = testSwear(tName)
                continue
            else:
                break
    else:
        # Female
        for _ in range(10000):
            if tName == "":
                rnd = randnum(0, len(nm4))
                rnd2 = randnum(0, len(nm5))
                tName = nm4[rnd] + nm5[rnd2]
                tName = testSwear(tName)
                continue
            else:
                break
    return tName.capitalize()

def testSwear(nm):
    swear = ["alah", "allah", "anal", "anilingus", "anus", "apeshit", "arse", "arsehole", "ass", "asshole", "assmunch", "autoerotic", "babeland", "balls", "ballsack", "bangbros", "bareback", "barenaked", "bastard", "bastardo", "bastinado", "beaner", "beaners", "bestiality", "biatch", "bigtits", "bimbos", "birdlock", "bitch", "bitches", "black", "bloody", "blowjob", "blumpkin", "bollock", "bollocks", "bollok", "bondage", "boner", "boob", "boobs", "bugger", "bukkake", "bulldyke", "bullshit", "bum", "bunghole", "busty", "butt", "buttcheeks", "butthole", "buttplug", "cameltoe", "camgirl", "camslut", "camwhore", "clit", "clitbeard", "clitoris", "cloaka", "clusterfuck", "cock", "cocks", "coon", "coons", "cornhole", "crap", "creampie", "crystalnight", "crystal night", "cum", "cumming", "cunt", "damn", "darkie", "daterape", "deepthroat", "dick", "dildo", "doggy", "dolcett", "domination", "dominatrix", "dommes", "dryhump", "dyke", "ecchi", "ejaculation", "erotic", "erotism", "escort", "eunuch", "fag", "fags", "fagget", "faggets", "faggit", "faggits", "faggot", "faggots", "faggut", "faghet", "faghit", "faghot", "faghut", "fecal", "feck", "felch", "felching", "fellate", "fellatio", "feltch", "femdom", "fetish", "figging", "fingerbang", "fingering", "fisting", "flange", "footjob", "frotting", "fuck", "fuckin", "fucking", "fucktard", "fucktards", "fudgepacker", "futanari", "gangbang", "gaysex", "genitals", "goatcx", "goatse", "god", "goddamn", "gokkun", "goodpoop", "googirl", "gook", "goregasm", "grope", "groupsex", "guro", "handjob", "hardcore", "hell", "hentai", "homo", "homoerotic", "honkey", "hooker", "humping", "incest", "intercourse", "jackoff", "jailbait", "jerk", "jerkoff", "jigaboo", "jiggaboo", "jiggerboo", "jizz", "juggs", "kike", "kinbaku", "kinkster", "kinky", "knobbing", "knobend", "kum", "labia", "lmao", "lmfao", "lolita", "maleass", "masturbate", "milf", "muff", "nambla", "nawashi", "nazi", "neeger", "neegger", "negger", "negro", "neonazi", "nieger", "niegger", "niga", "nigar", "niger", "nigga", "niggar", "niggas", "niggaz", "nigger", "niggers", "nigges", "niggir", "niggis", "niggor", "niggos", "niggur", "niggus", "niggrer", "niggret", "nigher", "nighes", "nignog", "nigra", "nimphomania", "nipple", "nipples", "nude", "nudity", "nympho", "nymphomania", "obama", "octopussy", "omg", "omorashi", "oral", "orgasm", "orgy", "paedo", "paki", "panties", "panty", "pedo", "pegging", "penis", "pis", "piss", "pissing", "pisspig", "playboy", "ponyplay", "poof", "poon", "poontang", "poop", "porn", "porno", "prick", "pube", "pubes", "punany", "pussy", "queaf", "queef", "queer", "quim", "raghead", "rape", "raping", "rapist", "rectum", "rimjob", "rimming", "sadism", "santorum", "scat", "schlong", "scissoring", "scrotum", "semen", "sex", "sexo", "sexy", "sexx", "sexxy", "sexei", "sexxei", "shaved", "shemale", "shibari", "shit", "shitblimp", "shitty", "shota", "shrimping", "skeet", "slanteye", "slut", "smegma", "smut", "snatch", "sodomize", "sodomy", "spic", "splooge", "spooge", "spunk", "squaw", "strapon", "suck", "sucks", "suicide", "sultry", "swastika", "swinger", "threesome", "throating", "tiits", "tit", "tits", "titties", "titty", "topless", "tosser", "towelhead", "trani", "tranie", "tranni", "trannie", "tranny", "trany", "trennie", "tubgirl", "turd", "tushy", "twat", "twink", "twinkie", "upskirt", "urethra", "urophilia", "vagina", "vibrator", "voyeur", "vulva", "wank", "wetback", "whore", "wtf", "yaoi", "yiffy"]
    name = nm.lower()
    if name in swear:
        return ""
    else:
        return nm

def randnum(mn, mx):
    return random.number(mn, mx - 1)

def racelkup(race):
    if race == "all":
        return -1
    if race == "dragonborn":
        return 3
    if race == "dwarf":
        return 2
    if race == "elf":
        return 1
    if race == "firbolg":
        return 11
    if race == "gnome":
        return 4
    if race == "halfelf":
        return 5
    if race == "halforc":
        return 6
    if race == "halfling":
        return 7
    if race == "human":
        return 8
    if race == "lizardfolk":
        return 0
    if race == "tabaxi":
        return 9
    if race == "tiefling":
        return 10
    return -1

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Dropdown(
                id = "race",
                name = "Race",
                desc = "Race of beings to generate name for",
                icon = "dragon",
                default = options[0].value,
                options = options,
            ),
        ],
    )
