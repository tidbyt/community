"""
Applet: SolarEdge
Summary: SolarEdge system monitor
Description: Energy production and consumption monitor for your SolarEdge solar panels.
Author: ingmarstein
"""

load("encoding/base64.star", "base64")
load("encoding/json.star", "json")
load("http.star", "http")
load("humanize.star", "humanize")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")

URL = "https://monitoringapi.solaredge.com/site/{}/currentPowerFlow"
URL_AUT = "https://monitoringapi.solaredge.com/site/{}/energyDetails"
URL_SITE = "https://monitoringapi.solaredge.com/site/{}/details"

# SolarEdge API limit is 300 requests per day, which is about
# one per 5 minutes
CACHE_TTL = 300

DEBUG = False
#DEBUG = True # set to True to skip api calls and use dummy data

DUMMY_DATA = {
    "siteCurrentPowerFlow": {
        "updateRefreshRate": 3,
        "unit": "kW",
        "connections": [
            {"from": "GRID", "to": "Load"},
            {"from": "PV", "to": "Load"},
            {"from": "STORAGE", "to": "Load"},
        ],
        "GRID": {"status": "Active", "currentPower": 1.57},
        "LOAD": {"status": "Active", "currentPower": 4.71},
        "PV": {"status": "Active", "currentPower": 3.14},
        "STORAGE": {
            "status": "Discharging",
            "currentPower": 1.42,
            "chargeLevel": 86,
            "critical": False,
        },
    },
}

DUMMY_DATA_AUTARKY_YEAR = {
    "energyDetails": {
        "timeUnit": "YEAR",
        "unit": "Wh",
        "meters": [
            {
                "type": "SelfConsumption",
                "values": [
                    {
                        "date": "2024-01-01 00:00:00",
                        "value": 5329901.0,
                    },
                ],
            },
            {
                "type": "Consumption",
                "values": [
                    {
                        "date": "2024-01-01 00:00:00",
                        "value": 6961366.0,
                    },
                ],
            },
        ],
    },
}

GRAY = "#777777"
RED = "#AA0000"  # very bright at FF, dim a little to AA
GREEN = "#00FF00"
ORANGE = "#FFA500"
YELLOW = "#FFFF00"
WHITE = "#FFFFFF"

BATTERY_0_TO_25_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAitJREFUOBGlU81r1FAQn/eSzcduKGrBlRUseBJaRARBelDU3jwIQj146t/hKf4RXjx78qMHUTxYFQQpqFso2JNViwq7Lq1d2ybpJi9vnHnZtMlRnCUvk5n5/ebrrYCqIAj6IZve//h1UyKc/p0kuBntbdw+P/PEhFZiqlAgmGADIkp6yeXvPz9vZIgfh7v4oLv6Zf4hWCGG7DuIZXUMAiEo852lmbaV7b/yA3nEd84cleA7OeagcC9V6tt2sqv+WOhdC6+v9ZESMsZmlluPgJlziLK2HcjpRqMFO+lTuNx5aXK87c3ZfuNcU7nxySzO2mTslxhT0vR80bfTShRggiAj7XuAg3QFBmkXPJcbjLXWI2i0tCICKDGmArgbkimE3voU9aeF6ztCWqfgq7rPseDZc0LnSoyiBLQpeh1KjCEITRjAh8cdRE7gUEpq0BYd41GoqcEcYLhDQy7mWGIOCNgQTKagKU66fFAgDdAIkTFB7hIRmA6oXq4ZwBDQ20iaEo61nAAcWyyJFcPFxUljNyZzFPUcfv+z9t8EtRY4Pd8sZ3xLaGJFRXxjSNunh7qsSY3AIVdCwe8sazzEQwJGXSAfx1SlRrBG3tlE4b3tofCE4B1QQQgWCEy0Fi9onV1Jf7GK1Ai2nMCa2uqLq0uvsUmr0MVO6NQihiZ+unJRPD8W1DDcMgsPU8PCwokbg8HqpSg+7kqhNaLxS6pmpHL5xnU2n01MnIXFxV6J+Qsqw+boee0udAAAAABJRU5ErkJggg==
""")

BATTERY_25_TO_50_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAl1JREFUOBFlU01rE1EUPffN5GUSWqwiTS1ScaU0COrSVcH+g1JX7vpHxo3/QXeCq4wLEXRTRBAE0VoUCbqprY0ltbW0sfloJvPe9b6XNE3tDW/e5M49555z5w1hNBgkP3apj7XfC8S4utdqYbfT2bh/u/zMl47UjEIhMHKJSqUSYA7h+5+/1jZ6llf2D/np6uf1+A3CxcpiMCQZoD2IBUzSOX5ZnjKq+7o4FkxE+tqEQkEbNsi4mZps/aB1aBq2k7v7cOFbPY6hZNnQEd1LoGQzxvZKuUIwG+YKaKQvMDe9LGnC2/p8GOVuFnXUnj7irCTJenW2r9gBUV7s+w60cJgOoNq2GIF30lXspJ8Q5cFEbWttFzq02SjGK8CDWHIxat9LyGmCLmilghn8yB67WkThPFnBdZsdsFView3HGE8Q+zJg5fklVjIMaO1aIqRp/yRj6wwSDv460/4tHWOGBC4xdkEcKwOljdgQdzJAH47UyDjzlkSBT8VydcsTyD4MK41IFqSpG6AP2YSL2Lnv4/t5uZ4hcE96XuSwRm4cA/2P9QVnCQQ8HrA4kIPhidwhcYIYTSEaaBqynyJ419RYmtzH0vUaiiHBDpQoOdPtjPDo6xSebI4Pwe7mFIFLdA1ju2Hk1YnqAYFT0DXEqREf2lWdxCmCqSjjRpZHvXcFEcvAB9+Hc3OUWWqkhBnKePME31dQrVa9te1uGF4+38CdyQ9cCJmsNHShyFLH5PnLzg16VS/6pscY/ycplxlJAhSD3a1W7s9y7dZFreTQjShIRcFWM9jDObPrSJMk8Qb/AT5iBQQ1e0IyAAAAAElFTkSuQmCC
""")

BATTERY_50_TO_75_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAnFJREFUOBF9U8FOE1EUPXfmzXSKGkAMIAmG4AKl0RC+wERM/ABx5cfUjf+gexe2rkxcGKILF0oIYIRUFpBCY7TQQmkL7TAzb97zzkwH25h4J5OXd+ecc9+59w2hPzSIHx2lVivVJ4KMmZNOB3XXPXi2mHsbQ/sw/VQwjaJEoVAwkYf4WvlVPgiUXj8906+/fd9/uQ5rubBsXor02DEpn4fBr8q/z02G5H3KXjVHspm5YQNZO9QhQpz7gX/Qcs9lMzSshy8e71RTjoiESvNJdR/+pOOYdy07i5b/Dg+mVvgr4XN1STjWwpDldG+GrpzgZDXlGJFAbjnxbQsllXIBo6uGHOiav4mavwEnA02cU8qDiTDs58QnwPM85/I4LE9zQQk7a5Fh3KKyfBVh4YglUkrC67jQYVSzjJQTC+QjFMeXN6MQpgkzYxMMgqCpOM990DpUkI02pBEPicslEVtIN9fZXWYkRNtWumkpHIsgfk8tTW07hHNDYXQ8IaacxEKSw9EpMMOAR/OSLIsvRFIMxLPypcLaJqFy1AP3lgGBnYaNxdku5mbaiFwMCATA7p6NDxv/Ebg/4aPWNLG6dQWWGBQIAoV6Q+LeLGGbe5jGwAm22MJT7tvCHe5Fhi+nSmCGCe15hN+HhI97KTVZBwQmbBtSdtFqudoSINXrAQ+EAskTDC2MsjWucxkDAmMZqTuewMnZMNk2aaWSGxo30VfUcS8weY30PwKlUin+J350hFicvUDu9rnmJtLfJmp4Aen9ikUrWzoumnLiTTGX0ygWMZ2ler2Jk7VtZ0ywbxaIhfkEWkpFx42wMT1u137uguHF2OAfS78XoMc1c1kAAAAASUVORK5CYII=
""")

BATTERY_75_TO_100_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAmNJREFUOBF9U7tuE0EUPXf2bRwICClKEAglBQluUCroEKTgA0jBD/ARVKahpkW0VHZoaBEUNKRIIkRkIQVEHAkRlAjHsbO73tcMd2azlt1wrbVnjs8596G7hMlQIP4oDW0eHD22Sd38G4boxWn3yeryhqFOcCalYBlpoNVqWXgK5/PBr/1uJtXWyVC92fnSfbUFZ721bo1NztVG1GxC8COfvV2Zt4LsQ1C3ZmverUuEwC1UgQJnaZZ2T+NhflpYzoMXj74dVhpbG3Vul9nhiznHt1YcN0A/fYf7C+/5X8KnwzXbd+/UnCCaL+J8jsHDSiO0QWO97Nu1R7mUEWsiWfOgjpIdHCXb8F0oYkzKBBaKYlJjKsDzJmNN/N67RsJW8GZsEuIG7RevNRe+tUaFzJEMRlCF7vonKo0xaGoWx+bLeeXfzVB/yBeXONuqwXkOCqnC8GOG0YYpgNOVYVqoLvUlzubnwCAE9UPI/sA8dBISDSIEQY76vVJYacoWSoy/U6jEhjXyiBwulTdCLwXpYy4hRzHgmDUZK6YNzlzQYgxxPYLweKNkySOuU6WA2BOIt8dac5g2uJyi6DNp1wPZZQWGpY+ZQt7L4C4ywjOsYtrgBLAXgAvLAuRxWqnKFiwuJlEI/xDCH/9roe6iyGPEp4niCs7fCs7Fb4jK2aQQcN0qd/k7XQEPEYkFa3iRyCUFyUKt1y2kktI4As0YaOxiDDqdDlOAPHKt2mwCe+lMscFkBUBGMjsQIvoqpzTm0m40FNptOAEdZz3Vk7vOFd4iHoDOzaGtcil4iD37qn2M72B62wzjH1EjDPby6ailAAAAAElFTkSuQmCC
""")

BATTERY_CHARGE_ANIMATION_10x10 = base64.decode("""
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
""")

BATTERY_DISCHARGE_ANIMATION_10x10 = base64.decode("""
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
""")

BATTERY_NOFLOW_ANIMATION_10x10 = base64.decode("""
R0lGODdhCgAKANUAAAAAADlAT0BAQD5MTDdOXUJPTTdQXzZSYUBWYT1aWkFfXkVgYEJiX0piYlNxRFB+QUCAQFyDVF6IWH+1M4G5MYC/AITEAIzGO5fHrYjJCI7LOKLPgq7Tz47UAKXUfpHYALrcwsTf3P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAkAACMALAAAAAAKAAoAAAY3wJFwFOIMh5fMZmOZHDUfj6dDOUYkj0fEcUQcCAZC4LhgJBKKAllxTgzW7fdQwT7LhY16Qj0KAgA7
""")

BATTERY_CHARGE_STATUS_0_25_10x10 = base64.decode("""
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
""")

BATTERY_CHARGE_STATUS_25_50_10x10 = base64.decode("""
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
""")

BATTERY_CHARGE_STATUS_50_75_10x10 = base64.decode("""
R0lGODdhCgAKANUAAAAAAABAQDlATUBAQCBDYCJDXR9EYT5FUh5IYjtLTTdOXUFPTzdQX0RRUTZSYDxUYUVZZT1bW0BfXUJiXktkY09mX1FmYlFoXlVzRlB+QVJ+P3R+UkCAQFOAQICAQHmCT1yEVF+EWnmEV16IWGCJWIyTU5GXUJKXTZOZVJWZS5idVJueTH+1NIG6M4C/AITEAI3GPZfHrYjJCI7LOJDLPqLPgq7Tz43UAKTUfpHYALrawsTg3P///wAAAAAAAAAAACH5BAkAAD0ALAAAAAAKAAoAAAY2wJ6wt7MNhzBZrfZiHWk5HO7WOoZGmQwIc4Q4FAzF4UiZRCKSBvl8Vg8pErZbSGFH5j24XBgEACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAYqwF5vZxPCZLXai0XL4XC3VmiUyYAwEIeCoThQJpGIpEEJh8kSM9kcQauDACH5BAkAAD0ALAIAAAAGAAoAAAY0wF5vZxPCZLXaizXL4XC3Foik6YAwDwTBUBBcSidTKUFBpVLjCuqETlRUq5UpYRF9PptFEAAh+QQJAAA9ACwCAAAABgAKAAAGNMBeb2cTwmS12os1y+FwtxaIpOmAMA8EwVAQXEonUylBQaVS4wrqhE5UVKuVKWERfT6bRRAAIfkECQAAPQAsAgAAAAYACgAABjTAXm9nE8JktdqLNcvhcLcWiKTpgDAPBMFQEFxKJ1MpQUGlUuMK6oROVFSrlSlhEX0+m0UQACH5BAkAAD0ALAIAAAAGAAoAAAY0wF5vZxPCZLXaizXL4XC3Foik6YAwDwTBUBBcSidTKUFBpVLjCuqETlRUq5UpYRF9PptFEAAh+QQJAAA9ACwCAAAABgAKAAAGNMBeb2cTwmS12os1y+FwtxaIpOmAMA8EwVAQXEonUylBQaVS4wrqhE5UVKuVKWERfT6bRRAAIfkECQAAPQAsAgAAAAYACgAABjTAXm9nE8JktdqLNcvhcLcWiKTpgDAPBMFQEFxKJ1MpQUGlUuMK6oROVFSrlSlhEX0+m0UQACH5BAkAAD0ALAIAAAAGAAoAAAY0wF5vZxPCZLXaizXL4XC3Foik6YAwDwTBUBBcSidTKUFBpVLjCuqETlRUq5UpYRF9PptFEAAh+QQJAAA9ACwCAAAABgAKAAAGNMBeb2cTwmS12os1y+FwtxaIpOmAMA8EwVAQXEonUylBQaVS4wrqhE5UVKuVKWERfT6bRRAAOw==
""")

BATTERY_CHARGE_STATUS_75_100_10x10 = base64.decode("""
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
""")

AUTARKY_16x16 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAbwAAAG8B8aLcQwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAKGSURBVDiNfZJtaM1hGMZ/9/P/73TOzFvIZuMYJ8uStywjhSQhSxvLywdbJNl88V1a2VfJbKVEjVJn+TRqQlvxQfJW7GSRaENsM+Ts5f/y3L44pzPk+Xjd1+/qeu5uUVVy377+usWhyA6E9Sjrbg5OLylw7FDU2FS+obmv/MK9XL8BaKLJANT219cFIrcRiYvV6xHrrUrMoHi6GzQbw1j/hNu1oLfhhiAmEyC7Ph7Nj4bePUVfAittGFbdiF/9NKlWh8RI4Zftb0yMjMsdC5Hh5S1FilrjTHgRhUpBKsTRmr/gTqnUCX6wjIN9S1pefVl+fr4Bb37v8Q4AkzeaHhWkWyGt1tk+Ce6Rhfqd+yJ41NCekWdGdeuQl1dVlmrcIn8uMRe20GPeEWcaZ6jWU7njeKrxlrXEzP9gII6Lzw+a/7TkYbvGrSk3NR/qKydN7sucLAwQkIchTVJ66ZTSjC0WiyR/hma2MaodtYMNBdkAIQC6gKGsZjF4JPCxGelF6bnPJVHvmBGVZ+F4enXWvEFHzCY9ZqAI4e3vvh4FrKVa3+eWfb207ZJB9LERJn8DCJWdKIvUxSdKJbv1+b/WJXv7DyeU8K64UpEsvDz4WxbbwzNgivnGPnbrkwywMNV47bvvVIkQzHODBSZZcumNomc10NZsbA9rgajx2ZgLA+RH7IVQxR3xnZlWZJaoKoLInoG6TmBUXGlIXrwyDMBptbnwktTRlV/82IOYCQfGrFM8NzZemj0kQaRm4NAJQU6CtlnloROd8rTvqzcnHUYOj1mz7VvgrJgb8dvflrce2UyT283p4K9LrB04koDgACprVHTVrcEZhVNd+zHm2EdRR9telbV25/p/AZhtE/ThSw0TAAAAAElFTkSuQmCC
""")

# need 5 items because 100% is index 4
battery_level_icons = [BATTERY_CHARGE_STATUS_0_25_10x10, BATTERY_CHARGE_STATUS_25_50_10x10, BATTERY_CHARGE_STATUS_50_75_10x10, BATTERY_CHARGE_STATUS_75_100_10x10, BATTERY_CHARGE_STATUS_75_100_10x10]
battery_level_mains = [BATTERY_0_TO_25_MAIN_SCREEN, BATTERY_25_TO_50_MAIN_SCREEN, BATTERY_50_TO_75_MAIN_SCREEN, BATTERY_75_TO_100_MAIN_SCREEN, BATTERY_75_TO_100_MAIN_SCREEN]
soc_color = [RED, ORANGE, YELLOW, GREEN, GREEN]

BATTERY = base64.decode("""
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
""")

PLUG = base64.decode("""
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
""")

SUN = base64.decode("""
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
""")

SOLAR = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACeklEQVQ4jY2TT0hUQRzHvzPz3u7bfe6umroQuKwmhCQbLNIfyDCIkoiog9XJolsdOglBVOKlgrqI9xAvhUJEEIKXwjpFqJERmbCRGKbRqrv73vO9+RPz8BCxoj+YP78fzGe+850ZKKV218YORPQoJnI3/82J7naMyYO24OQiq8Sfcds9ZpDylCQ1V2gpGNkdQMfEkaSEtwCgEQpLboV32r1zyzsD3rRY0qvtU0CRKDWmS0FZgTBy14irDdL//PO7mRXeEWyUTcKoMuIx7q2uWlZTkwfga9dy7ujAACRe5eoE6CJ3lA0JGVWsGZenf9JrHVYKQMpM1sR5qWSDkBSzrKhwXF0/NJX+1Bd6QNkZ5iNPDPo4apOMSMrTGO+I0CjD4uFGNS1cDzQSgf+nCGpG4BeL0DXpOQ87Z54YjMkXuDA7b8TwDWdnl5ihxtA751MAt861WXsguaCmCe44kEEAFovBX1uH4iKdiMt+nPpY0een1tpo6M1WHppYKBRGJr8HLePz3nG56YNXKojU18Fb/gUr3QSlUJJK5F/fyC/877FWoB/KvZMZYx/1PVcKDu664BUHNBqFt/JbK0mIsvey2iWFgNbW1h+Ukqc9zcYXCAkzkQg9IIxBeB4U55CB3949/L6rKkAHY+z++Vx9uqExsWImE+Hu+omYtbWQnINZFiAwui0gk8kUCVFDV9vNBV6uAIQiWNcmcqggCJUIx812P3p7vSogdJSQ4f0N0b3gQRDmjEH6PphtQ5TLW5+OPdgWkM1mPZOSwUv5hoKWbCaToQI9p5YVAsFoqnvow+2qgC3IaE9bbDMeYQ4ICRdq+caWijCkvHNiEAYA/AVIsU5KC49FbgAAAABJRU5ErkJggg==
""")
HOUSE = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACxUlEQVQ4jXWSbUhTYRTHz3nuXq66efNlmzXFzKb5mltjM6sPBZVBZvq1PvWlooImFEooWSASlWDoPkQfIihKkSilUkHKXnyh8qXSwlq+Tm2WuJpe3e4Td+S1tTxwuIff+f8fzvPcg5RSWC2s0THXkCDpmHaeWE0j+x9ERLREaW+WJhsPIQJYNDFct2vKlpyaXkXkjEAFIMNDn0o8Hs9o0ASIyFijtHfLkrIKGlhKRFbIAz3Z19lx0HbGnGE2yyfHx+DKhVKLy+nsJv+Y5dZo3YPy5M2FDWGEFNXWgpgNoQzaM7Ozv7Y2uwWfD8JUalBxnEv0kL/MbE50zONyQ+a++nAlnrXb4UX7M3+KdX24Ao8CG9FUWfF9YnQEZicnDX7jnyuodmjWPn+0dbdwLK+AfnaM0ObmNrol3eRPsRaZ2BM1lg2GOY7j9ohegogR2yO1LSUb03Oa9JFYXFMDqjA1xMbFgixE4U+xFpnYEzXndetVJjlbhogcpqm5zooUU+aT+Bi2+GoVKJVK6U0WF3n/V6FYYTzPQ2WRDfYOTy6cG3jbh4msauc8CqcuXb+RF6IgshHHkCQ2pGSAjwJ8HOgP+FNqLtp78bStMQRJtWxo3t2GiNNKlt3ffKca8nUOSdjyPgN+LCxBltArsfHZJXCZjsAE7ymnlPYsL9IXo9EoPK1jICqMkcTMPAHQbILx9MMSmx4bAZ3PHbSJyV1dnQE7sRyhag7Sdh1YGX+gD352NAUdEBBegULr4C8ALcCCew7ab9VI/ZkpJ6Tp1qwcoDcwlzXxmHC/8TajXYYEITdVBXUugG3WJHjd+1IyrAsH6B/8QDTxWKo3MA5ZollWmHtcmfDm3jsKroSgaV71PISE/PYApgcgVlAVPrbzDoxLIb2xKTJYmNbFK92hPqNeLr1F3xT18qwA+tTFgKtSoPTbzNjo2IAXfgP14QtOLPDWZgAAAABJRU5ErkJggg==
""")
GRID = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGeGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDIgNzkuMTY0NDYwLCAyMDIwLzA1LzEyLTE2OjA0OjE3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiIHhtcDpDcmVhdGVEYXRlPSIyMDIzLTAyLTEzVDE1OjM5OjQwKzAxOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMi0xN1QwODozODoxNCswMTowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMy0wMi0xN1QwODozODoxNCswMTowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoxMTQ4NjFkYi1mMDk2LTQ0ODUtYjMyNy1jN2Y3ZWNlYjRiYTMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTY4NjlFRkFBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpBNjg2OUVGQUEzQzkxMUVEQjVGRkY3MjA5MjZFQjM3MSIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkE2ODY5RUY3QTNDOTExRURCNUZGRjcyMDkyNkVCMzcxIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkE2ODY5RUY4QTNDOTExRURCNUZGRjcyMDkyNkVCMzcxIi8+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjExNDg2MWRiLWYwOTYtNDQ4NS1iMzI3LWM3ZjdlY2ViNGJhMyIgc3RFdnQ6d2hlbj0iMjAyMy0wMi0xN1QwODozODoxNCswMTowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDxwaG90b3Nob3A6RG9jdW1lbnRBbmNlc3RvcnM+IDxyZGY6QmFnPiA8cmRmOmxpPnhtcC5kaWQ6QTY4NjlFRkFBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzE8L3JkZjpsaT4gPC9yZGY6QmFnPiA8L3Bob3Rvc2hvcDpEb2N1bWVudEFuY2VzdG9ycz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz648dNvAAACH0lEQVQokZVRX0hTcRT+zu9uzt27u7nhZBKUexECZ+UQxYKyXrICCVkkZVAQ4V5Det2DIFG9VAzyoaA/oxgR9RCGUJrEnPYHC0REECUh0hzqbl7v3e7pYWzMvfU9nnO+73zfOcTM+B/YAICIUCSGBh7F13//WgYAX11g749bl6PlBGJmEBE674xf0jbM45nVxfCFK82vAeDZw+/dXn/wi+Kxv/9w/ehjZoYoqI4OBeqkc6dOq+uWZW2BqQZMNZZlbXWdcWfq/SISGhgdKlnyqKLh54qxPDu7vS67qCmZSE0BgOxyNr15tfHW5ZEcHlU0AACYGX3vVs8zM5gZjf3D6dh0ejA2nR5s7B9OF+vFGRsAbGadayduj90TEimGaelgqgEAw8xvd90du7+tWbJ7f/g5gEKGxfTk2aZmh9xxpHpGUSmUTKRyyUQqp6iiub3DuXAw7LSWUp+7SxncHlGb+vh3Td9BPSyaj1xszwJA8unM/MsX2UCVAztuj6gtEQItrePJk644AOzpS8fAVAsAmT+rIytPrsYAIDKSjZb+UI5DN+Jf82b+EwBIdunwt5vRlvK+2PVFImib+kRPb5vU09smaZv6BBGBiHYTyouy4vAyI8OMjKw4vOViuzYU7+3zq0EWPMeC53x+NVhp2YYK5I38pGDRCQCmbk5V9omZca31wBgA5ESVYlQr+5AztwpydrVK15ZslqEBwIPpmWP/AP8h6z0LPIXhAAAAAElFTkSuQmCC
""")
GREEN_ANIM = base64.decode("""
R0lGODlhBwAQAKIEAEhsBIXBDb/iQElsBP///wAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDYuMC1jMDAyIDc5LjE2NDQ2MCwgMjAyMC8wNS8xMi0xNjowNDoxNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2ZjcyNmRlMi05NTNmLTQwYmEtOTA3Yy0yNmVlMDg3ZTMxOWEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MTAxQzdERTdBMjQ1MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MTAxQzdERTZBMjQ1MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpiZmU5YTI5MS02MjBhLTQ3NTItOWRhZS1lOWU2MGM1YWViOWUiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo2ZWYxNzU1Zi0zYzE1LWY5NGMtODkzNC1jN2FjYjhjZTVhMDEiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4B//79/Pv6+fj39vX08/Lx8O/u7ezr6uno5+bl5OPi4eDf3t3c29rZ2NfW1dTT0tHQz87NzMvKycjHxsXEw8LBwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGgn56dnJuamZiXlpWUk5KRkI+OjYyLiomIh4aFhIOCgYB/fn18e3p5eHd2dXRzcnFwb25tbGtqaWhnZmVkY2JhYF9eXVxbWllYV1ZVVFNSUVBPTk1MS0pJSEdGRURDQkFAPz49PDs6OTg3NjU0MzIxMC8uLSwrKikoJyYlJCMiISAfHh0cGxoZGBcWFRQTEhEQDw4NDAsKCQgHBgUEAwIBAAAh+QQFAAAEACwAAAAABwAQAAADDki63P4wskEAoVTqzWMCACH5BAUAAAQALAAAAAABAAEAAAMCSAkAIfkEBQAABAAsAAAHAAEAAQAAAwIoCQAh+QQFAAAEACwAAAAAAQABAAADAkgJACH5BAUAAAQALAAABwABAAEAAAMCOAkAIfkEBQAABAAsAAAAAAEAAQAAAwJICQAh+QQFAAAEACwCAAcAAQABAAADAhgJACH5BAUAAAQALAAAAAABAAEAAAMCSAkAIfkEBQAABAAsAgAHAAEAAQAAAwIICQAh+QQFAAAEACwAAAAAAQABAAADAkgJACH5BAUAAAQALAIABwADAAEAAAMDOBQJACH5BAUAAAQALAAAAAABAAEAAAMCSAkAIfkEBQAABAAsAgAHAAMAAQAAAwMINAkAIfkEBQAABAAsAAAAAAEAAQAAAwJICQAh+QQFAAAEACwGAAcAAQABAAADAhgJACH5BAUAAAQALAAAAAABAAEAAAMCSAkAOw==
""")
RED_ANIM = base64.decode("""
R0lGODlhBwAQAJECAP8AAIUJCf///wAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDYuMC1jMDAyIDc5LjE2NDQ2MCwgMjAyMC8wNS8xMi0xNjowNDoxNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2ZjcyNmRlMi05NTNmLTQwYmEtOTA3Yy0yNmVlMDg3ZTMxOWEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTY4NjlFRjJBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QTY4NjlFRjFBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpiNDE5ZDEyZC1jYzY3LTQwYmQtODY5Mi0wMGY1MzMwZmI5N2YiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDplMGFkZGY2Zi1jZGMzLWI3NDQtYTRkNC02MGYyMTg4NjhjOGUiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4B//79/Pv6+fj39vX08/Lx8O/u7ezr6uno5+bl5OPi4eDf3t3c29rZ2NfW1dTT0tHQz87NzMvKycjHxsXEw8LBwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGgn56dnJuamZiXlpWUk5KRkI+OjYyLiomIh4aFhIOCgYB/fn18e3p5eHd2dXRzcnFwb25tbGtqaWhnZmVkY2JhYF9eXVxbWllYV1ZVVFNSUVBPTk1MS0pJSEdGRURDQkFAPz49PDs6OTg3NjU0MzIxMC8uLSwrKikoJyYlJCMiISAfHh0cGxoZGBcWFRQTEhEQDw4NDAsKCQgHBgUEAwIBAAAh+QQFAAACACwAAAAABwAQAAACDJSPqcuNIaB0tFpXAAAh+QQFAAACACwAAAAAAQABAAACAlQBACH5BAUAAAIALAYABwABAAEAAAICRAEAIfkEBQAAAgAsAAAAAAEAAQAAAgJUAQAh+QQFAAACACwGAAcAAQABAAACAkwBACH5BAUAAAIALAAAAAABAAEAAAICVAEAIfkEBQAAAgAsBAAHAAEAAQAAAgJEAQAh+QQFAAACACwAAAAAAQABAAACAlQBACH5BAUAAAIALAQABwABAAEAAAICTAEAIfkEBQAAAgAsAAAAAAEAAQAAAgJUAQAh+QQFAAACACwCAAcAAQABAAACAkQBACH5BAUAAAIALAAAAAABAAEAAAICVAEAIfkEBQAAAgAsAgAHAAEAAQAAAgJMAQAh+QQFAAACACwAAAAAAQABAAACAlQBACH5BAUAAAIALAAABwABAAEAAAICRAEAIfkEBQAAAgAsAAAAAAEAAQAAAgJUAQA7
""")

YELLOW_ANIM = base64.decode("""
R0lGODlhBwAQAKIGAKRrHKNqHKNrHKNqG///Vv//Vf///wAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDYuMC1jMDAyIDc5LjE2NDQ2MCwgMjAyMC8wNS8xMi0xNjowNDoxNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2ZjcyNmRlMi05NTNmLTQwYmEtOTA3Yy0yNmVlMDg3ZTMxOWEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTRCODI4RkFBNkQ5MTFFRDhBMTNDN0FFMjJBREQxNEYiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QTRCODI4RjlBNkQ5MTFFRDhBMTNDN0FFMjJBREQxNEYiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MWI3ODc4My01YjZiLTRmYjEtOWVhMC00Y2E1NTIxZjViZDUiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDphMzU5MjQxZi02ZTQ5LWY1NDQtODRmMy1hZWYyNzIxZWE3MTciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4B//79/Pv6+fj39vX08/Lx8O/u7ezr6uno5+bl5OPi4eDf3t3c29rZ2NfW1dTT0tHQz87NzMvKycjHxsXEw8LBwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGgn56dnJuamZiXlpWUk5KRkI+OjYyLiomIh4aFhIOCgYB/fn18e3p5eHd2dXRzcnFwb25tbGtqaWhnZmVkY2JhYF9eXVxbWllYV1ZVVFNSUVBPTk1MS0pJSEdGRURDQkFAPz49PDs6OTg3NjU0MzIxMC8uLSwrKikoJyYlJCMiISAfHh0cGxoZGBcWFRQTEhEQDw4NDAsKCQgHBgUEAwIBAAAh+QQFAAAGACwAAAAABwAQAAADDmi63P4wsmAoMEPqzWUCACH5BAUAAAYALAAABwAHAAEAAAMECKYaCQAh+QQFAAAGACwCAAcABQABAAADBCgWJgkAIfkEBQAABgAsAAAHAAcAAQAAAwUYNiYGCQAh+QQFAAAGACwAAAcABwABAAADBEi2YJIAIfkEBQAABgAsAAAAAAEAAQAAAwJoCQAh+QQFAAAGACwAAAcABwABAAADBAhW1pAAIfkEBQAABgAsAAAHAAcAAQAAAwQYRqaTACH5BAUAAAYALAIABwAFAAEAAAMECEYmCQAh+QQFAAAGACwAAAcABwABAAADBAi2CwkAIfkEBQAABgAsAgAHAAUAAQAAAwQYNlYJACH5BAUAAAYALAIABwADAAEAAAMDKAYJADs=
""")

SUN_SUM = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAAXNSR0IArs4c6QAAAJZlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgExAAIAAAARAAAAWodpAAQAAAABAAAAbAAAAAAAAABIAAAAAQAAAEgAAAABd3d3Lmlua3NjYXBlLm9yZwAAAAOgAQADAAAAAQABAACgAgAEAAAAAQAAAAqgAwAEAAAAAQAAAAoAAAAAFL8o+gAAAAlwSFlzAAALEwAACxMBAJqcGAAAAi1pVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+d3d3Lmlua3NjYXBlLm9yZzwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzI8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgp0/eNQAAABK0lEQVQYGU2QvUpDQRCFz+xujJCACKKgFoKdjyAEa30AYyX+pIqgtfaCT2CV2ElQe7E26WMj2JqAYKGF5N549+7uuJNIyIEtZvg45+yAGYQppe3qmbypFYQxRODhc7UWmD9KW/ePXumu4cACJp3qtgJWiO4aRhYCsaIl93p8FMcDjh72Zf8hDPLcMd6FmcQKpOdmmsg8IH5Fgu3/nBc3W1cjMG3vncb4bmG+dKlndcUPnQWRQpYbm9qeIlP3wa3FCiM+9v0XSQoT5z7yQPSPYp5E81vtEOXCDZIcfmChywb2K4vRt+No4ZPO7o4KarGwUDI+tRc+c0YTrtnztwP1ypXW0zg60DIp/jQbzYb7tSeKVF0+IZCmsCpmRo4pd5JBpKHX4f2osjjJTpg/YduKRIzK4+cAAAAASUVORK5CYII=
""")

PLUG_SUM = base64.decode("""
R0lGODdhCgAKAOYAAAAAAAArqk0sJVQ/SVVASVVVqkBsADlvPDR5pkF6pgCAgECAQECAgICAgEaMAF+NAN+NAEqOtWKQO0OSRU2SRTyYnTOZM2aZM12bXWubA4ybnWieXeigOLyiADmjSdmjOUmlSACnclqnSFyoRzqpOmWpcrepAACq/zCq3VWqqlWq/6qq/9GqAGOrOQCs4Eau6W63n3+864C864+9FEC/QIC/QJa/FLO/v7XAnZ3E4kvJ7V7J7ZrLVqDLVpnMM4DNLJrNS1XP75TPK4zSRmHT/2jT/5XTRsXU4nrVdY7YRY7Y+8fZ5U/a+pvaRZ/ac2Hb98jb6Vnc/8fc6n7e/93x+P/48AD//4D//+H//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAkAAFoALAAAAAAKAAoAAAc/gFqCUoJQgodaR4JLiFpTSlFFMS+IQUxPOi4oiDNCGRktDohARgcSIxOIPE0PBiIYjU4wFSWNghEJtoIDAoiBACH5BAkAAFoALAIAAAAGAAoAAAc4gFpSWlpQhEeES1pTSlFFMS9BTE86LigzQhkZLQ5ARgcSIxM8TQ8GIhhaTjAVJYRaEQmvWgMChIEAIfkECQAAWgAsAgAAAAYACgAABziAWlJaWlCER4RLWlNKUUUxL0FMTzouKDNCGRktDkBGBxIjEzxNDwYiGFpOMBUlhFoRCa9aAwKEgQAh+QQJAABaACwCAAAABgAKAAAHOIBaUlpaUIRHhEtaU0pRRTEvQUxPOi4oM0IZGS0OQEYHEiMTPE0PBiIYWk4wFSWEWhEJr1oDAoSBACH5BAkAAFoALAIAAAAGAAoAAAc4gFpSWlpQhEeES1pTSlFFMS9BTE86LigzQhkZLQ5ARgcSIxM8TQ8GIhhaTjAVJYRaEQmvWgMChIEAIfkECQAAWgAsAgAAAAYACgAABziAWlJaWlCER4RLWlNKUUUxL0FMTzouKDNCGRktDkBGBxIjEzxNDwYiGFpOMBUlhFoRCa9aAwKEgQAh+QQJAABaACwCAAAABgAKAAAHOIBaUlpaUIRHhEtaU0pRRTEvQUxPOi4oM0IZGS0OQEYHEiMTPE0PBiIYWk4wFSWEWhEJr1oDAoSBACH5BAkAAFoALAIAAAAGAAoAAAc4gFpSWlpQhEeES1pTSlFFMS9BTE86LigzQhkZLQ5ARgcSIxM8TQ8GIhhaTjAVJYRaEQmvWgMChIEAIfkECQAAWgAsAgAAAAYACgAABziAWlJaWlCER4RLWlNKUUUxL0FMTzouKDNCGRktDkBGBxIjEzxNDwYiGFpOMBUlhFoRCa9aAwKEgQAh+QQJAABaACwCAAAABgAKAAAHOIBaUlpaUIRHhEtaU0pRRTEvQUxPOi4oM0IZGS0OQEYHEiMTPE0PBiIYWk4wFSWEWhEJr1oDAoSBACH5BAkAAFoALAIAAAAGAAoAAAc4gFpSWlpQhEeES1pTSlFFMS9BTE86LigzQhkZLQ5ARgcSIxM8TQ8GIhhaTjAVJYRaEQmvWgMChIEAIfkECQAAWgAsAgAAAAYACgAABziAWlJaWlCER4RLWlNKUUUxL0FMTzouKDNCGRktDkBGBxIjEzxNDwYiGFpOMBUlhFoRCa9aAwKEgQAh+QQJAABaACwCAAAABgAKAAAHOIBaUlpaUIRHhEtaU0pRRDIvQUxPOy4oNj8mHSQPQEMcHyAUPUksEB4bWkg4GiGEWhEIr1oEAoSBACH5BAkAAFoALAIAAAAGAAoAAAc4gFpSWlpQhEeES1pTSlFEMi9BTE87Lig2PyYdJA9AQxwfIBQ9SSwQHhtaSDgaIYRaEQivWgQChIEAIfkECQAAWgAsAgAAAAYACgAABziAWlJaWlCER4RLWlNKUUQyL0FMTzsuKDY/Jh0kD0BDHB8gFD1JLBAeG1pIOBohhFoRCK9aBAKEgQAh+QQJAABaACwCAAAABgAKAAAHOIBaUlpaUIRHhEtaU0pRRDIvQUxPOy4oNj8mHSQPQEMcHyAUPUksEB4bWkg4GiGEWhEIr1oEAoSBACH5BAkAAFoALAIAAAAGAAoAAAc4gFpSWlpQhEeES1pTSlFEMi9BTE87Lig2PyYdJA9AQxwfIBQ9SSwQHhtaSDgaIYRaEQivWgQChIEAIfkECQAAWgAsAgAAAAYACgAABziAWlJaWlCER4RLWlNKUUQyL0FMTzsuKDY/Jh0kD0BDHB8gFD1JLBAeG1pIOBohhFoRCK9aBAKEgQAh+QQJAABaACwCAAAABgAKAAAHOIBaUlpaUIRHhEtaU0pRRDIvQUxPOy4oNj8mHSQPQEMcHyAUPUksEB4bWkg4GiGEWhEIr1oEAoSBACH5BAkAAFoALAIAAAAGAAoAAAc4gFpSWlpQhEeES1pTSlFEMi9BTE87Lig2PyYdJA9AQxwfIBQ9SSwQHhtaSDgaIYRaEQivWgQChIEAOw==
""")

EMPTY = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAAcAAAAQCAYAAADagWXwAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKn2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDIgNzkuMTY0NDYwLCAyMDIwLzA1LzEyLTE2OjA0OjE3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIiB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDItMTNUMTQ6MTc6NTcrMDE6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9InNSR0IgSUVDNjE5NjYtMi4xIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjQ1OWVjNDYzLThiMzYtNDc2ZC05YjY2LTQ2ZjM2NmIzNTZmMCIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmQ2ZGY2MGY5LWViZTItY2Y0OS1hMDI5LTkwZjE4YzQ4OGUyNyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjZmNzI2ZGUyLTk1M2YtNDBiYS05MDdjLTI2ZWUwODdlMzE5YSIgdGlmZjpPcmllbnRhdGlvbj0iMSIgdGlmZjpYUmVzb2x1dGlvbj0iNzIwMDAwLzEwMDAwIiB0aWZmOllSZXNvbHV0aW9uPSI3MjAwMDAvMTAwMDAiIHRpZmY6UmVzb2x1dGlvblVuaXQ9IjIiIGV4aWY6Q29sb3JTcGFjZT0iMSIgZXhpZjpQaXhlbFhEaW1lbnNpb249IjciIGV4aWY6UGl4ZWxZRGltZW5zaW9uPSIxNiI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NmY3MjZkZTItOTUzZi00MGJhLTkwN2MtMjZlZTA4N2UzMTlhIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTEzVDE0OjE3OjU3KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6Y2NhNWUzNTYtOGMwNC00NDdmLWI5M2EtYmI0NGQ4NjJmNTBlIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTEzVDE0OjQ0OjIzKzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6M2E4ODlkOTMtYzIzYi00OWE5LWFiMzAtZjExNzc1ODMyYTUxIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NDU5ZWM0NjMtOGIzNi00NzZkLTliNjYtNDZmMzY2YjM1NmYwIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6M2E4ODlkOTMtYzIzYi00OWE5LWFiMzAtZjExNzc1ODMyYTUxIiBzdFJlZjpkb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6ZTBhZGRmNmYtY2RjMy1iNzQ0LWE0ZDQtNjBmMjE4ODY4YzhlIiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NmY3MjZkZTItOTUzZi00MGJhLTkwN2MtMjZlZTA4N2UzMTlhIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+55hYNAAAABdJREFUGJVj/P//PwMuwIRTZlRykEoCAIOxAx1aidCyAAAAAElFTkSuQmCC
""")

def render_fail(rep):
    content = json.decode(rep.body())
    return render.Root(render.Box(render.WrappedText(str(rep.status_code) + " : " + content["String"], color = RED)))

def get_energy_details(site_id, api_key, tz, interval):
    now = time.now().in_location(tz)
    start_string = ""
    now_string = humanize.time_format("yyyy-MM-dd HH:mm:ss", now)
    if interval == "day":  # from the start of today to now, just set time to 00:00
        start_string = humanize.time_format("yyyy-MM-dd 00:00:00", now)
        time_unit = "DAY"
    elif interval == "24h":  # the last 24hr from now, use a now-duration
        duration = 24 * time.hour
        start_time = now - duration
        start_string = humanize.time_format("yyyy-MM-dd HH:mm:ss", start_time)
        time_unit = "DAY"
    elif interval == "month":  # from the start of the month to now, just set day to 01 and time to 00:00
        start_time = humanize.time_format("yyyy-MM-01 00:00:00", now)
        time_unit = "MONTH"
    elif interval == "year":  # from the start of the year to now, set month/day to 01/01 and time to 00:00
        start_string = humanize.time_format("yyyy-01-01 00:00:00", now)
        time_unit = "YEAR"
    else:
        return None
    url = URL_AUT.format(site_id, start_string, now_string)
    rep = http.get(
        url,
        params = {
            "api_key": api_key,
            "startTime": start_string,
            "endTime": now_string,
            "timeUnit": time_unit,
        },
        ttl_seconds = CACHE_TTL,
    )

    if rep.status_code != 200:
        print(rep.status_code)
        print(rep.body())
        return None

    return rep.json()["energyDetails"]

def get_autarky_percent(site_id, api_key, tz, interval):
    energy_details = get_energy_details(site_id, api_key, tz, interval)
    if not energy_details:
        return 0
    self_consumption = 0
    consumption = 0
    for m in energy_details["meters"]:
        if m["type"] == "SelfConsumption":
            for v in m["values"]:
                self_consumption += v["value"]
        elif m["type"] == "Consumption":
            for v in m["values"]:
                consumption += v["value"]
    if consumption == 0:
        return 100
    return int(self_consumption / consumption * 100)

def get_time_zone(config, site_id, api_key):
    url = URL_SITE.format(site_id)
    rep = http.get(url, params = {"api_key": api_key}, ttl_seconds = CACHE_TTL)
    default_tz = "Etc/UTC"
    if rep.status_code == 200:
        o = json.decode(rep.body())
        if "details" in o and "location" in o["details"] and "timeZone" in o["details"]["location"]:
            default_tz = o["details"]["location"]["timeZone"]

    return config.get("$tz", default_tz)

def main(config):
    api_key = config.str("api_key")
    site_id = humanize.url_encode(config.str("site_id", ""))
    has_battery = False  #  assume no battery until we have data

    if api_key and site_id:
        tz = get_time_zone(config, site_id, api_key)
        url = URL.format(site_id)
        rep = http.get(url, params = {"api_key": api_key}, ttl_seconds = CACHE_TTL)
        if rep.status_code != 200:
            print(rep.body())
            return render_fail(rep)
        o = json.decode(rep.body())

        consumption = 0
        production = 0
        if config.bool("show_summary", False) == True:
            today_energy = get_energy_details(site_id, api_key, tz, "day")
            if today_energy:
                for m in today_energy["meters"]:
                    if m["type"] == "Consumption":
                        for v in m["values"]:
                            consumption += v["value"]
                    elif m["type"] == "Production":
                        for v in m["values"]:
                            production += v["value"]

        if config.bool("show_autarky", False) == True:
            autarky_day = get_autarky_percent(site_id, api_key, tz, "day")
            autarky_24h = get_autarky_percent(site_id, api_key, tz, "24h")
            autarky_month = get_autarky_percent(site_id, api_key, tz, "month")
            autarky_year = get_autarky_percent(site_id, api_key, tz, "year")
        else:
            autarky_day = None
            autarky_24h = None
            autarky_month = None
            autarky_year = None
    else:
        print("using dummy data")
        o = DUMMY_DATA
        consumption = 3141
        production = 6282
        autarky_day = 99
        autarky_24h = 97
        autarky_month = 95
        autarky_year = 76
    frames = []

    o = o["siteCurrentPowerFlow"]
    unit = o["unit"]
    connections = o["connections"]
    if "STORAGE" in o:
        has_battery = True

    if o["PV"]["status"] == "Active":
        solar_anim = GREEN_ANIM
        solar_icon = SOLAR
        solar_value = o["PV"]["currentPower"]
        solar_color = GREEN
    elif has_battery:  # only do this if we have battery data
        # change to battery data even though it's still called solar
        solar_icon = battery_level_mains[int(o["STORAGE"]["chargeLevel"] / 25)]  # will be integer 0 - 3
        solar_value = o["STORAGE"]["currentPower"]
        if solar_value == 0:
            solar_anim = EMPTY
            solar_color = GRAY
        elif solar_value > 0:
            solar_anim = RED_ANIM
            solar_color = WHITE
        else:
            solar_anim = YELLOW_ANIM
            solar_color = WHITE
    else:
        solar_anim = EMPTY
        solar_icon = SOLAR
        solar_value = o["PV"]["currentPower"]  # should be zero
        solar_color = GRAY

    grid_anim = EMPTY
    grid_color = GRAY
    grid_rate = o["GRID"]["currentPower"]
    if o["GRID"]["status"] == "Active":
        if {"from": "Load", "to": "GRID"} in connections:
            grid_anim = GREEN_ANIM
            grid_color = GREEN
        elif {"from": "GRID", "to": "Load"} in connections:
            grid_anim = RED_ANIM
            grid_color = RED

    # MAIN FRAME
    #######################################
    main_frame = render.Row(
        children = [
            render.Box(
                height = 32,
                width = 15,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "space_evenly",
                    children = [
                        render.Image(src = solar_icon, height = 15),
                        render.Padding(
                            pad = (1, 0, 0, 0),
                            child = render.Column(
                                cross_align = "center",
                                children = [
                                    render.Text(format_power(abs(solar_value)), color = solar_color),
                                    render.Text(unit, color = GRAY),
                                ],
                            ),
                        ),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 10,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "start",
                    children = [
                        render.Image(src = solar_anim),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 15,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "space_evenly",
                    children = [
                        render.Image(src = HOUSE, height = 15),
                        render.Padding(
                            pad = (0, 0, 0, 0),
                            child = render.Column(
                                cross_align = "center",
                                children = [
                                    render.Text(format_power(o["LOAD"]["currentPower"])),
                                    render.Text(unit, color = GRAY),
                                ],
                            ),
                        ),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 10,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "start",
                    children = [
                        render.Image(src = grid_anim),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 14,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "space_evenly",
                    children = [
                        render.Image(src = GRID),
                        render.Padding(
                            pad = (0, 0, 0, 0),
                            child = render.Column(
                                cross_align = "center",
                                children = [
                                    render.Text(format_power(abs(grid_rate)), color = grid_color),
                                    render.Text(unit, color = GRAY),
                                ],
                            ),
                        ),
                    ],
                ),
            ),
        ],
    )

    if config.bool("show_main", True):
        frames.append(main_frame)

    # CHARGE FRAME shows charge/discharge rate and state of charge percent
    #########################################################
    if config.bool("show_char", False) and has_battery:
        charge_level = o["STORAGE"]["chargeLevel"]
        storage_power = o["STORAGE"]["currentPower"]
        if o["STORAGE"]["status"] == "Discharging":
            BATTERY_FLOW_ICON = BATTERY_DISCHARGE_ANIMATION_10x10
            flow_color = RED
        elif o["STORAGE"]["status"] == "Charging":
            BATTERY_FLOW_ICON = BATTERY_CHARGE_ANIMATION_10x10
            flow_color = GREEN
        else:
            BATTERY_FLOW_ICON = BATTERY_NOFLOW_ANIMATION_10x10
            flow_color = GRAY

        charge_frame = render.Stack(
            children = [
                render.Column(
                    main_align = "space_evenly",  # this controls position of children, start = top
                    expanded = True,
                    cross_align = "center",
                    children = [
                        render.Row(
                            expanded = True,
                            main_align = "space_evenly",
                            cross_align = "center",
                            children = [
                                render.Text(" ", height = 1),
                            ],
                        ),
                        render.Row(
                            #expanded = True,
                            children = [
                                render.Column(
                                    expanded = True,
                                    main_align = "space_around",
                                    cross_align = "center",
                                    children = [
                                        render.Image(src = battery_level_icons[int(charge_level / 25)]),
                                        render.Image(src = BATTERY_FLOW_ICON),
                                    ],
                                ),
                                render.Column(
                                    expanded = True,
                                    main_align = "space_around",
                                    cross_align = "end",
                                    children = [
                                        render.Text(
                                            content = " " + str(charge_level) + " %",
                                            font = "5x8",
                                            #font = "6x13",
                                            color = soc_color[int(charge_level / 25)],
                                        ),
                                        render.Text(
                                            content = " " + humanize.float("#,###.##", float(abs(storage_power))) + " " + unit,
                                            font = "5x8",
                                            #font = "6x13",
                                            #min = a if a < b else b
                                            color = flow_color,
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        )
        frames.append(charge_frame)

    # SOLAR PRODUCTION FRAME
    if config.bool("show_prod", False):
        production_frame = render.Box(
            render.Row(
                expanded = True,
                cross_align = "center",
                main_align = "space_evenly",
                children = [
                    render.Image(src = SUN),
                    render.Text(
                        content = humanize.float("#,###.##", float(o["PV"]["currentPower"])) + " " + unit,
                        font = "5x8",
                        color = GREEN,
                    ),
                ],
            ),
        )
        frames.append(production_frame)

    # CONSUMPTION FRAME
    if config.bool("show_cons", False):
        consumption_frame = render.Box(
            render.Row(
                expanded = True,
                cross_align = "center",
                main_align = "space_evenly",
                children = [
                    render.Image(src = PLUG),
                    render.Text(
                        content = humanize.float("#,###.##", float(o["LOAD"]["currentPower"])) + " " + unit,
                        #font = "6x13",
                        font = "5x8",
                        color = RED,
                    ),
                ],
            ),
        )
        frames.append(consumption_frame)

    if config.bool("show_summary", False):
        # summary page for daily accumulated generation and consumption
        ###############################################
        summary_frame = render.Stack(
            children = [
                render.Column(
                    main_align = "space_evenly",  # this controls position of children, start = top
                    expanded = True,
                    cross_align = "center",
                    children = [
                        render.Row(
                            expanded = True,
                            main_align = "space_evenly",
                            cross_align = "center",
                            children = [
                                render.Text("Energy Today"),
                            ],
                        ),
                        render.Row(
                            #expanded = True,
                            children = [
                                render.Column(
                                    expanded = True,
                                    main_align = "space_around",
                                    cross_align = "center",
                                    children = [
                                        render.Image(src = SUN_SUM),
                                        render.Image(src = PLUG_SUM),
                                    ],
                                ),
                                render.Column(
                                    expanded = True,
                                    main_align = "space_around",
                                    cross_align = "end",
                                    children = [
                                        render.Text(
                                            content = " " + humanize.float("#,###.##", production / 1000) + " kWh",
                                            font = "5x8",
                                            color = GREEN,
                                        ),
                                        render.Text(
                                            content = " " + humanize.float("#,###.##", consumption / 1000) + " kWh",
                                            font = "5x8",
                                            color = RED,
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        )
        frames.append(summary_frame)

    # AUTARKY FRAME
    if config.bool("show_autarky", False):
        autarky_frame = render.Stack(
            children = [
                render.Box(
                    height = 32,
                    width = 64,
                    child = render.Image(src = AUTARKY_16x16),
                ),
                render.Column(
                    # column for the top
                    main_align = "start",
                    expanded = True,
                    children = [
                        # top row
                        render.Row(
                            expanded = True,
                            main_align = "space_between",
                            children = [
                                render.Row([render.Text("24hr:", font = "tom-thumb", color = GRAY)]),
                                render.Row([render.Text("Month:", font = "tom-thumb", color = GRAY)]),
                            ],
                        ),

                        # second row
                        render.Row(
                            expanded = True,
                            main_align = "space_between",
                            cross_align = "end",
                            children = [
                                render.Row([render.Text(" {}%".format(autarky_24h), color = GREEN)]),
                                render.Row([render.Text("{}%".format(autarky_month), color = GREEN)]),
                            ],
                        ),
                    ],
                ),
                render.Column(
                    main_align = "end",
                    expanded = True,
                    children = [
                        # third row
                        render.Row(
                            expanded = True,
                            main_align = "space_between",
                            children = [
                                render.Row([render.Text("Today:", font = "tom-thumb", color = GRAY)]),
                                render.Row([render.Text("Year:", font = "tom-thumb", color = GRAY)]),
                            ],
                        ),

                        # fourth row
                        render.Row(
                            expanded = True,
                            main_align = "space_between",
                            cross_align = "end",
                            children = [
                                render.Row([render.Text(" {}%".format(autarky_day), color = GREEN)]),
                                render.Row([render.Text("{}%".format(autarky_year), color = GREEN)]),
                            ],
                        ),
                    ],
                ),
            ],
        )
        frames.append(autarky_frame)

    if len(frames) == 1:
        return render.Root(frames[0])
    elif len(frames) == 0:
        return render.Root(main_frame)
    else:
        return render.Root(
            #show_full_animation = True,
            delay = int(config.get("frame_delay", "3")) * 1000,
            child = render.Animation(children = frames),
        )

def format_power(p):
    if p and p < 10:
        return humanize.float("#,###.#", p)
    elif p:
        return humanize.float("#,###.", p)
    else:
        return "0"

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "api_key",
                name = "API key",
                desc = "API key for the SolarEdge monitoring API.",
                icon = "key",
            ),
            schema.Text(
                id = "site_id",
                name = "Site ID",
                desc = "The site ID, available from the monitoring portal.",
                icon = "solarPanel",
            ),
            schema.Toggle(
                id = "show_main",
                name = "Show Main Stats",
                desc = "Realtime solar production, home consumption and grid usage. Note : Multiple screen selections will disable animations. If you prefer animated screens, run separate instances of the app and select a screen per instance.",
                icon = "solarPanel",
                default = True,
            ),
            schema.Toggle(
                id = "show_char",
                name = "Show Battery",
                desc = "State of charge of the battery and battery flow.",
                icon = "carBattery",
                default = False,
            ),
            schema.Toggle(
                id = "show_prod",
                name = "Show Current Production",
                desc = "Realtime solar energy production.",
                icon = "sun",
                default = False,
            ),
            schema.Toggle(
                id = "show_cons",
                name = "Show Current Consumption",
                desc = "Realtime energy consumption.",
                icon = "plugCircleBolt",
                default = False,
            ),
            schema.Toggle(
                id = "show_summary",
                name = "Show Daily Summary",
                desc = "Accumulated daily energy production and consumption.",
                icon = "chartLine",
                default = True,
            ),
            schema.Toggle(
                id = "show_autarky",
                name = "Show Autarky Frame",
                desc = "Display the autarky values for day, week, month, year.",
                icon = "compress",
                default = False,
            ),
            schema.Dropdown(
                id = "frame_delay",
                name = "Seconds per frame",
                desc = "This option is only used if multiple screens are selected.  (Multiple screens will disable animations.)",
                icon = "clock",
                default = "3",
                options = [
                    schema.Option(
                        display = "1 sec",
                        value = "1",
                    ),
                    schema.Option(
                        display = "2 sec",
                        value = "2",
                    ),
                    schema.Option(
                        display = "3 sec",
                        value = "3",
                    ),
                    schema.Option(
                        display = "4 sec",
                        value = "4",
                    ),
                    schema.Option(
                        display = "5 sec",
                        value = "5",
                    ),
                ],
            ),
        ],
    )
