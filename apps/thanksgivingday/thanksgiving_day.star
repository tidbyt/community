"""
Applet: Thanksgiving Day
Summary: Thanksgiving countdown
Description: Simple daily countdown until Thanksgiving Day holiday in the U.S.
Author: J. Alex Cooney
"""

load("encoding/base64.star", "base64")
load("math.star", "math")
load("render.star", "render")
load("time.star", "time")

# Load Turkey icon from base64 encoded data
TRK_ICON = base64.decode("""
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
""")

def main(config):
    timezone = config.get("timezone") or "America/New_York"
    now = time.now().in_location(timezone)

    thanksgiving_year = now.year

    thanksgiving_day = math.ceil(28 - (5 + now.year + now.year / 4 - now.year / 100 + now.year / 400) % 7)

    if 11 == now.month:
        if 0 > thanksgiving_day - now.day:
            thanksgiving_year = now.year + 1

    if now.month > 11:
        thanksgiving_year = now.year + 1

    thanksgiving = time.time(year = thanksgiving_year, month = 11, day = math.ceil(28 - (5 + now.year + now.year / 4 - now.year / 100 + now.year / 400) % 7), hour = 0, minute = 0, location = timezone)

    days_til_thanksgiving = math.ceil(time.parse_duration(thanksgiving - now).seconds / 86400)

    return render.Root(
        delay = 1000,
        child = render.Row(
            # Row lays out its children horizontally
            main_align = "space_evenly",
            cross_align = "center",
            expanded = True,
            children = [
                render.Image(src = TRK_ICON),
                render.WrappedText(
                    content = "%s\ndays!" % days_til_thanksgiving,
                    font = "Dina_r400-6",
                    color = "#a60e00",
                    align = "center",
                ),
            ],
        ),
    )
