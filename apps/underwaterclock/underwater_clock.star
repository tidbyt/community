"""
Applet: Underwater Clock
Summary: Time underwater
Description: Displays the current time in an underwater scene that changes with the time of day.
Author: asea-aranion
"""

load("encoding/base64.star", "base64")
load("encoding/json.star", "json")
load("math.star", "math")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")

shark = [
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAeklEQVRoBe3TsQ2AIBBG4TNxLStqt7JnBmewJFZUJhYwEQQTknOG/11ztO/LYcYggAACCCCAAAIIIIAAAggggICawKIWHI+z+WYZAB9+5+szCNtuq9dQeY/wOTIXMILfp/7OP6cyHTS3/xaaAlQjgAACCCCAAAIICAt0DQMRoYn6BZ0AAAAASUVORK5CYII=""",
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAgElEQVRoBe3TsQ2AIBCFYUhcy4rareydwRksiRWViYVOpDmSI4QV3n/NQajed0cIFAIIIIAAAggggAACCCCAAAIIKAls6/5FtcBjXgkAm7QHP8tRj2leap/8QaV7cM8rsQEW9r7etgV2L/mxplv9t9BVIDkCCCCAAAIIIICAsMAPtyUUVCYnc/gAAAAASUVORK5CYII=""",
]

fish = [
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAlklEQVRoBe3UsQ2AIBCFYdzAxjmcxt4RHMUR7J3GOWzcQHMmFxJyoYIg+NtwCkLeJ+gcFwIIIICAF7jW45Y7abX2ve1VnRUpDN4voznOerf6Zxr+Lzug+g+WLcB27u+/QFqtsy1WcOLo2Q6Dz8MUHV8wR/qlNXzrOyC9HDMigAACCCCAAAIIIIAAAggggAACCCCAwJcFHrC1LyEb3owzAAAAAElFTkSuQmCC""",
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAlklEQVRoBe3UsQ2AIBCFYdzAxjmcxt4RHMUR7J3GOWzcQHMmFxJyCdUFwd+GUwTyPsEQuBBAAAEEosC1HrfcSat17G2v6qxIafB+Gc33rLHVP9Pwf9kB1X8w1wDbub//A2m1dl2wwOTZs50Gn4cpO6ZADp8lNXzLO8BHjlkRQAABBBBAAAEEEEAAAQQQQAABBBBA4KsCD1O9LyE3q884AAAAAElFTkSuQmCC""",
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAj0lEQVRoBe3TsRGAIAyFYdzAxjmcxt4RHIUR7J3GOWzcQC5yaeJx0BJ/G+JB7nwfMQQeBBBAAIEscMfzkUpWrb3bDDagDT5u8+eM7XHzruH/NAHVy9uv4/0tZNW62tTRgabxtsHXaWnq68ih/Kka3usElJOzgwACCCCAAAIIIIAAAggggAACCCCAAAIIOBRIrd0vIat8W2gAAAAASUVORK5CYII=""",
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAlElEQVRoBe3UsQ2AIBCFYdzAhjmcxt4RHIUR7J3GOWzcQHOaa86GAoI5fxrORLi8TyQEBgIIIIDAI3Ck7ZRKZq2923Q2oA3ez8PrHbvGzbOG/9MJcPPxqgVZ9vW+F2TWulqzBhtn/d82+BTHrHUN8pRvqeG9noDyYuyIAAIIIIAAAggggAACCCCAAAIIIIAAAl8WuABWRS8hKydnAgAAAABJRU5ErkJggg==""",
]

seagrass = [
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAgElEQVRoBe3RQQqAIBAFUOlwHaATdfNaCS50MeDAgK+NITb+/2rNQ4AAAQIECBAgQIAAAQIECBAgQIAAAQIE0gTu9/nShlcaPCs626uUeWuWVdnV/tbLA8OuwNnw0bHs+B4elPhBKkDPXbV8z5e29uJ9Tbuo+uDjAar/IPlOFvgBsWIXAh0kLU0AAAAASUVORK5CYII=""",
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAfklEQVRoBe3RwQnAIBAEQJPiUkAqsqIUkOYSfAgB8eHjIOL4UQ5Z3DEliwABAgQIECBAgAABAgQIECBAgAABAgQIhAgc+XxCgmcIXap8r2xvPsMHDr2xFP2W7Z2HQoMu7xG5d762kvvn4hG9m8wKUPfmwiqD5QFW+Wg9ZxR4ARHeHRe5Ov/LAAAAAElFTkSuQmCC""",
    """iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAAAXNSR0IArs4c6QAAAERlWElmTU0AKgAAAAgAAYdpAAQAAAABAAAAGgAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAAAQKADAAQAAAABAAAAIAAAAADfYzX9AAAAfElEQVRoBe3Syw2AIAwAUHU4B3AiJnIAl9Nw6MWEI9CEx6WEQz+vbJtDgAABAgQIECBAgAABAgQIECBAgAABAgS6CZzlerslz5a4NWzrfUb/x4yiy9Ssm45t/2MWhG4/IAZ+yr1nGXZ4H4FQY9yHN5Gh4NLDZ1iAHgi0BT7VnxsC3TQwqwAAAABJRU5ErkJggg==""",
]

scenes = [
    """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""",
]

default_location = {
    "lat": 40.678,
    "lng": -73.944,
    "locality": "Brooklyn, New York",
    "timezone": "America/New_York",
}

def main(config):
    location = config.get("location")
    dec_location = json.decode(location) if location else default_location
    time_now = time.now().in_location(dec_location.get("timezone"))
    hour = int(time_now.format("15"))

    hour_2 = int(math.mod(hour - 2, 23))
    hour_1 = int(math.mod(hour - 1, 23))

    speed = float(config.get("speed", "15"))

    use_24hour = config.bool("24hour", False)
    time_format_colon = "3:04 PM"
    time_format_blank = "3 04 PM"
    if (use_24hour):
        time_format_colon = "15:04"
        time_format_blank = "15 04"

    show_fish = config.bool("showFish", True)

    animations = [
        render.Box(
            child = render.Animation(
                children = get_frames(hour_2, hour_1, hour, speed),
            ),
        ),
        render.Box(
            child = render.Animation(
                children = [
                    render.Text(content = time_now.format(time_format_colon), font = "Dina_r400-6"),
                    render.Text(content = time_now.format(time_format_blank), font = "Dina_r400-6"),
                ],
            ),
        ),
        render.Box(
            child = render.Animation(
                children = [
                    render.Image(base64.decode(seagrass[0])),
                    render.Image(base64.decode(seagrass[1])),
                    render.Image(base64.decode(seagrass[0])),
                    render.Image(base64.decode(seagrass[2])),
                ],
            ),
        ),
    ]

    if (show_fish):
        animations.append(
            render.Box(
                child = render.Animation(
                    children = [
                        render.Image(base64.decode(fish[3])),
                        render.Image(base64.decode(fish[0])),
                        render.Image(base64.decode(fish[1])),
                        render.Image(base64.decode(fish[2])),
                    ],
                ),
            ),
        )
        animations.append(
            render.Box(
                child = render.Animation(
                    children = [
                        render.Image(base64.decode(shark[0])),
                        render.Image(base64.decode(shark[1])),
                        render.Image(base64.decode(shark[1])),
                        render.Image(base64.decode(shark[0])),
                    ],
                ),
            ),
        )

    return render.Root(
        delay = 1000,
        child = render.Stack(
            children = animations,
        ),
    )

def get_frames(hour_2, hour_1, hour, cycle_speed):
    frames = [
        render.Image(base64.decode(scenes[hour_2])),
        render.Image(base64.decode(scenes[hour_1])),
    ]
    for _i in range(2, int(cycle_speed)):
        frames.append(render.Image(base64.decode(scenes[hour])))
    return frames

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Location(
                id = "location",
                name = "Location",
                icon = "locationDot",
                desc = "Determines timezone for clock and scene day/night cycle.",
            ),
            schema.Toggle(
                id = "24hour",
                name = "24 Hour Time",
                icon = "clock",
                desc = "Choose whether to display 12-hour time (off) or 24-hour time (on).",
                default = False,
            ),
            schema.Toggle(
                id = "showFish",
                name = "Show Fish",
                icon = "fish",
                desc = "Choose whether to display animated fish or not.",
                default = True,
            ),
            schema.Dropdown(
                id = "speed",
                name = "App Cycle Speed",
                icon = "stopwatch",
                desc = "Determines duration of final scene.",
                default = "15",
                options = [
                    schema.Option(
                        display = "15 sec",
                        value = "15",
                    ),
                    schema.Option(
                        display = "10 sec",
                        value = "10",
                    ),
                    schema.Option(
                        display = "7.5 sec",
                        value = "7.5",
                    ),
                    schema.Option(
                        display = "5 sec",
                        value = "5",
                    ),
                ],
            ),
        ],
    )
