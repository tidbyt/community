"""
Applet: Enphase Solar
Summary: Solar energy monitor
Description: Display energy generated by solar panels based on Enlighten API v4.
Author: laodaochong
"""

load("cache.star", "cache")
load("encoding/base64.star", "base64")
load("http.star", "http")
load("humanize.star", "humanize")
load("render.star", "render")
load("schema.star", "schema")

ENDPOINT = "https://api.enphaseenergy.com/api/v4/systems"
AUTH_URL = "https://api.enphaseenergy.com/oauth/token"
EXPIRE_MSG = "Access token has expired"

# Due to limited number of API calls in free version of Enphase Application, here it only update
# information every hour.
TTL_SECONDS = 3600

def check_response(response):
    if response.status_code == 200:
        return 200, response.json()
    elif response.status_code == 401 and EXPIRE_MSG in response.json().get("details"):
        print("Access token is expired and refresh token now. Call next time.")

        # refresh_token(cache.get("refresh_token"))
        return 401, None
    else:
        print("Request is failed with status code {} {}".format(response.status_code, response.json()))
        return response.status_code, None

def get_system_stats(api_key):
    headers = {
        "Authorization": "Bearer " + cache.get("access_token"),
        "Content-Type": "application/json",
    }

    params = {
        "key": api_key,
    }

    response = http.get(ENDPOINT, params = params, headers = headers)

    status, result = check_response(response)

    if status == 200 and result:
        return 200, str(result["systems"][0]["energy_today"])
    elif status == 401:
        return 401, None
    else:
        msg = "No result returned."
        return status, msg

def refresh_token(refresh_token_code, client_id, client_secret):
    encoded_client_secrets = base64.encode("{}:{}".format(client_id, client_secret))
    headers = {
        "Authorization": "Basic {}".format(encoded_client_secrets),
        "Content-Type": "application/json",
    }
    params = {
        "grant_type": "refresh_token",
        "refresh_token": refresh_token_code,
    }

    response = http.post(AUTH_URL, params = params, headers = headers)
    if response.status_code == 200:
        print("Refresh token successfully.")
        cache.set("access_token", response.json()["access_token"], ttl_seconds = int(response.json()["expires_in"]))
        cache.set("refresh_token", response.json()["refresh_token"])
    else:
        msg = "Refresh token failed with status code {}, message {}".format(
            response.status_code,
            response.json(),
        )
        render_msg(msg)

def render_msg(msg):
    """Render message to App"""
    return render.Root(
        child = render.WrappedText(
            content = msg,
            width = 50,
            color = "#fa0",
        ),
    )

def main(config):
    """Display Energy produced by solar panels daily basis."""
    if not config.bool("switch", True):
        return render_msg("Switch is off, so take a rest.")

    access_token = config.str("access_token")
    refresh_token = config.str("refresh_token")
    client_id = config.str("client_id")
    client_secret = config.str("client_secret")
    api_key = config.str("api_key")

    if not all([access_token, refresh_token, client_id, client_secret, api_key]):
        return render_msg("Missing credential information.")

    # check if it is initial invocation by check "init" flag in the cache
    init = cache.get("init")
    if init == None:
        cache.set("access_token", access_token, ttl_seconds = TTL_SECONDS)
        cache.set("refresh_token", refresh_token)
        cache.set("init", "1")

    # check access token if it needs to be refreshed
    access_token = cache.get("access_token")
    if access_token == None:
        refresh_token(cache.get("refresh_token"), client_id, client_secret)

    # Get "energy_today"
    engery_cached = cache.get("energy_today")
    if engery_cached == None:
        status, energy_today = get_system_stats(api_key)
        if status == 200:
            cache.set("energy_today", energy_today, ttl_seconds = 60)
        elif status == 401:
            refresh_token(cache.get("refresh_token"), client_id, client_secret)
        else:
            return render_msg("Unable to get system stats, status code: {}".format(status))
    else:
        print("Hit! Displaying cached data.")
        energy_today = engery_cached

    msg = "{} kWh energy generated today".format(humanize.float("#.##", float(energy_today) / 1000))
    return render_msg(msg)

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Toggle(
                id = "switch",
                name = "Switch On/Off",
                desc = "Switch the app on or off",
                icon = "gear",
                default = False,
            ),
            schema.Text(
                id = "api_key",
                name = "API Key",
                desc = "API key for the Enphase API. Follow https://developer-v4.enphase.com/docs/quickstart.html#create_account.",
                icon = "key",
            ),
            schema.Text(
                id = "client_id",
                name = "Client ID",
                desc = "The client id of Enphase application",
                icon = "key",
            ),
            schema.Text(
                id = "client_secret",
                name = "Client Secret",
                desc = "The client secret of Enphase application",
                icon = "key",
            ),
            schema.Text(
                id = "access_token",
                name = "Access Token",
                desc = "Follow the App README to generate the access_token",
                icon = "key",
            ),
            schema.Text(
                id = "refresh_token",
                name = "Refresh Token",
                desc = "Follow the App README to generate the refresh_token",
                icon = "key",
            ),
        ],
    )
