load("animation.star", "animation")
load("cache.star", "cache")
load("encoding/base64.star", "base64")
load("encoding/json.star", "json")
load("hmac.star", "hmac")
load("http.star", "http")
load("render.star", "render")
load("schema.star", "schema")
load("secret.star", "secret")
load("time.star", "time")

DEFAULT_USERNAME = "danny"
LB_IMAGE = ""
STAR_IMAGE = ""
HEART_IMAGE = "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"
REWATCH_IMAGE = "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"
BASE_URL = "https://api.letterboxd.com/api/v0"
LB_URL = "https://letterboxd.com/"

HASHED_KEY = "AV6+xWcEQPFSKBUqIIUkoH0KxhqlfuyTNthY2/3woucrvDTy5Wdr5w9L1fbRmPALALYR6NTKzGwghZPaFOSAoPiNRIerHzEmoIAJfEQXlYk3ZHH3/5SDF3/wBwhUgAUwmrJnYDrv25JvahXVPkN1KPNHuz/vZCDvopJh3lNCVzOrGn/GmDGgLY15xKs5rZLZUn0ZQRdUq6XvN7oZ0LaQJvPzac4ZbQ=="
HASHED_SECRET = "AV6+xWcEx8i5d2dh86K8Yk1O1bRGP6teMMCEUZiuC1My6wXH14eZFI4t4/43X8uw2i2pUPw6Pr/jvMofoFkRsiaA4zEA++6M+7WHUAEXQqQnTSXlx1DAH6Cxth5yeMaQQErM0IIvFQfcAjjJ3EQeYiQtTJNp7hnO7s1GIVOBBiFNNqN/K3IA4aFLVN+GKFwaueETS0ogY6abcZ+GQ97On8j1jLt/xg=="
api_key = secret.decrypt(HASHED_KEY)
api_secret = secret.decrypt(HASHED_SECRET)
UUID_URL = "https://www.uuidtools.com/api/generate/v4"
LB_ICON = base64.decode(LB_IMAGE)
STAR_ICON = base64.decode(STAR_IMAGE)
HEART_ICON = base64.decode(HEART_IMAGE)
REWATCH_ICON = base64.decode(REWATCH_IMAGE)

PERC_IN = 0.10
PERC_OUT = 0.90
DURATION = 105
DELAY_1 = 0
DELAY_2 = 95
DELAY_3 = 190
ACTIVITY_START_INDEX = 0
ACTIVITY_END_INDEX = 4
REVIEW_COUNT = 3

def main(config):
    username = config.str("username", DEFAULT_USERNAME)
    Lid = getLID(username)
    activityUrl = "/member/%s/activity" % (Lid)
    memberActivity = getMemberActivity(Lid, activityUrl)
    recentActivity = memberActivity["items"]
    entryList = recentActivity[ACTIVITY_START_INDEX:ACTIVITY_END_INDEX]
    entryList = [getEntry(Lid, entryList[i]) for i in range(REVIEW_COUNT)]
    return render.Root(
        child = renderReviews(entryList),
    )

# functions
def get(Lid, route, params = ""):
    method = "GET"
    toSalt = constructUrl(route, api_key, params)
    signature = getSignature(method, toSalt)
    url = "%s&signature=%s" % (toSalt, signature)

    # CACHE CHECK
    jsonresults = check_cache(url, "json", Lid)
    return jsonresults

def getSignature(method, toSalt):
    body = ""
    str = "%s\u0000%s\u0000%s" % (method, toSalt, body)
    sigHash = hmac.sha256(api_secret, str).lower()
    lowerSig = sigHash.lower()
    return lowerSig

def constructUrl(authRoute, apiKey = api_key, params = ""):
    timestamp = time.now().unix
    nonce = http.get(UUID_URL).json()[0]
    formattedParams = ["&%s=%s" % (p, params[p]) for p in params] if params else [""]
    constructParams = "".join(formattedParams)
    constructed = "%s%s?apikey=%s&nonce=%s&timestamp=%s%s" % (BASE_URL, authRoute, apiKey, nonce, timestamp, constructParams)
    return constructed

def getLID(target):
    url = "%s%s" % (LB_URL, target)

    # CACHE CHECK
    lid = check_cache(url, "identifier")
    return lid

def getMemberActivity(Lid, query):
    activity = get(Lid, query, {"where": "NotOwnActivity", "include": "DiaryEntryActivity"})
    return activity

def getEntry(Lid, item):
    film = item["diaryEntry"]["film"]
    diaryEntry = item["diaryEntry"]
    id = diaryEntry["id"]
    logEntryUrl = ("/log-entry/%s") % (id)
    logEntry = get(Lid, logEntryUrl)
    review = logEntry.get("review", "")
    reviewText = review.get("lbml", "") if review != "" else ""
    movieName = film.get("name", "")
    releaseYear = film.get("releaseYear", "")
    releaseYear = int(releaseYear)
    releaseYear = "%d" % releaseYear
    diaryDetails = logEntry.get("diaryDetails", {})
    rewatch = diaryDetails.get("rewatch", False)
    posterUrl = film["poster"]["sizes"][0]["url"]

    # CACHE CHECK
    poster = check_cache(posterUrl, "body")
    owner = item["diaryEntry"]["owner"]
    ownerName = owner["displayName"]
    avatarUrl = owner["avatar"]["sizes"][0]["url"]

    # CACHE CHECK
    avatar = check_cache(avatarUrl, "body")
    rating = diaryEntry.get("rating", "")
    like = diaryEntry.get("like", 0)
    entryDict = {
        "reviewText": reviewText,
        "movieName": movieName,
        "releaseYear": releaseYear,
        "rewatch": rewatch,
        "poster": poster,
        "ownerName": ownerName,
        "avatar": avatar,
        "rating": rating,
        "like": like,
    }
    return entryDict

def renderReviews(entryList):
    return render.Column(
        children = [
            render.Row(
                children = [
                    render.Padding(
                        pad = (0, 0, 0, 0),
                        child = render.Image(
                            width = 23,
                            src = LB_ICON,
                        ),
                    ),
                    render.Box(
                        width = 41,
                        height = 8,
                        child = render.Stack(
                            children = [
                                animation.Transformation(
                                    wait_for_child = True,
                                    child = getUsername(entryList[0], 20),
                                    duration = DURATION,
                                    delay = DELAY_1,
                                    keyframes = getKeyframes(-32, -64),
                                ),
                                animation.Transformation(
                                    wait_for_child = True,
                                    child = getUsername(entryList[1], 110),
                                    duration = DURATION,
                                    delay = DELAY_2,
                                    keyframes = getKeyframes(-32, -64),
                                ),
                                animation.Transformation(
                                    wait_for_child = True,
                                    child = getUsername(entryList[2], 210),
                                    duration = DURATION,
                                    delay = DELAY_3,
                                    keyframes = getKeyframes(-32, -64),
                                ),
                            ],
                        ),
                    ),
                ],
            ),
            render.Stack(
                children = [
                    animation.Transformation(
                        wait_for_child = True,
                        child = getContent(entryList[0], 20),
                        duration = DURATION,
                        delay = DELAY_1,
                        keyframes = getKeyframes(32, 64),
                    ),
                    animation.Transformation(
                        wait_for_child = True,
                        child = getContent(entryList[1], 110),
                        duration = DURATION,
                        delay = DELAY_2,
                        keyframes = getKeyframes(32, 64),
                    ),
                    animation.Transformation(
                        wait_for_child = True,
                        child = getContent(entryList[2], 210),
                        duration = DURATION,
                        delay = DELAY_3,
                        keyframes = getKeyframes(32, 64),
                    ),
                ],
            ),
        ],
    )

def renderStar(width, height):
    return render.Box(
        height = height,
        width = width,
        child = render.Image(
            width = width,
            src = STAR_ICON,
        ),
    )

def renderHalfStar(width):
    return render.Box(
        width = width,
        child = render.Row(
            children = [
                render.Image(
                    width = width * 2 - 1,
                    src = STAR_ICON,
                ),
            ],
        ),
    )

def getStarCount(count, releaseYear):
    if count == "":
        return [render.Padding(child = render.Text(releaseYear), pad = (1, 0, 0, 0))]
    halfStarRender = render.Padding(child = renderHalfStar(4), pad = (1, 0, 0, 0))
    halfStar = count % 1 != 0
    starCount = int(count - .5) if halfStar else int(count)
    starList = [render.Padding(child = renderStar(7, 7), pad = (1, 1, 0, 0)) for x in range(starCount)]
    halfStarList = starList + [halfStarRender] if halfStar else starList
    return halfStarList

def renderHeart(width, height):
    return render.Box(
        height = height,
        width = width,
        child = render.Image(
            width = width,
            src = HEART_ICON,
        ),
    )

def renderRewatch(width, height):
    return render.Box(
        height = height,
        width = width,
        child = render.Image(
            width = width,
            src = REWATCH_ICON,
        ),
    )

def getHeart(hasHeart):
    if hasHeart == True:
        return render.Padding(
            child = renderHeart(13, 13),
            pad = (1, 0, 0, 0),
        )
    return render.Text("")

def getRewatch(isRewatch):
    if isRewatch == True:
        return render.Padding(
            child = renderRewatch(10, 10),
            pad = (1, 1, 0, 0),
        )
    return render.Text("")

def getKeyframes(yIn, xOut):
    return [
        animation.Keyframe(
            percentage = 0.0,
            transforms = [animation.Translate(0, yIn)],
            curve = "ease_in_out",
        ),
        animation.Keyframe(
            percentage = PERC_IN,
            transforms = [animation.Translate(0, 0)],
            curve = "ease_in_out",
        ),
        animation.Keyframe(
            percentage = PERC_OUT,
            transforms = [animation.Translate(0, 0)],
            curve = "ease_in_out",
        ),
        animation.Keyframe(
            percentage = 1.0,
            transforms = [animation.Translate(xOut, 0)],
        ),
    ]

def getContent(entryObject, marqueeOffsetStart):
    return render.Row(
        expanded = True,
        children = [
            render.Padding(
                child = render.Image(
                    width = 23,
                    src = entryObject["avatar"],
                ),
                pad = (0, 1, 0, 0),
            ),
            render.Row(
                expanded = True,
                children = [
                    render.Column(
                        children = [
                            render.Padding(
                                pad = (0, 2, 0, 0),
                                child = render.Marquee(
                                    width = 41,
                                    offset_start = marqueeOffsetStart,
                                    child = render.Row(
                                        children = [
                                            render.Text(
                                                entryObject["movieName"],
                                                font = "6x13",
                                            ),
                                            getHeart(entryObject["like"]),
                                            getRewatch(entryObject["rewatch"]),
                                        ],
                                    ),
                                    align = "center",
                                ),
                            ),
                            render.Row(
                                cross_align = "center",
                                children = getStarCount(entryObject["rating"], entryObject["releaseYear"]),
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )

def getUsername(entryObject, marqueeOffsetStart):
    return render.Marquee(
        width = 41,
        offset_start = marqueeOffsetStart,
        child = render.Row(
            children = [
                render.Text(
                    entryObject["ownerName"],
                ),
            ],
        ),
    )

def check_cache(url, type = "body", lid = "", timeout = 300):
    if type == "json":
        # the URL can't be used as a key here because each request has a UUID
        key = "%s%s" % (lid, "json")
        data = cache.get(key)
        if data != None:
            return json.decode(data)

        res = http.get(url = url)
        if res.status_code != 200:
            fail("request to %s failed with status code: %d - %s" % (url, res.status_code, res.body()))

        # TODO: Determine if this cache call can be converted to the new HTTP cache.
        cache.set(key, json.encode(res.json()), ttl_seconds = timeout)
        return res.json()

    key = base64.encode(url)
    data = cache.get(key)
    if data != None:
        return base64.decode(data)

    res = http.get(url = url)
    if res.status_code != 200:
        fail("request to %s failed with status code: %d - %s" % (url, res.status_code, res.body()))

    if type == "identifier":
        # TODO: Determine if this cache call can be converted to the new HTTP cache.
        cache.set(key, base64.encode(res.headers["X-Letterboxd-Identifier"]), ttl_seconds = timeout)
        return res.headers["X-Letterboxd-Identifier"]

    # TODO: Determine if this cache call can be converted to the new HTTP cache.
    cache.set(key, base64.encode(res.body()), ttl_seconds = timeout)
    return res.body()

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "username",
                name = "username",
                desc = "Letterboxd username",
                icon = "user",
            ),
        ],
    )
