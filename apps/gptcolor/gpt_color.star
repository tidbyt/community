"""
Applet: GPT Color
Summary: Random Colors Generated by Chat GPT
Description: GPT 3.5 is queried to generate random colors for display every 30 minutes
Author: Hadlich Labs
"""

load("cache.star", "cache")
load("http.star", "http")
load("random.star", "random")
load("render.star", "render")
load("schema.star", "schema")

OPENAI_COMPLETION_URL = "https://api.openai.com/v1/chat/completions"
CACHE_TTL_SECONDS = 1800

#Show an error
def makeError(type):
    return render.Root(
        child = render.Stack(
            children = [
                render.Box(
                    width = 64,
                    height = 32,
                    color = "#363536",
                    child = render.Column(
                        main_align = "center",
                        cross_align = "center",
                        expanded = True,
                        children = [
                            render.Marquee(
                                width = 60,
                                scroll_direction = "horizontal",
                                offset_start = 10,
                                offset_end = 10,
                                child = render.Text(type),
                            ),
                            render.Text("IT TAKES", color = "#FF00FF"),
                            render.Text("A FEW SECONDS", color = "#FF00FF"),
                            render.Text("TO RENDER", color = "#FF00FF"),
                        ],
                    ),
                ),
            ],
        ),
    )

def int_to_hex_string(number):
    hex_digits = "0123456789abcdef"
    hex_str = ""
    working_number = int(number)
    for _ in range(6):
        remainder = working_number % 16
        hex_str = hex_digits[remainder] + hex_str
        working_number = working_number // 16
    return hex_str

def generate_random_hex():
    # Function if gpt doesn't do exactly what it is told
    random_int = random.number(0, 0xFFFFFF)
    hex_str = int_to_hex_string(random_int)

    generated = "#" + hex_str

    # print("Generated: %s" % generated)
    return generated

def is_valid_hex(hex_str):
    # Checks if input is valid hex number
    # print("Checking if valid color %s" % hex_str)
    if not (hex_str.startswith("#") and len(hex_str) == 7):
        # print("Invalid due to not right length or wrong start char: %s" % hex_str)
        return False

    str_check = "0123456789abcdefABCDEF"

    for i in range(len(hex_str[1:])):
        if hex_str[i + 1] not in str_check:
            return False

    return True

def request_art(OPENAI_API_KEY):
    print("Calling API")

    # Example Completion Call
    ### curl https://api.openai.com/v1/chat/completions \
    ###   -H "Content-Type: application/json" \
    ###   -H "Authorization: Bearer $OPENAI_API_KEY" \
    ###   -d '{
    ###      "model": "gpt-3.5-turbo",
    ###      "messages": [{"role": "user", "content": "Say this is a test!"}],
    ###      "temperature": 0.7
    ###    }'

    prompt = [{"role": "system", "content": "You are a computer terminal, do not write code, only respond with CSVs. Respond only with \"#xxxxxx,#xxxxxx,#xxxxxx,...\" formatting."}, {"role": "user", "content": "Return 32 random hex colors in a csv, like a python function returning a string. Do not include newlines, do not include spaces, do not list, do not include header or comments. Each color should be different. Format the number #xxxxxx"}]

    rep = http.post(
        OPENAI_COMPLETION_URL,
        headers = {"Authorization": "Bearer " + OPENAI_API_KEY},
        json_body = {"model": "gpt-3.5-turbo", "messages": prompt, "temperature": 0.3},
    )

    # print(rep.json())
    if rep.status_code != 200:
        return None

    response = rep.json()

    valid_colors = []

    # response = {"created": 1.68162084e+09, "model": "gpt-3.5-turbo-0301", "usage": {"total_tokens": 329.0, "prompt_tokens": 99.0, "completion_tokens": 230.0}, "choices": [{"message": {"role": "assistant", "content": "#f0d2e3,#f3d6c7,#f8e6d0,#f6e5c6,#f0c8c9,#f7e9d1,#e0c8d8,#d6c7f3,#e2c8f8,#f8d6e5,#e5c6f6,#c8d8e0,#c7f3d6,#c8e2f8,#d6f8e5,#c6e5f6,#d8e0c8,#f3c7d6,#e2c8c8,#f8d6d6,#e5c6c6,#c8d8d8,#c7f3f3,#c8e2e2,#d6f8f8,#c6e5e5,#d8e0e0,#f3c7c7,#e2c8c8,#f8d6d6,#e5c6c6"}, "finish_reason": "stop", "index": 0.0}], "id": "chatcmpl-xxxxxx", "object": "chat.completion"}

    if "choices" in response and len(response["choices"]) > 0 and "message" in response["choices"][0] and "content" in response["choices"][0]["message"]:
        content = response["choices"][0]["message"]["content"]

        # print("Received from GPT: %s" % content)

        # Output should be #xxxxxx,#xxxxxx,#xxxxxx,...
        # Try to extract colors
        color_list = content.split(",")

        for c in color_list:
            # print("GPT Found Color %s" % c)
            if (is_valid_hex(c.strip())):
                valid_colors.append(c)

    print("Valid Colors from GPT: " + str(len(valid_colors)))

    colors_needed = 32 - len(valid_colors)
    if (colors_needed > 0):
        for _ in range(colors_needed):
            valid_colors.append(generate_random_hex())

    return ",".join(valid_colors[:32])

def get_art(OPENAI_API_KEY):
    response_art = cache.get("response_art-" + OPENAI_API_KEY)

    if response_art == None:
        response_art = request_art(OPENAI_API_KEY)
        if response_art == None:
            return None
        cache.set("response_art-" + OPENAI_API_KEY, response_art, ttl_seconds = CACHE_TTL_SECONDS)

    # print(response_art)

    return response_art

def main(config):
    OPENAI_API_KEY = config.get("OPENAI_API_KEY", "")
    if OPENAI_API_KEY == "":
        return makeError("Please add your OPENAI_API_KEY")

    art = get_art(OPENAI_API_KEY)

    if (art == None):
        return makeError("OPENAI_API_KEY INVALID")

    children = []
    for c in art.split(","):
        children.append(render.Box(width = 2, height = 32, color = c))

    return render.Root(
        child = render.Row(
            children = children,
        ),
    )

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "OPENAI_API_KEY",
                name = "OpenAI API Key",
                desc = "Access token provided by OpenAI",
                icon = "key",
                default = "",
            ),
        ],
    )
