"""
Applet: Synth Solar
Summary: Synth Solar monitor
Description: Connect to your solar system by putting in the serial number of your inverter. \n This will be in your Synth Handover Pack. Screen description - 1) Sun - % of your full potential generation; 2) Lightning - current load from your property right now; 3) Battery - your battery level right now; 4) Piggy bank - today's savings from solar; 5) Panel - today's energy from solar.
Author: SynthSolar
"""

load("animation.star", "animation")
load("encoding/base64.star", "base64")
load("http.star", "http")
load("math.star", "math")
load("render.star", "render")
load("schema.star", "schema")

SUN_ICON = base64.decode("")
MOON_ICON = base64.decode("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")
SYNTH_ICON = base64.decode("PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCA3MjAgMTIwMCI+PGRlZnM+PHN0eWxlPi5jbHMtMXtmaWxsOiNmZmY7fS5jbHMtMntmaWxsOm5vbmU7fTwvc3R5bGU+PC9kZWZzPjx0aXRsZT5TeW50aF9TeW1ib2xfU21hbGxfV2hpdGU8L3RpdGxlPjxnIGlkPSJMYXllcl8yNyIgZGF0YS1uYW1lPSJMYXllciAyNyI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNMjQwLDcxOS44M0gzNDUuNWExNC4yNywxNC4yNywwLDAsMSwyLTcuMjJsLTkxLjQyLTUyLjc4TDI0MCw2MzIsMCw2OTYuMjl2NTIuNjVsMTkwLjMtNzguODJaIi8+PC9nPjxnIGlkPSJMYXllcl8yNiIgZGF0YS1uYW1lPSJMYXllciAyNiI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNMzAwLDgyMy45M2w1Mi43OC05MS40MmExNC40LDE0LjQsMCwwLDEtNS4yOC01LjI5TDI1Ni4wOCw3ODAsMTUyLjE2LDcyMCwwLDgwNy44NVY4NDBjMCwxMS43OS42MSwyMy40MywxLjcyLDM0LjkzbDEyNi40Ni05N1oiLz48L2c+PGcgaWQ9IkxheWVyXzI1IiBkYXRhLW5hbWU9IkxheWVyIDI1Ij48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik00ODAuNCw5NTkuODJIMzc0LjlhMTQuMjYsMTQuMjYsMCwwLDEtMiw3LjIxbDkxLjQzLDUyLjc5LDE0LjY4LDI5LDMzLjE3LDExNy40NWEzNTkuMzcsMzU5LjM3LDAsMCwwLDY2LjI2LTQwbC00OC4zMy0xMTYuNjlaIi8+PC9nPjxnIGlkPSJMYXllcl8yNCIgZGF0YS1uYW1lPSJMYXllciAyNCI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNMCw2NDcuMjMsMjk3Ljg4LDYwOGwyLjEyLDcuOSw1Mi43OCw5MS40MmExNC4zMywxNC4zMywwLDAsMSw3LjIyLTJWNTk5LjgySDBaIi8+PC9nPjxnIGlkPSJMYXllcl8yMyIgZGF0YS1uYW1lPSJMYXllciAyMyI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNNDIwLDYxNi4wOCwzNjcuMjIsNzA3LjVhMTQuNDgsMTQuNDgsMCwwLDEsNS4yOCw1LjI5TDQ2My45Miw2NjAsNDgwLDYzMi4xNmwyNDAsNjQuMzFWNjQ3LjRMNDIyLjEyLDYwOC4xOFoiLz48L2c+PGcgaWQ9IkxheWVyXzIyIiBkYXRhLW5hbWU9IkxheWVyIDIyIj48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik00MjAsMTA2My44NCwzNjcuMjIsOTcyLjVhMTQuMzMsMTQuMzMsMCwwLDEtNy4yMiwyVjEyMDBhMzYxLjI5LDM2MS4yOSwwLDAsMCw3Ny44Ny04LjU0bC0xNS43NS0xMTkuNjJzLTIuMTYtOC0yLjE3LTgiLz48L2c+PGcgaWQ9IkxheWVyXzIxIiBkYXRhLW5hbWU9IkxheWVyIDIxIj48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik00MjAuNCw4NTYuMDgsMzY3LjYyLDk0Ny41YTE0LjQsMTQuNCwwLDAsMSw1LjI4LDUuMjlMNDY0LjMzLDkwMGwxMDMuODksNjBMNjM0LDEwNzMuODZhMzYwLjYxLDM2MC42MSwwLDAsMCw0Mi42Ni02MS43MmwtODQuNDEtMTEwWiIvPjwvZz48ZyBpZD0iTGF5ZXJfMjAiIGRhdGEtbmFtZT0iTGF5ZXIgMjAiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTQyMCw4MjMuNzVsLTUyLjc4LTkxLjQyYTE0LjM5LDE0LjM5LDAsMCwxLTcuMjIsMlY4MzkuODNINjAwTDcwNC41Myw5NDQuMzZhMzU4LjI5LDM1OC4yOSwwLDAsMCwxMy43Ni02OS42MWwtMTI2LjQ1LTk3WiIvPjwvZz48ZyBpZD0iTGF5ZXJfMTkiIGRhdGEtbmFtZT0iTGF5ZXIgMTkiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTM0Ny45LDk2Ny4yMiwyNTYuNTYsMTAyMHMtMTYuMTUsMjcuODYtMTYuMTUsMjcuODZsLTMxLjc5LDExOC42MmEzNTcuNjMsMzU3LjYzLDAsMCwwLDczLjkxLDI1bDE1Ljc1LTExOS42MnMyLjE2LTgsMi4xNy04bDUyLjczLTkxLjM0YTE0LjQ4LDE0LjQ4LDAsMCwxLTUuMjgtNS4yOSIvPjwvZz48ZyBpZD0iTGF5ZXJfMTgiIGRhdGEtbmFtZT0iTGF5ZXIgMTgiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTQ4MCw3MTkuODNIMzc0LjVhMTQuMjYsMTQuMjYsMCwwLDEtMiw3LjIxbDkxLjQyLDUyLjc5LDEwMy45My02MEw3MjAsODA3LjY3Vjc0OC45NEw1MjkuNzEsNjcwLjEyWiIvPjwvZz48ZyBpZD0iTGF5ZXJfMTciIGRhdGEtbmFtZT0iTGF5ZXIgMTciPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTE1LjQ3LDk0NC4zNkEzNTgsMzU4LDAsMCwwLDQzLjc2LDEwMTJsODQuNDEtMTEwTDMwMCw4NTUuOWw1Mi43OCw5MS40MmExNC40MiwxNC40MiwwLDAsMSw3LjIyLTJWODM5LjgySDEyMEwxNS40Nyw5NDQuMzYiLz48L2c+PGcgaWQ9IkxheWVyXzE2IiBkYXRhLW5hbWU9IkxheWVyIDE2Ij48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik0yNDAuNCw5NTkuODJIMzQ1LjlhMTQuMjYsMTQuMjYsMCwwLDEsMi03LjIxbC05MS40Mi01Mi43OC0xMDMuOTEsNjBMODYuODIsMTA3My42OGEzNjIsMzYyLDAsMCwwLDU1LjU0LDUyLjU0bDQ4LjM0LTExNi42OSw0OS43LTQ5LjcxIi8+PC9nPjxnIGlkPSJMYXllcl8xNSIgZGF0YS1uYW1lPSJMYXllciAxNSI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNNDgwLDQ3OS44M0gzNzQuNWExNC4yNiwxNC4yNiwwLDAsMS0yLDcuMjFsOTEuNDIsNTIuNzhMNDgwLDU2Ny42N2wyNDAtNjQuMzFWNDUwLjcxTDUyOS43LDUyOS41M1oiLz48L2c+PGcgaWQ9IkxheWVyXzE0IiBkYXRhLW5hbWU9IkxheWVyIDE0Ij48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik03MTguMjksMzI1LjA4bC0xMjYuNDcsOTdMNDIwLDM3Ni4wN2wtNTIuNzgsOTEuNDJhMTQuNDgsMTQuNDgsMCwwLDEsNS4yOCw1LjI5TDQ2My45Miw0MjBsMTAzLjkzLDYwTDcyMCwzOTIuMTVWMzYwYzAtMTEuNzktLjYxLTIzLjQzLTEuNzEtMzQuOTIiLz48L2c+PGcgaWQ9IkxheWVyXzEzIiBkYXRhLW5hbWU9IkxheWVyIDEzIj48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik0yNDAuNCwyMzkuODNIMzQ1LjlhMTQuMjYsMTQuMjYsMCwwLDEsMi03LjIxbC05MS40Mi01Mi43OS0xNC42OC0yOUwyMDguNjIsMzMuMzhhMzU5LjcsMzU5LjcsMCwwLDAtNjYuMjYsNDAuMDVMMTkwLjcsMTkwLjEyWiIvPjwvZz48ZyBpZD0iTGF5ZXJfMTIiIGRhdGEtbmFtZT0iTGF5ZXIgMTIiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTQyMCw1ODMuNzRsLTUyLjc4LTkxLjQyYTE0LjMsMTQuMywwLDAsMS03LjIyLDJ2MTA1LjVINzIwdi00Ny40TDQyMi4xMiw1OTEuNjRaIi8+PC9nPjxnIGlkPSJMYXllcl8xMSIgZGF0YS1uYW1lPSJMYXllciAxMSI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNMzAwLDU4My45Mmw1Mi43OC05MS40MmExNC40OCwxNC40OCwwLDAsMS01LjI4LTUuMjlMMjU2LjA4LDU0MCwyNDAsNTY3Ljg0LDAsNTAzLjUzVjU1Mi42bDI5Ny44OCwzOS4yMloiLz48L2c+PGcgaWQ9IkxheWVyXzEwIiBkYXRhLW5hbWU9IkxheWVyIDEwIj48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik0zMDAuMDUsMTM2LjE2bDUyLjczLDkxLjM0YTE0LjMzLDE0LjMzLDAsMCwxLDcuMjItMlYwYTM2MS4yOSwzNjEuMjksMCwwLDAtNzcuODcsOC41NGwxNS43NSwxMTkuNjJzMi4xNiw4LDIuMTcsOCIvPjwvZz48ZyBpZD0iTGF5ZXJfOSIgZGF0YS1uYW1lPSJMYXllciA5Ij48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik0zMDAuNCwzNDMuOTJsNTIuNzgtOTEuNDJhMTQuNCwxNC40LDAsMCwxLTUuMjgtNS4yOUwyNTYuNDgsMzAwbC0xMDMuOS02MEw4Ni44MiwxMjYuMTRhMzYxLjE3LDM2MS4xNywwLDAsMC00Mi42Niw2MS43Mmw4NC40MSwxMTBaIi8+PC9nPjxnIGlkPSJMYXllcl84IiBkYXRhLW5hbWU9IkxheWVyIDgiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTMwMCwzNzUuOWw1Mi43OCw5MS40MmExNC4zOSwxNC4zOSwwLDAsMSw3LjIyLTJWMzU5LjgySDEyMEwxNS40NywyNTUuMjlBMzU4LjI5LDM1OC4yOSwwLDAsMCwxLjcxLDMyNC45bDEyNi40NSw5N1oiLz48L2c+PGcgaWQ9IkxheWVyXzciIGRhdGEtbmFtZT0iTGF5ZXIgNyI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNMzcyLjksMjMyLjc4LDQ2NC4yNCwxODBzMTYuMTUtMjcuODYsMTYuMTUtMjcuODZMNTEyLjE4LDMzLjU2YTM1Ny40MywzNTcuNDMsMCwwLDAtNzMuOTEtMjVMNDIyLjUyLDEyOC4xNmwtMi4xNiw4LTUyLjc0LDkxLjM0YTE0LjQ4LDE0LjQ4LDAsMCwxLDUuMjgsNS4yOSIvPjwvZz48ZyBpZD0iTGF5ZXJfNiIgZGF0YS1uYW1lPSJMYXllciA2Ij48cGF0aCBjbGFzcz0iY2xzLTEiIGQ9Ik0yNDAsNDc5LjgzSDM0NS41YTE0LjI2LDE0LjI2LDAsMCwxLDItNy4yMWwtOTEuNDItNTIuNzgtMTAzLjkzLDYwTDAsMzkydjU4LjczbDE5MC4yOSw3OC44MloiLz48L2c+PGcgaWQ9IkxheWVyXzUiIGRhdGEtbmFtZT0iTGF5ZXIgNSI+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNNzA0LjUzLDI1NS4yOWEzNTgsMzU4LDAsMCwwLTI4LjI5LTY3LjZsLTg0LjQxLDExMEw0MjAsMzQzLjc1bC01Mi43OC05MS40MmExNC40MiwxNC40MiwwLDAsMS03LjIyLDJWMzU5LjgzSDYwMEw3MDQuNTMsMjU1LjI5Ii8+PC9nPjxnIGlkPSJMYXllcl80IiBkYXRhLW5hbWU9IkxheWVyIDQiPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTQ4MC40LDIzOS44M0gzNzQuOWExNC4yNiwxNC4yNiwwLDAsMS0yLDcuMjFsOTEuNDMsNTIuNzlzMTAzLjktNjAsMTAzLjktNjBMNjM0LDEyNmEzNjEuNTcsMzYxLjU3LDAsMCwwLTU1LjU0LTUyLjU0TDUzMC4xMSwxOTAuMTIsNDgwLjQsMjM5LjgzIi8+PC9nPjxnIGlkPSJMYXllcl8zIiBkYXRhLW5hbWU9IkxheWVyIDMiPjxyZWN0IGNsYXNzPSJjbHMtMiIgd2lkdGg9IjcyMCIgaGVpZ2h0PSIxMjAwIi8+PC9nPjwvc3ZnPg==")
BATTERY_ICON = base64.decode("iVBORw0KGgoAAAANSUhEUgAAAGAAAABgCAYAAADimHc4AAAACXBIWXMAAAsTAAALEwEAmpwYAAACE0lEQVR4nO2UQWoUYRhEv3vo1hN4BMGFuxjxFupBKkxwq15ABvEQLYSA9k8Emc50rxTNKiAeYCKD4M6Fk4ZKTd6D2vf/qr+qAgAAAAAAuCG0YXzahvGiDdPV9TJe9Kv1E/d74mizyP9bwg/3e+Jos8n/E/d74mgUMB9n6/XdNkzLfph+zS22zZztN/bD+K7/Mt2rfZHfD+OlW2z77yLGy3Z+fqfS2f75bplt1xJW09tKJ2F22r+yGn9WOnaJw/VS6bgFNgrwS2xcgF9kY4IyU+m4BTYK8EtsXIBfZGOCMlPpuAW2216AukdXyal03AJFAX6J4gL8IsUEZabScQsUBfgligvwixQTlJlKxy1QFOCXKC7AL1JMUGYqHbdAUYBforgAv0gxQZmpdNwCRQF+ieIC/CLFBGWm0nELFAX4JYoL8IsUE5SZSsctUBTglyguwC9STFBmKh23QFGAX6K4AL9IMUGZqXTcAkUBfoniAvwixQRlptJxCxQF+CWKC/CLFBOUmUrHLVAU4JcoLsAvUkxQZiodt0BRgF+iuAC/SDFBmal03AJFAX6J4gL8IsUEZabScQsUBfgligvwixQTlJlKxy1Qt72ARXewcUvUjll8eLypdF6dPPvuFqkd8+b0xbdKZ/lx8fC4O4y7guPucLP8dPSg9oH3n1/ef33y/GvCHC26g832z98b+QAAAAAAUDeN31keV+M4lNktAAAAAElFTkSuQmCC")
CURRENT_ICON = base64.decode("")
MONEYBAG_ICON = base64.decode("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")

BAT_ICON_100 = base64.decode("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")
BAT_ICON_75 = base64.decode("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")
BAT_ICON_50 = base64.decode("iVBORw0KGgoAAAANSUhEUgAAAIMAAAD/CAYAAADSfWXcAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAkwSURBVHgB7d0/UxtnHsDx37NiZN9MfENewSmvILi7zoAprotdXgWUN5M5QwkYA4OFZq4h8aW5ClJdaVxdZZC760zKq6K8gpAzNxnJ0j73ewT8Rkn4I4ndZVf6fmYyxhiSSHz1PM8+Wu86KZharVaRON7zItOST41mqzWztbXVkIKJpEBq29vTPo7f5ziEoHKvXP6+Wq1uSsGUpCB2dnaWxLl/6of3pQCcBjv7+LE7PDysS0EUIoZuCN7vSsEULYjcx9BdI3j/LymoEMTM7OxPGsS/Jedyv2bw3h9JwTnnNlRFci7XMXQXYd5XpOB0dJgsl8t7knO5jUFfSZP6ipqXERGmi209GpIcy20M+kp6MgqjQq+Sc19IjuU2Bv0fG5lR4YJ3bkFyLLcx5HxjaShh7ZDnqSKXMdRyPrfeRhRFn0tOOUmYHgFM6ebFozjM985V9FMVXQhOyoD8iK0Xepzo83EiA9Ln40R/WCf663HkXEO35b9bWV+vS4JuHUNY9d8Piz2d43Von9JfB/7BY2ghqrq+cXfQbLff6JtjA0fWa+gY/qYjQNv7eTlbFBHA3TvRF+NBq9XaGvYd04FjCNvDPrxP4P0TQS5pFPvDRNF3DGE60GP/Jf2GZ8JIUAgaxdba2tpmv1/fVwxhUaiLntejtgk0Jvo+2ebGQ0sNYUGLOSKEwqroiP7+5cuXSzd94bVvYYc3ijSEcB5BIU4oweX0Z3hfR/Y/3XRuxZUxnIewIRgZN51sc2kMhDC6rgviNzGEU8z0G2qCkXXV2Ve/OJro7iHE8feCsaCHng/10PP44vd2NBH2EUbhFDP0T0eC1+HnfvF7i0EPP0biFDMMpHLv3j1bG3anCaaH8daJ45l1fQf0bGSI49yfrIn0RFHUHR1c96+sRRFrhTEXRodIzqvAeAujQzSK5xpicGHvoVB/CxvpmpAU6b5FveTcQUfknX78o2Ao+ibTpxJOKfR+Xj+elpSkFUMjnA6nu1vvBEn4Qf8JO4X752eapXJKQeLTRDjlqtlqPVxdXSWEFKysrDSazeZDfbEdSMLcTrXqJTmN1bW1zwSpC9vI98rlsCUwJQlJdGQIp1cJMhFOi3dR9FQSlFgMYXoo4kWtiixMGXpIuC8JSSwGXeXuCzLXjuNvJSGJxcCC8W602+1jSUhSMTQEd6K7dnCuIQlgBxKGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAGGGGCIAYYYYCYkY35XJk8nZN45mfJeKoLfcF4a+jKtf/KlfCsZyjSG01eydCqyIV4mNQRcofvUxLKgz9dm3JHl3y/LgWQgs2niw9eyqQ9yVz+cFPRFn6+KK8nrn/RFJBnIJIb/vpIFcToiYCj6Q9o93ZUpSVkmMURCCLflo+6omqrUY/jwd5kOw53gdpxM/7ib7hSbxcjwSJCIcpTuc8k+Q4H4UvFHBhQEMcAQAwwxwBADDDHAEAMMMcAQAwwxwBADDDHAEAMMMcAQAwwxwBADDDHAEAMMMcAQAwwxFIjryImkKIsYUn0A4yR2RY+hLd8JEtHupPtcph7Dg2Wp+3C9AdyKF9n/dLn404S4WBYFQwsvpk5HtiRlmcQQRgdNe1MwMA3hpBPLUx0VGpKyzI4mHjyTLd+Rp0wZA/BS1xAeagjHkoFML+Nzfjmagw+v5FH4K+aCy8W6NnByrC+gd5KhzC/wFTz4a/dBZvpAcTM2nWCIAYYYYIgBhhhgiAGGGGCIAYYYYIgBhhhgiAEm8zeqwoXF5ewGJOGS+dx74nInTt/dlY58/UlGb18HmY0M4XZEGsKRRhD+mRZCuM6kF1nwJXl/+ir9WwtcyCSGEML/9IGdR4ABaBRLGsSeZCCTGE6j7i2JKoKhhFHi9BuZl5SlHsPPuxqBk2eCW/E+/ftUpR7Dx4n07600FnTB/fM38gdJUeox6Kr4c0Ei4k66Lyz2GQqEO9EgM8QAQwwwxABDDDDEAEMMMMQAQwwwxABDDDDEAEMMMMQAQwwwxABDDDDEAEMMMMQAQwwwxFAg3IkGpvB3omm35Y3g1sLV+M+vuZ2a1GPo3ifBS11wK05kX1KWyZqhfXYnGqaLIXVHhWcjcieaMDro4meGG48MwctxJ5YZyUBmRxPhcjThQYUbb4Vb7Qiu1X2OvGzqqDqTxS2Jgkyv6XT+oMKUsdi9Gw0uNRFJ43dfyg+SsTu5E02Q9soYg0tqmqgI7oz3viIJSGzNsL29PS3IXC3B5z2xGErOfSHIXhQlduGvxGLwzi1sbGxUBJmp1WqVcCU4SUhiMegO2WS5XM7keoU4o2uFRC8Ymug+gwYxXa1WCSID+jx/pTU8kQS5nWrVS8L0X1hvtVqLW1tbDUGiwtQgcbynz/G0JCyVGC6E3UYXx2+a7XZdw2DXcUg1XYv5iYkpVyrN+4RHg16pxoBi4UwnmCjM74Kxp9NPPYrjOPX3yZF/zvt9Fz7Qw5Qjl8LqFIXRWF1b+6y7ZmB0GHO6exx+6cawvr5e108cCMZOOPxfXV3tnk5gRxPNZnNRg2gIxklDNwdtVrAYwqZQp9NZFIyNThwv9+4Sl3r/8OjoqDEzO6sDhJsWjLTY+01dHvyj93OlX3/R4eHhu8dzc+EmF38UjCQN4avnz5+v/Prz7qpv2NnZ2dediNTvmIZshQXj2trapcuB0lXf9Pbt2wOmjNFyPiL85ao/L133zWHKIIjRENYIl00NvZz0IZzsWiqV9iShs3CRqUbYVLrYS7hOSfoQjjLm5ube6P51WFhyn8qCCNNC6+PHP7948eI//Xx9XyNDr3CmTdzp7DF15Fd4B9JF0WY/o0GvgWO4oEcbj/S/Gm7Jy0iRExpBY5gILvwfVCTKRWT8f/QAAAAASUVORK5CYII=")
BAT_ICON_25 = base64.decode("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")
BAT_ICON_10 = base64.decode("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")

SAVINGS_ICON = base64.decode("")

PANEL_ICON = base64.decode("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")

def get_data(url, params):
    """
    Get daily_gen_+_batt.star widget

    Args:
        url: Base url
        params: Query params

    Returns:
        Widget
    """

    # * Make the call
    response = http.get(url + "?d=" + params, ttl_seconds = 10)

    if response.status_code != 200:
        fail("Request failed with status %d", response.status_code)

    data = response.json()["data"]

    return data

def get_overall_realtime_performance(url):
    """
    Realtime performance widget

    Args:
        url: Base URL

    Returns:
        Widget
    """

    # * Make the call
    response = http.get(url + "?d=orp", ttl_seconds = 10)

    if response.status_code != 200:
        fail("Request failed with status %d", response.status_code)

    data = response.json()["data"]

    rtp = data["realtime_performance"] * 100

    max_width = 64

    # * Calculate icon scale
    min_height = 14
    max_height = 32
    min_rtp = 5
    max_rtp = 100

    icon_widget = None

    # * If rtp is less than 5%
    if rtp < min_rtp:
        # * Icon should be moon
        icon_widget = render.Column(
            expanded = True,
            main_align = "center",
            cross_align = "start",
            children = [
                render.Image(src = MOON_ICON, width = 40),
            ],
        )
    else:
        # * Calculate scale by using linear interpolation
        scale = min_height + (max_height - min_height) * (rtp - min_rtp) // (max_rtp - min_rtp)

        # * Convert float to int
        scale = math.ceil(scale)

        icon_widget = render.Column(
            expanded = True,
            main_align = "start",
            cross_align = "start",
            children = [
                render.Image(src = SUN_ICON, width = scale, height = scale),
                render.Box(),
            ],
        )

        print("Icon scale", scale, "RTP", rtp)

    return render.Row(
        children = [
            # * Box for Icon
            render.Box(
                width = max_width // 2,
                child = icon_widget,
            ),
            # * Box for text
            render.Box(
                width = max_width // 2,
                child = render.Column(
                    expanded = True,
                    main_align = "space_evenly",
                    cross_align = "center",
                    children = [
                        render.Text(content = str(math.ceil(rtp)) + "%", color = "#FF3F00", font = "10x20"),
                    ],
                ),
            ),
        ],
    )

def get_todays_generation(url):
    """
    Get daily_gen_+_batt.star widget

    Args:
        url: Base URL

    Returns:
        Widget
    """

    # * Make the call
    response = http.get(url + "?d=cb_tg", ttl_seconds = 10)

    if response.status_code != 200:
        fail("Request failed with status %d", response.status_code)

    data = response.json()["data"]

    max_width = 64

    total_energy = math.ceil(data["total_energy"])

    return render.Row(
        children = [
            # * Box for Icon
            render.Box(
                width = max_width // 2,
                child = render.Column(
                    expanded = True,
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Image(src = PANEL_ICON, width = 30),
                        render.Box(),
                    ],
                ),
            ),
            # * Box for text
            render.Box(
                width = max_width // 2,
                child = render.Column(
                    expanded = True,
                    main_align = "space_evenly",
                    cross_align = "center",
                    children = [
                        render.Text(content = "Today", color = "#FFFF", font = "6x13"),
                        render.Text(content = str(total_energy) + "kWh", color = "#FF3F00", font = "6x13"),
                    ],
                ),
            ),
        ],
    )

def get_current_load_widget(data):
    """
    Get current inverter load

    Args:
        data: Data from the api

    Returns:
        Widget
    """

    max_width = 64
    width_40 = (max_width * 40) // 100
    width_60 = (max_width * 60) // 100

    # * Calculate icon scale
    min_height = 12
    max_height = 32
    min_load = 0.5
    max_load = 5

    total_load = math.ceil(data["load_kw"])

    # * Calculate scale by using linear interpolation
    if total_load >= max_load:
        scale = max_height
    else:
        scale = min_height + (max_height - min_height) * (total_load - min_load) // (max_load - min_load)

        # * Convert float to int
        scale = math.ceil(scale)

    print("Icon scale", scale, "Total Load", total_load, "Total load raw", data["load_kw"], round_to_one_decimal_str(data["load_kw"]) + "kW")

    return render.Row(
        children = [
            # * Box for Icon
            render.Box(
                width = width_40,
                child = render.Column(
                    expanded = True,
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Image(src = CURRENT_ICON, width = scale, height = scale),
                        #render.Box(),
                    ],
                ),
            ),
            # * Box for text
            render.Box(
                width = width_60,
                child = render.Column(
                    expanded = True,
                    main_align = "space_evenly",
                    cross_align = "center",
                    children = [
                        render.Text(content = round_to_one_decimal_str(data["load_kw"]) + "kW", color = "#FF3F00", font = "6x13"),
                    ],
                ),
            ),
        ],
    )

def get_current_battery_charge_widget(data):
    """
    Get daily_gen_+_batt.star widget

    Args:
        data: Data from the api

    Returns:
        Widget
    """
    max_width = 64
    width_40 = (max_width * 40) // 100
    width_60 = (max_width * 60) // 100

    battery_value = data["battery"] or 0

    print("Battery level ", battery_value)

    icon = None
    font_colour = ""

    if battery_value >= 75:
        icon = BAT_ICON_100
        font_colour = "#00A023"
    elif battery_value >= 50:
        icon = BAT_ICON_75
        font_colour = "#FFCE31"
    elif battery_value >= 25:
        icon = BAT_ICON_50
        font_colour = "#F39200"
    elif battery_value >= 10:
        icon = BAT_ICON_25
        font_colour = "#F30000"
    else:
        icon = BAT_ICON_10
        font_colour = "#BD0000"

    return render.Row(
        children = [
            # * Box for Icon
            render.Box(
                width = width_40,
                child = render.Column(
                    expanded = True,
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Image(src = icon, width = 12),
                    ],
                ),
            ),
            # * Box for text
            render.Box(
                width = width_60,
                child = render.Column(
                    expanded = True,
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Text(content = str(math.ceil(battery_value)) + "%", color = font_colour, font = "10x20"),
                    ],
                ),
            ),
        ],
    )

def round_to_one_decimal_str(x):
    v = str(int(math.round(x * 10)))
    if len(v) == 1:
        v = "0" + v
    v = (v[0:-1] + "." + v[-1:])
    return v

def round_to_two_decimals_str(x):
    v = str(int(math.round(x * 100)))
    v = (v[0:-2] + "." + v[-2:])

    return v

def get_savings(url):
    """
    Get savings

    Args:
        url: Base URL

    Returns:
        Widget
    """

    # * Make the call
    response = http.get(url + "?d=es", ttl_seconds = 60 * 5)

    if response.status_code != 200:
        fail("Request failed with status %d", response.status_code)

    data = response.json()["data"]

    total_savings_today = data["total_savings_today"]

    max_width = 64

    return render.Row(
        children = [
            # * Box for Icon
            render.Box(
                width = max_width // 2,
                child = render.Column(
                    expanded = True,
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Image(src = SAVINGS_ICON, width = 24),
                    ],
                ),
            ),
            # * Box for text
            render.Box(
                width = max_width // 2,
                child = render.Column(
                    expanded = True,
                    main_align = "space_evenly",
                    cross_align = "center",
                    children = [
                        render.Text(content = "Today", color = "#FFFF", font = "6x13"),
                        # ! Change it to round_to_two_decimals if round_to_two_decimals_str method does not work
                        render.Text(content = "£" + str(round_to_two_decimals_str(total_savings_today)), color = "#FF3F00", font = "6x13"),
                    ],
                ),
            ),
        ],
    )

def build_keyframe(offset, pct):
    return animation.Keyframe(
        percentage = pct,
        transforms = [animation.Translate(offset, 0)],
        curve = "ease_in_out",
    )

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "serial_number",
                name = "Serial Number",
                desc = "Serial number of your inverter",
                icon = "solarPanel",
                default = "",
            ),
        ],
    )

def get_widgets_and_animations(url):
    """
    Get widget and animations

    Args:
        url: Base URL

    Returns:
        Widgets & Animations
    """
    max_width = 64

    keyframes = []
    widgets = []
    max_animation_duration = 1000

    # * Get battery data
    battery_data = get_data(url, "cb_tg")

    # * Get load data
    load_data = get_data(url, "load")

    if not battery_data.get("battery") and load_data.get("load_kw", 0) <= 0.001:
        print("No battery and load data found")
        widgets = [
            get_overall_realtime_performance(url),
            get_savings(url),
            get_todays_generation(url),
        ]
        keyframes = [
            build_keyframe(0, 0.0),
            build_keyframe(0, 0.33),
            build_keyframe(-max_width, 0.33),
            build_keyframe(-max_width, 0.66),
            build_keyframe(-max_width * 2, 0.66),
            build_keyframe(-max_width * 2, 1.0),
        ]

        max_animation_duration //= 2

    elif not battery_data.get("battery"):
        widgets = [
            get_overall_realtime_performance(url),
            get_current_load_widget(load_data),
            get_savings(url),
            get_todays_generation(url),
        ]
        keyframes = [
            build_keyframe(0, 0.0),
            build_keyframe(0, 0.25),
            build_keyframe(-max_width, 0.25),
            build_keyframe(-max_width, 0.5),
            build_keyframe(-max_width * 2, 0.5),
            build_keyframe(-max_width * 2, 0.75),
            build_keyframe(-max_width * 3, 0.75),
            build_keyframe(-max_width * 3, 1.0),
        ]

    elif load_data.get("load_kw", 0) <= 0.001:
        widgets = [
            get_overall_realtime_performance(url),
            get_current_battery_charge_widget(battery_data),
            get_savings(url),
            get_todays_generation(url),
        ]
        keyframes = [
            build_keyframe(0, 0.0),
            build_keyframe(0, 0.25),
            build_keyframe(-max_width, 0.25),
            build_keyframe(-max_width, 0.5),
            build_keyframe(-max_width * 2, 0.5),
            build_keyframe(-max_width * 2, 0.75),
            build_keyframe(-max_width * 3, 0.75),
            build_keyframe(-max_width * 3, 1.0),
        ]

    else:
        widgets = [
            get_overall_realtime_performance(url),
            get_current_load_widget(load_data),
            get_current_battery_charge_widget(battery_data),
            get_savings(url),
            get_todays_generation(url),
        ]
        keyframes = [
            build_keyframe(0, 0.0),
            build_keyframe(0, 0.2),
            build_keyframe(-max_width, 0.2),
            build_keyframe(-max_width, 0.4),
            build_keyframe(-max_width * 2, 0.4),
            build_keyframe(-max_width * 2, 0.6),
            build_keyframe(-max_width * 3, 0.6),
            build_keyframe(-max_width * 3, 0.8),
            build_keyframe(-max_width * 4, 0.8),
            build_keyframe(-max_width * 4, 1.0),
        ]

    return keyframes, widgets, max_animation_duration

def main(config):
    """
    Main driver function

    Args:
        config: Tidbyt config

    Returns:
        Root Widget
    """
    serial_number = config.get("serial_number")

    if not serial_number:
        return render.Root(
            child = render.Row(
                main_align = "space_evenly",
                cross_align = "center",
                expanded = True,
                children = [
                    render.Image(src = SYNTH_ICON, height = 32),
                    render.WrappedText(content = "Enter Serial Number", color = "#ffffff", font = "5x8", align = "center"),
                ],
            ),
        )

    BASE_URL = "https://api.synth.solar/api/v1/devices/" + serial_number + "/data"

    max_width = 64

    keyframes, widgets, max_animation_duration = get_widgets_and_animations(BASE_URL)

    return render.Root(
        delay = 80,
        show_full_animation = True,
        child = render.Row(
            children = [
                animation.Transformation(
                    duration = max_animation_duration,
                    width = max_width * 6,
                    keyframes = keyframes,
                    child = render.Row(
                        children = widgets,
                    ),
                    wait_for_child = True,
                ),
            ],
        ),
    )
