"""
Applet: Tarot Cards
Summary: Draw tarot cards
Description: Displays random tarot card spreads with their images, names, and meanings.
Author: frame-shift

==================================================
ATTRIBUTION FOR CARD IMAGES:

'The Arcade Arcanum' by Rose Frye 
https://modernmodron.itch.io/the-arcade-arcanum

Used under CC BY 4.0 / Resized from original
https://creativecommons.org/licenses/by/4.0/
==================================================
"""

load("animation.star", "animation")
load("encoding/base64.star", "base64")
load("http.star", "http")
load("random.star", "random")
load("render.star", "render")
load("schema.star", "schema")

# Set default user values
DEFAULT_BACK = "C"
DEFAULT_MAX = "77"
DEFAULT_COLOR = "#cd90f9"
DEFAULT_DRAW = "single"
DEFAULT_FREQ = "throughout"

# Set URLs for once-daily draws
URL_ALL = "https://raw.githubusercontent.com/frame-shift/tarot/main/range_all.json"
URL_MAJOR = "https://raw.githubusercontent.com/frame-shift/tarot/main/range_major.json"
CACHE_TTL = 3600  # 1 hour

# Set card backs and fronts (19x32 images, see attribution above), names, and keywords
CARD_BACKS = {
    "A": "R0lGODlhEwAgAPUAAAAAAAE1RAE6SgE+UAE/UQFHWwFKXgFZcgkWJRAzZhGQtBI4bxI7dRQ+ehRFiBtDcB5MfyHF8yJQhCJXkjAIAD+atF261F85FGDT83NJH3rY85vi9rF0J7R2KMSINfCgMPGrP/KxSfO9WvTEZPXPdfXWf/bbhvbfjPfikfjvo////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAAAALAAAAAATACAAAAb/QJVlSCwah8IMKAQCfZ5Qj1R6GYpIpJF2hCWdTtuPxzrKXC4Zjkc08nDOmfYwZL5IPCMRJ/FoNM4lYxYeJRl3ZQQJCwsMC38cHEMeJBl4GYoPmQ0JDWqCk5OXnA8MfY4XJJ+pHgOLDYyOp6mSq4q2rouoqiQXCQlnvbe6tCS/GR1SHGaKw4MnHhlxIFIhqZdpkc7KIh0VRGoi0SKqcYIHFRoWE2oZs4OpHBoYFQIKFhgRChwigZIlegoiYLCgQEAFDBrUuAvlZoIFDRUOSCqzMFyGcdksVOgQjsOzIZCuTQohBUSZSh/fXVhgzFOHZVhUrbT164wvVAt54WLJM4GUWZwXXr1q9GrBgJ8yhZLq46sdKEluNjXI9IBlOacg3wxdlIBAOQkZ+g0qccbPgwT72kiAE2JiHTV53NSJI0LShy1fumzhQqKuhQtTpECB0oRJBgtCjigmoiIIADs=",
    "B": "R0lGODlhEwAgAPMAAAAAAEJCS01OV01OWVlaZFlaZVtcZ2VmcWdodGtseHd4hIOEkZGTov///wAAAAAAACH5BAUKAAAALAAAAAATACAAAATKsLFJq51y6c27nouSjCRCksoCJgoissTbiiqzJC5uEslxsKbarYWKlWirXvH0SwhHOZjM5Fy9Rgojqmo7mbLQ03OGjZKfiAO1QKCmg1aXAUEwGHznlelw5/vSRGM+CQYEfHVfXDcHdQkDBASPam2KOG2Mj5GEg2M4hXeNeJUuaj59dziVM6aFCAZ5XW9QBAVQaqpmuUhdJSMxCFQjnUVXLJU4MlpEx02+V01jwVlXOWgiwAk82IFxyVO7ISdh4ikgHucbDBIX7BQNEQA7",
    "C": "R0lGODlhEwAgAPMAAAAAAAkWJRtDcB9Gbh9NhCZgoTAIANrn9vieBfi9BfutBvvPBv///wAAAAAAAAAAACH5BAUKAAAALAAAAAATACAAAAS98MhJaw0k682DFEVoTWEhSITIbUdIoEUrCMSc0XHxHu/q8yiejwME3jSDY63Yq2kUytOuqUEoEMSpULNQQFnazGCcuI5vTCECkSAgBmtsL5hZJxZWeybNHiTWVwh4f0V+CYdsb4mHhwMScHFxkJFvQXCTgViVYW5seJl7nHaXcaF0YgRlb0mmRjU0XVA0S5xVV1mnG19gpzYCrLNSuUOtVMRzPDmzTk45UyLLwS8uHyUjEiUnBxjHGx7X4BIRADs=",
    "D": "R0lGODlhEwAgAPMAAAAAADAIAJAQAJYDAK4DALcdALokAL4vANAQAOS7t/vr6/3z8////wAAAAAAAAAAACH5BAUKAAAALAAAAAATACAAAATQUKVJq50yDMK770MwDUh5USUyjKZ3eEm5JmRSDAL3EsJQxLPV5rArvoQjGpFIeC0PSFqCQHE2KdRgNWE9cCla7q9r80qlg1fC0CQYptDzikojDO72STbJ3XAKIGZhOR2AHQJ8K1B/BQYFhmlyE4sEBQeON4J8UI8GB5CaUpSdjxyRgx6GHIiSfYWBiVMjdngze2hqbC9vTVEzn1xtXpaxk8FOX7F0x1d6kmlLwku+dUxtTUdyCDY4Oqs+QCzbLjAy4tsnMeYJGh/upiIS6ekKEQA7",
}
CARD_FACES = {
    "0Fool": "R0lGODlhEwAgAPUAAAAAAAAuHABYJQIeFAM6Gg0AAA0CABEqehIGABJNqBYEABgEABkEABl6MB0FAB06lyAgICMGACMMACMRACUGACWPOiYGACkHACoHAC0IAC2fQDAIADm0SjwuFD3B80QhAGA5E2LN9XNKMYmJiY9sI5dtVZ7g+aFuJqt7TLEoKLGbRLzq+8ASGMy3Ytra2uW5fui7WvF0IPJsT/ORMvPthvXw0Pe9TPf3qPf39/jAkPtHR/rlV/3zs//GlP/puv///yH5BAUKAEAALAAAAAATACAAAAb/QJdwSCwacbjRbtlqLWk1U8jjEeJ+OOcO5mqpYLfaSlp1IV2wpUo4SrVeuHF51ErDWhphydkaxUNCS0snNjAqDSQiHx8iJVKBgigvKjMtKCgqIjIyI2VbLYpvlDY0PiMsLCOALiQtJSAQb5NpbyUlHqsgti0HCSMJByKZIy4hJp4tLiMHD80HxJNjU4EwwSLMBxAj2yNS0y5qB64PIyLXJt4eK0JhOCbbKsvd6FMmQ2IrK8sPB/3SVMqE5JMCrB8/F94eZPgghN47CBBAPNsWAMKiDUJChFiBw8WJRChIdCBAkgCEAELUrUugAkUAcyImiSiZMsmHDSJIBOggokOiqRclVBAYom8DiRIkEAT9IClHjhJDXei7mWnDgAEABqjwkkPEgIYjFmWQkGEDBgcIOqjtMEFBxgMbLi6S4MDBhAETAixwkNEDhAwXFihQYKBAgcEIErt1QSWB4QIGFDAwYKBuAQcKJAhJwNlBhLoWInwW7SC0hXs5XuTo4qLGG9ctatS454NFDaB9+hDbJnt269ovatBpMuKFMjqyiQSfncy18SbBjUifHgQAOw==",
    "10wheel": "R0lGODlhEwAgAPYAAAAAAAECAwBKgAIEBwNQiARCHwY8YwgMDQpblg0CAA0bLw88XRFoqBMiNxYEABgEABkEABtjOh0FAB0+ax8TBx9AbR6AyCAgICBCbyMGACUGACYGACkHACoHACtOfit7TS0IADAIAEUOD043IE83IFM6IlQ7I1Y8I22PmYBaNIdeN4mJiYthOYxiOZjHs50KDsASGMHBwdoAANwfI9/f3+ARJOPPBOTZD+ofK/AsM/Xw0P7kAP7nAP7qAP7rAP7sAP7zAP/5AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEMALAAAAAATACAAAAb/QFpsSCwah0KXEoXxTBYelNKFkrqGS09zFVutqNeYFKuMSrmfqTD2IU9R3K7yw11hyNUUyrOoUqsFaVh7VzQeHis2flNhVR5DdiszL1GMjV4rfB4nLyeHVlVDKDYzLZlaJ00eCImhYispLS8YCye2C00nLYqicC0kthcnwicNGCmevZu3GKm1I7hakF4nI8KbzRcXIk1tMTY2LSe4DSnIxgsiuzNDJ+bvyAsl8JwvQw0iIsUNI+MXDQBFAGwwpEm6BstMAKQlYkGFCUMOeRjRD2EqgBdSSIx4qEWKC7icCbNxqiAiGCfyCduWwsYLL3didKREq4VNh7FSNImIgcG4ZEMpYLCQaKvCoxi0GMDBgGGCiRFMV9BwYYfnnVNaVH0RsoAjBjsSP1FZkAnFkAVo06bFdOgCUyI6dAyRKzdG3SMwhqDs4kXICbsxUqyJwS7GBUxxTBBJEcfI4Bhr6hY6QrkIjSAAOw==",
    "11Justice": "R0lGODlhEwAgAPUAAAAAAA0CABETFRBYuBYEABgEABkEABwFAB0FAB8FACAgICMGACUGACYGACkHACgoKCoHAC0IADAIADgPAEig8E9NTVMGCGFhYWQFE4hYOImJiZBAGJQwCZjo+J0KDsASGMDY8MhIMNdgENiAKOJ8F+qoIPF0IPDAaPXw0Pi1JPngafj40Pvdaf3maf3taf3xaf/Hl/7xaf71af///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADQALAAAAAATACAAAAb/QBRoSCwah8JKZXRSlU7QUklFHSmHSo3GpdVchpqXy1rBlrcnbUY7eqkwV9DlzNXIwaqMpfKVny0WGUwaFhgbgBd9VxoYjYYbHI57ZSCLjRwbjpmAcZaOko2TZiCEjUsYgKGdfxZ2LBoZGByclBlnGRMZUiWxqKIgIR8nIyEbAxsjxqm/ShkXcBpMI16hiWZrG84jJdMVqBOrGRkfJSwsIywtKSFrqxsbHyEpJSFSIh+BqxMfHhz12+908cpgZkIoZB9EiBA3YkQsMw8AWSD24cOIRhMePKCkZEKhDCQqfuAgQoIFcBw75gpZUdyGCA/EYZmjMaFID8U2ZvAwRKMSWwz8PFT04AFOBY1mjsqCRHRDPwwbKWnUqEDBskIWFEwdUrWr169dkcA4gaIsWQ1jT8DQgAKt2BBa0rRFAYWt3CFjp6HdS1fuXRBjUaylK7jvYA0nQAg5wpgIiiAAOw==",
    "12Hangedman": "R0lGODlhEwAgAPUAAAAAAACmfQh8Rw0CABYEABgEABkEABwAAB0FACAgICMGACUGACYGACkHACgoKCoHACwHAC0IADAIADkZGThYcDwKAEknGks2KVgqGHBIMHCguHRLMnlONIRWOIhYOImJiZAgAJViP6BgAMASGMCAUMDY8MhIMMpkANyNAOH/PObp6vCgMPG4APXw0PfzrPjImPj4MPj40Pj4+P/Hl//bAf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADYALAAAAAATACAAAAb/QFVpSCwah8JP6aMUqjRG1XMoqF40TI1KWaIIsILhZRPqfDSZTOlyvlzS6hKn08EsmSpOSZURzMMlVQIOHywkJB8bGA4CHxdVVFUfMi80LxllW1uQgVUoHyovLyEhHzUyNRqcVRs0iCAgHmYyqB+rSzQuKiIjGSAhKjU1nVRKHYgiIbAgGrQqXkNnpzJTTGbCwkRSqDIlUFBMtNxD3M4fpCQZGtin5NMfFB0aWBQUzcLdJdxn9t/1WKiE6KM2TwkUb/zG6cvW79s8CiXwuWNI4QwTiNjyoRLWYsUhF4dWtMAmcGONFyxEUUKREl9JbCxJiEBxiAUKcQJV0KqxIgUJYho2RbBYkdEdLZQiDiVNuVPjtJUyWVgS125hxhcoTqB4YbLqvK9YLGSwcAbswRctXnwQxWQt2rRMXgwh8YJEBERq4x4C8cHM3LoWELV1+4IvkyFo1ao95LZFWlFyBR6ZjCQIADs=",
    "13Death": "R0lGODlhEwAgAPUAAAAAAA0CABMTExYEABgEABkEAB0FAB4hJCAgICMGACUGACYGACkHACgqjCoHAC0IADAIADw/vEJCQkJKvUJr90RMVE9NTWA5E2ZzeGhoaGpqaoOLkYS9/4mJiYxiOYyMjI62uZKYiZSdoKeogbC4vb29vcASGMvj5MzMzNjY2OHh4efdlevr6/Xw0PeUHfu9EPztjP7cB////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADMALAAAAAATACAAAAb/QBZqSCwah0KMMsPMVCpOaEWz6QyXoo9IkxJ1UtqUhjncTCYZ0keCyoja3AOgMqSQSCUMCqPysrQsGnNDJCkqJRUWFwIdGB8WGCISABlDJXgpFhoXByIhl2odB5UoB18kGJtsYCUdKiQSeigNExgNUxcAAHgkKIKxdWcTUIsCEm4bAgjAKBMNIBQRkRgVJBsSIBtKshVnFA2RGxsiG9VeSkMNFBMREhLiIL0Y1ttDwiQiGOMnJyTVIB0+bLD3bcw+fhiYeBmhwV6EBg02gODXr4I7Ey9GsGkDkcJEiiISWYgRw4OFIdnYieCHgkSGAxYseHBhkgiICR4pnpAUU8AFogsbSdzkEAnFCRASBBxIagzBEAECGkSosA9FSARQoTpFgQABrWfixoHAkLXrEAlAIW4gsTTWBgRLgQ45QPcAAnFt8bY9MJeuhAOo3JHL4O7vxrhARdS9tswu3CEKIiuwsCGB5MuSh6xY0aIFihIlPn8G7dmzJROcLZTwXGLEiNYlPoX+jHoFAtCuR7R4PSLDayKkQadAUXp2iRShhRxZToRFEAA7",
    "14Tempance": "R0lGODlhEwAgAPUAAAAAAAGWuACt7wKBhgRYJgh8Rw0CABYEABgEABkEABgZGhwAAB0FACAgICMGACUGACYGACkHACoHACwHAC0IADAIADQxLDlLgDolHDwKADwYGD0lHEEmG0SAzkknGk0oGlgqGGOb5GiAyHBIMId2YYmJibjQ+L7JzMASGMCpjtW8oNzq7+W5fvF0IPD4+PPthvTWtfXw0PeUHfe9TPj40Pq4JvroL////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADgALAAAAAATACAAAAb/wNVpSCwah8JiKbVsnlJHIrRUOq1Ip2o1mj2Rqpbs1XrUplIrqnJL1XpJ3yw1pYKeVPhqivWSsaB0gUNndCUkMywsM1R1Z2yETCowMTAkkClYWY11JDA0KiSNTCNDI5aNliQolmckI1uuX1spASIzX6Z2JyIiF5knASWIskYEF75CJQMDhqq/QwUErl6LAyu+LXBFBKYWF2c1IyYiH3CGRNIpDZggKFYi0l8FBUPSeJgnJi4r8KEpFgTqsVJRYoWLgyJY/Qt4Il2TFQZdiCBEAiC0V04OpiHoigBDj7moGPTCzuPHeb5MnXDxhkSAeQwHBOjQYcAFESFMhDg2oEOIVwADhvgMISAA0GNGAxQVUHTITAEhOihlStMn1QBDLixblrTrVptD7qWAQWdTnRiNwjKh82oEqDkjYJRQEZZgiRiW5s5R4XZuWLIp0MKog6dw2iRcoqwIAgA7",
    "15Devil": "R0lGODlhEwAgAPUAAAAAAABzagsLCw0CAA8kQBABARBYuBYEABcXFxgEABkEAB0FAB83VyAgICMGACIiIiUGACYGACkHACoHACwHAC0IAC0ZBTAIADBNdDwKAEYgCUlJSUig8EsASVEwEGYtkXBgYHVMJHZ2domJiYtkPYxiOZBAGJCPj5jo+KV8UsASGNiAKOKaQu5iDvDAaPXw0PeUHf/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADMALAAAAAATACAAAAb/wJdwSCwWD4KkALFEMJnKg1CpsZxGp5NIdLJkLMkpwhPycEHZLDmkEQgJhLLlhbVqPZZQCCFkMDweAhohKS4rel6ADH0MBBYpkCksKSuQbH59G3+UkIaVhwQYiy+cfiElK5Mpen6iQoUrGySrlIcmKyQMri8lqi4sKyZlvSwuKY1CG5IqK8wuKrWSKRtzLwzK0ISSkyomlCwhjBvjISsuv4Z6JMB9BI1k38CrIRuEbwwIcXqnJWV6HpKmKCEDCJCGDIBMeBOIYQQGMhmqEBRhggWJKSGyGFBG4oEGEiA4cDjBgsWUE9JkpXjggQQJLCQUTvlgYEW/MiIeINiACkQIfjcvBEACASKFBxAPHozbAAJVuBfaJjHdoBSgpEomhHTQUAjchiVMy1Uql2kSCw8PlIyZdOjiiwYgzqYooVNJiVXgHghZ4MHEgr9JH/wFbMLDgiEuhpw49+LEi8SNIT8292KD4zSRK0s29NjD4saO0VT+/JhxFsSgQUs2wppIEAA7",
    "16Tower": "R0lGODlhEwAgAPYAAAAAAAGj4ACt7wSEtQgHBwldfQoJCQ0CAA8ODhAPDxEQEBETFRCo4BYEABYPFRcWFhgEABkEABiYyRoNGRqz7R0FACAgICAiJyCj0SMGACILISUGACUkJCYGACkHACknJyoHACoJKS0IADAHLzAIAD8DPUE+PklISExKSk1LS01MTE5MTE9NTVNRUVNSUlRTU1tbW11dXV9fX2BfX2FhYWDM9WJiYmJjY2NiYmNjY2NkZGRkZGZmZmlpaWpqan3V94mJiaTi+bzN1L3q+8ASGNXx/N30/e5iDu75/vXw0PeUHfb8/v/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAE4ALAAAAAATACAAAAf/gElCg4SFhoOCDgqLDw4Pj46PD4sOg4sKD0JAQEIwm4MtCpyWl5wwmps+QpNCA6QOJKhEg7NJLwUMGJZEvERHREq/vECuQBKDM0rBykxMyjUYPwU/MBegSsDOzcFAFDUmmgqDCS1Ezc0zMBwzEgMIoqpCKUdKzvUzJyYmMC3vJifImByhh4PXhwUPTLC4hGBQBl8zfj34sGKFDBQfGA5CQAIFLxIfWqRIISOGCY1C3iko0cJEjJYnWrDQd7JhyksKTuT7p5AFh4w2VS76QNNEyIwcLNicwHTChxc7TVh4ZMIB00FMre6TcWJm1xUfPlwVwtQEhxcvYOhcgQKGDH0aniZgPUEU7QqdKPbNMKGh7yANZj/AiHE3L4vBMEKE0DAoBFGjRFf8SxEjxosRiht/6Kq2aFsaMExkFoKZ5mad+lrYUDtixKARF/RN3fwPxc4PIVyTvmDhw6MLHyz848D7wQXdiytU0JBhQoa4FZpO0BCikCAhgpJkPzRIWRJwn4SAO5UEiA+AtJKw0CTExyf0PcIjQnQd+3z29blzTxIIADs=",
    "17Star": "R0lGODlhEwAgAPUAAAAAAAA8UwGWuACt7wNDIAJ8fARYJgZpNglDEgh8Rw0CABYEABgEABkEABwAAB0FACAgICMGACUGACYGACkHACoHAC0IADAIADVvvkSAzmA5E2iAyHfH5YmJiYilcIpvWoxiOZBAGJdtVbjQ+Lt/P8ASGMacbeW5fvF0IPD4+PXw0Pe9TPf3qPf39//YAP/yAP/5jf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADIALAAAAAATACAAAAb/wNRoSCwah0KMsoApMJdMp3KoxJg6HVOB0xkWVFoMVZkNjD4jbKdwnY426XR2pB2pvuFhZ7Nhm14nJk0Fa09jGCcvioonWY1Vh1aKLidkJxuQI1VWfyaCSph8XWl8VZ+bGBtcQ3CYiKgYHZuRJyynsWBSkRgeVVgbjQYBBmOlliuBmFgaxZqgnicrsrEFxRsZSyce0SJOH2LOGBnYSh+eJCQnButj2AdPBdsqIRcqH8Qj7wUJB+sBICbSBNBwj8CQdQb6GUCAxcAeAVsK4FuXgJ8BghoMCtny5iBCAwQ0FLhAQAyHKNVGEBDAsgDElwUOQFToJcOAmwMEZGDZT2dMV3w2cQ7YmUFiwgIZ+A0RKlSAQqQQ8UGRQgCBVQQGqpixo+KE10AmwIIxoaLskLKeVHhI68kTAA9muZ4ocUJFB68fsmi4G7esV79d6wb6q2KEkCOIiaQIAgA7",
    "18Moon": "R0lGODlhEwAgAPYAAAAAAAGWuAGbxAGh0gCi1QCi1gCt7wMCAgJmYgJ4cQJ8ewJ8fAJ9fgJ/gwKBhgKLngRYJgRaKwZpNgh8Rw0CABEQEBYEABgEABkEAB0FACAgICMGACUGACYGACkHACoHAC0IADAIADIiEzVvvjwuFD4qF0SAzk9NTWKX3WpqaoRYMImJiY9sI50KDqJ7UK9mSrJsCbisSbtxDLu2Sr50VcASGMF0Dcacbce5U8l2D86gd8/Lb9XRfNfTgtfTg9jUhNjVhtnVhtrXiNvXi9vYi9zZjN/bk9/clN/clei7Wu0cJOzbzO5iDvJsT/N7FvSDGPWGGfXw0PeUHfiiGfmpF/mvFfmyFPqwFPq5Evu9EPvBD/vEDvzLDPzQC/3WCf7cB/7iBf/puv///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAGMALAAAAAATACAAAAf/gFFLg4SFhoOCDw4PIyMrNw0NMS8ODSuRD4MrmymbPJtLKz5LKYMIgw6cmzs+J6ErSy6bDZqwKTI6Szc6UStAoYOlS4oOOUlJMTg4LCwxyTEsL4ONI05bXmDINzhGSERFOLBLjTpPWdhgOEFFSEhHPzg30yPlWF5fXzg7+j5IQTvyxjVyQoULPmU4YgwxEiTcvBVTpGDhcu9LFxw8jAzZpUkWDSdSrGzhQvJGESM4aNAY1MBBoykgqchMwgpHjhUOBp04geAGjRtScghVduOGip2DNJxI0cDRDUc6aGyKkeKEhkEkljal1miFixENqpLQqXVEjBEmTDhyxKKqqyU71lM4MMHIkYkVKEyERQp36YlUR1NQM+H37dIVKXS4iJsiQooUC0xURfXgkQ4WKiKoWFyUBIMHJgZFkHDChYsSESZMcIH5hpFdEAapjlDihATVpiVEuOHCCAsJsidIIA1h+OIWWU+oGD5oeIQISlrUJtGihlzhEmIviZAgQIMa0sGDDzBAgIAAp7Y/WK+ihXsVR9cvWOAgASGNgpAs0YEkig8fUfCiXyE1RBXKDSn48IgPACAhziBIFJjLIzcAsQISDHZSiBGjLKEff0v8tx+GiBxiYiFRBAIAOw==",
    "19Sun": "R0lGODlhEwAgAPcAAAAAAAJAHgJCIARYJgZaOgZePAh8RgwCAAx0GhCwyBYEABaYDBgEABwEACAgICIGACIiICQGACYGACgGAChYmCoGACwIADAIADQyMjRuvjhywD48PD54xEB4xEB4xkB6xkJ6yEZ+ykiAykiAzEqCzEyEzk5MTE6Gzk6G0FBQUFCG0FCI0FCI0lKI0lKK0lSK0lSK1FSM1FaM1GAmCGpqaoiIiJAQAJBAGJDg4JhEErAQAL4QAMASGNAQANJWDNJYDNJaDNRYDNRaDNRcDNReDtReENR0FtZeDNZeDthaDNhkENiAKNikJNp0Ctp2Gt5cDOAyBOBiDOBqDOBqEOJuFOJ2CuJ4FuJ4GuKAFuQ6BORCBuR8FOR8FuSEGuZKBuhIBuhQAOpWAupWCupeAupkCuxWCuxYCuxcCuxiFuxoCuxqAO5iDu5kAO5kDu5mDu5oEO5qAO5qDu5qEO5qEu5sDO5sEu5uAO5uDO5wAO5wBO5wDu5yAO5yDu54BPBuFPBwEvByDvByFvB0DPB4APB6BPB6DPB8BPB8FPB+APB+AvB+HPCCAvCwCPDAaPKCCvKCDPKIBPKIFvKIGvKIHvKKAvKMAvKMCvKMGvKOCPKOGPKUCPSQAPSQCvSQFvSSAPSUBPSUIPSWAPSWCvSWDPSYAvSYCvSaDPScCvScDPSeCPSeCvSeDPSgHPSgLPSiHvSiLPSmLvTw0PaWAPacAPagAPamAPamLvaoCPaoIPaoLvasCPasMPauIPikAPiuAPiyHvi2CPi2FPi6Bvi6CPi6DPi8Bvi8CPi+BvjABvjCJPq4APq6APrCAvrCBvrEAvrGBvrGEvrGPvrIBvrMBvrOBvrQBvrQCPrSBvrSJPrSKPrURPy+APzOAvzOBvzUBvzWBvzYBPzYLvzaBvzcBPzcCPzeLvzgFvziLPziSv7iBP7kSv7mLP7oSP7oTv7qTP7qTv7+/gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAPEALAAAAAATACAAAAj/AGPhGEiwoMGBAjPU0CCCggYKNZgYWUhBxMIMAzUw6aKjhscasWh81NFKhIaBHV5o0+SRRo5YOWrgoHGsUYsOA0W4aKQj1seQOGTmeOFCRM4XNXQZkcikqQ4mOvLUeGEUhwgZS4qZypSJkblVliwlWmQERlWPraQRW8RIEztNjLi4okTF48Bk01xVE6et7ztG1KQ9q6RmWrKBTHjVupbOnTZ17RgN+yYN0xhdTFDW6EKNHDt0ybQdo9XLlyMkNXBalVFj2DVkvCYl06Rp0SI1NWJUFQGjRilnwKRBM2UsmKU+fV5QHfjhRaNji24xUqXLVR81ZLLJcPFBs7RLU6hc/2HEyEiRJ+MbrVCt0CMTiEaMLMnxIYPEDhhnSswxIweTHDoAkQMF/xmRAw0D0WAEEDdIdMMOGCAgYQ4A3mDEQBvMYMJ/DA6QAg0pGJABBRQQMAOGG2xAwxJGzOBhCilAlEACG6QwUAompDBAABuYkCOMLi1U440fwuijjzPcsIEROmiIIA4wRmnkBhJQaAOAM2wwEAZcprgBlzc0yGSTWQ4kwAAFpDmDDjbYsJ8OVp6IA5oG1DnADG3mcIMN/c3Q30ABBDrAAALgiSeffvp5AUKxNNpIIz7F8mijlAqEQ6VGPLqBTyKBRCmjkjbCQyMptARipaCGKmkNk3ra6KUHxQVaUCwBAQA7",
    "1Magician": "R0lGODlhEwAgAPYAAAAAAACmfQh8Rw0CAA8PDxYEABgEABkEABwFAB0FAB06lx8FACAgICEzQSMGACUGACYGACkHACgoKCoHACwHAC0IADAIADgPADg4UDhYcDwKADwYGEQhAEQmG0knGksnAlArBFVYZFgqGFgxBl8zG2BgYGU7CWRACGiAyGxICnB0g3GOpnkAAHlUDYM+GomJiY5DGpOZrJiImKVSJaZUKKdXK7EoKLO5w7jQ+MASGMAuLsDY8MTFdcXM5MYxMc2bQ8zMzNm4SdnZ2dro9uHh4eY+Punp6e5iDvD4+POxafP3/PXw0PeUHfbFaffVafmnIvnXK/ngaftHR/q4JvrSafvdafroL/voafzZL/3maf3taf3xaf7xaf71af///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAF8ALAAAAAATACAAAAf/gEZAg4SFhoOCDQKLiowlQQIlkSYNgy2LLwI/AjFCL1c8kosCg5s8TjxBPC9AP11aq6ODLC1OWltbVzdGLzw8UQIBAaRAKQJBTripPDJaUTybw6UlJSq3vr++Tk6LLYMlKSoxWs6hLb1aJS6ag4oh41s/KjIyKo8CIexANQIdLkFXXtwQIgRIDB5NNv0Y5CRIDRK1SmDwgIFEiBdaIC0EkqSJjBg3YgQx4cJFih9btDgpsbEJlXoxaswwAcNFiyBasgRhOajJNl82fMR48SImwCxOmvSsQo6HDR1Ahuz44WPGlStRlAJpUgWrExg+gCAZQtXHjyhJGTK9BVYskh9P53UEQTqoY8MgLYrcGOvDRxFodIEECfJjMNUYO3r4tdFDpJNBNfr+mBL5xQoVkWeogBhkkA4mTFwIvaHiRgYZNmAEOUFiY4oWJ5+kAKFiRUwfMMgFrsG7d40WKnYsjlKFSpJBJE4oPzFixIcYKmDoKGErMIgRIEB8+MCCxAgBGEoEePEjLRAJAkb8AEHChwAXAWzH6DHMG5BRDzhwQC+gQYwV/fVXCRA8ALEEgb4QCMQNCfKwxA2D8CCXDy+cUKAMqxD4ggcqqBChD4TJUAIzGLJCj4UpRGhghAUWyGCLQhQoyCE0EmJEIAA7",
    "20Judgement": "R0lGODlhEwAgAPUAAAAAAAMfEg0CAAw6JRIAABYEABgEABkEABgZGhwFAB0FACAgICMGACUGACUlJSYGACkHACoHACwHAC0IADAIADQxLDVvvjwKADwYGEQmG0SAzkdncEknGk0oGlBQUFgqGGOb5Gpqam2PmYd2YYmJicASGMCpjtFvBdW8oOW5fvJlIvTWtfXw0PbecPieBfj40Pr2tf/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADMALAAAAAATACAAAAb/QBZqSCwah0KLUrmxNJ3L5TBqMZFIIpLpKUVZRCElCRXaWJ8hkWVoRpE87uF4sxlvh6bhakQ65U0jgCt4eFYrgygrLCsmMINaeSgjk5OMiiaDlJNDHnQiJphWeGkiG3AonSJZqiswJBurdKdOGyMnZSEoqqV0TVMWJS4uIx4lt6obKSNKUyctw18uLSOlHsIkaygpKdcWJNLDtc8uY24n3SYtzyfe2ycnU31+JsLgVynvIr9LKS3b/SeyYMsWRQS+dwjVdNFAxZaJE9hAgGCYTQNDDSAsYJyI0aJGgrQ0WtTQa0OAAHSGnBxQocLJlRU8eKgw4KRKBzNj1gwgEwGAYZgOAgyJuQDBgpkBBngwikAATgdDBSxwgNMlzwpUF/w8JROrzKA8PUyNKXMo2ZkJ0rY8mrOCHiEoTMAlAioUkUWBxuiNCwcUCURD8pJBkUFIX1BzC9XFxChSIhSJj0hmEQQAOw==",
    "21World": "R0lGODlhEwAgAPUAAAAAAAB2owMfEgk0RA0CAAw6JRJNYxYEABgEABkEAB0FACAgICMGACUGACYGACkHACoHAC0IADAIADgPAEdncEqUCE4uDlNHQVLvOWA5E2LN9W2PmXBIMHVMJHsJDHx8fImJiY5DGp0KDqVSJbWZOb9hLsASGMLCwsPDw8acbdKNZNiAKN7/c+W5fuTFW/F0IPPthvWfDPXw0Pe9TPmtgfm/Gvj40P7nLf///wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADkALAAAAAATACAAAAb/QBlqSCwah0KNUrNhKpub5nK41Jw2oBMItEGBqlRmIPvZnMooChi1wWAqXlAa9ZFttV1UpdLpLCQZHh8cHxkkcjIfQ30jIyEhHiIikCs3ODiJQxQhIyWQIR+hHiMdRHJpF5wWFB9LGxQFoRwcQ68CBgYUFFFRHwMCGRYWtRQDARQBBikuMSkcGwICAwaaA9MUuCkoKTOtBbd5GrABURQjMiklZSACalSwUSAdKS0tWyAXBe4o4gJNICk+yKEQMEA7De8KSDGQjFWHKPoQ8qPgT4kBEC1SpHjSLs8rhUrGwOhw4UmBARRqGQD3pMUFhhpWoiQmQCGvDQzVfNOlycCBlpq7NgQ49rFdShQdSHDI0MdAOQO/Oh4NQWJZiA4WPEDiMCKYhaRDmNILEUwSJFLB+oSdR6JDMA4XKHCwkGGuhQFD6HboaiEXFArBJsxEMWDCBAsTFryMEuDCggkRoA5pIUMG5RMnZGDWfAKFZiEoTNQzcSYLCAtyFnDuvE2FxjMoTlzIgmIBZtiTkWzufJu3NtBHgiMJAgA7",
    "2Priestess": "R0lGODlhEwAgAPYAAAAAAAMDAw0CABEDABIAABUDABUVFRYEABgEABkEABwFAB0FABwcHB0dHR8FAB8uMiAFACAgICMGACMjIyUGACUlJSYGACkHACgoKCkpKSoHACsHACwHAC0IAC4ALTAIADMzMzhYcDwKADwYGD5heUEmG0QmG0Vsg0ZqgkZrg0knGk0oGlEATlV9lVgqGGJ3rmpqamqjt2qkt3CguHSyxXh4eHi4yn2Zun3A0n7B04LH2YeHh4mJiZBAGJHe7pO415WVlZe625jo+J6enp658aK98aXE56jF6qqqqqrG8qzH8rLO87S0tLjQ+Lt/P8ASGMKJd8RgPc1wRs95Rs98RtaKTdiAKNiNTdmTTdra2t2ZU9+dU+ClU+W5fvDAaPD4+POxafXo0PXw0PX4+/f3qPj6/vvdaf3tafz8/P7+/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAGsALAAAAAATACAAAAf/gFlMg4SFhoOCAwKLiyA3Rzc7WV+UX4JMAgCaGTxZQzeCSF9qpF+DmQAVMCFZMEtIQDtMY6WDBhEYMCBDnqBMLUhZY2imTEBDQCAhPzc3S80/vENMPINIGEgwKEdL3d1HLYJoQIMwLOYeLT/cS0EtHrxZl+cwBh4sHiQtLfgeTPLVmAAIgAGABw8xWpxogUKGPzWeBg0seBCEDRkxdIR4+AWJRIIG8Z2IkfAgE4geqQGBEZLFjR41hqTgmPKfwIMthnTJAuWGvyw7YCCSZ9DDjRZQuMBowWBWjRrWmCApeuLGDCQtUjTlsWOaQJD3QFz9chREKa+abhlggWJGixkoxk6YhYgWgFoPM2jsq+HELCVCaSMYCLEvxYwaO0DwlCrR7gQDzVC8WHIkyAk0UICkNGAARA0YL1C0CNKkSZBIXLhAZQLjKYgAJELMMGJkSZYgMMxwCeiitwsnPV78sAGEB5BjXrAIZRKlChYnO97OsIGkBhYsLYD0iDIoypQqNVogjr4DSAgSTpxQ4c6kh/v38GHAdz+oSxebiAxdutRFChQkACIxxA7VdeLCSvxF8d8QQ3g0TXmDaEaIffgNVYggGB6i4YWBAAA7",
    "3Empress": "R0lGODlhEwAgAPYAAAAAAAGWuACmfQCt7wgoGQh8Rw0CABA9KBBYuBIAABYEABkAABgEABkEABwAABwFAB0FAB8FAB9XPSAFACAgICIGACMGACUGACUpNiYGACkHACoHACwHAC0IAC80QS42QTAIADMjHTU6RjgPADhYcDwKADwYGD4lHEQmG0Zrg0gnGkknGkig8E0oGlV9lVZaZVgqGGZqdGdrd3CguHkAAICEjIM+GomJiY2Ql45DGpAQAJO415e625jo+KBgAKVSJadXK7ciIrjQ+L9hLsASGNAQANg0NOBAAPF0IPCgMPD4+POxafXw0PfFGvbFaffVafngaftHR/vdafvoafzhCv3maf3taf3xaf/yAP71af///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAFsALAAAAAATACAAAAf/gEo8g4SFhoOCTk9QUE9LS06QkYuNToNPUlZWOEw4nDeDN5pVT4NOUlNWS0I3N6yeS6lQljyKUJtKnko3TEw3VVNStE6nTgcvkEORQ0NPVk+0S1JQBxIHT1nZ0BISTqSDEktQPhIvU9lJ3AcHPpGDB0tD6wdDPj7z6y8SQ+8EBC0HCFSTgMEfPgL9fFS5R2LGDBcpCFib1+9HknsiUuhLUQ1fPwowaKSYYWMIDQQcOx54t04CjIw2cthIQYJAigABXICbR0DmoyUv5pFwMYBlwAM4XHjCMUOENRI4WXLDIeThoBk1asgYMCDFIAIfXrwIMiOFixk7XsCQIQOnjK8izWTUKKJDBUQXL2rkdTsohIgcSYYUoeFC5wwhaQcEiDGImQ8qQ4jo8MpjxwwlRANQppIEsA0dRmzwEMLjsIsAA3Ty8JGktQ0aQXJY3rGDhwsRuAc1CTwkR5AgZ3ng0CqjhQ9+PHY3aeLDhogXZ38QaWEjcJPGQ1o3cYwBho2SQ3YnGZTDnvneGOyVr2fDxyAmkXr14sTJSf0dTAbFcyLC/osbIsSAwwtMwHBDDPnxsB8NvYzgSSsw2AeLKY9w0kkvkSzFxBL5CXLIh4QoEQgAOw==",
    "4Emperor": "R0lGODlhEwAgAPYAAAAAAACt7w0CAA8AABEQEBETFRYEABgEABkEABwAAB0FACAgICAiJyMGACUGACYGACkHACoHACwHAC0IAC8cHDAIADAuLjYkHTwKAD4lHEJKvUJr90knGk0GIk9NTVUfBFgqGGJjY2UKLmiAyGwpB3NubnwwCYS9/4k3CohYOImJiZA6C5BAGJU8DJmWlp0KDqBBDbjQ+Lt/P8ASGMLCwshIMNdgENiAKOJ8F+egH+qoIO20I/DAaPHGJ/D4+PTMT/Xo0PXw0PbYK/f39/ieBfi1JPj40ProL/3uV//Hl/7xav/ycv///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAE0ALAAAAAATACAAAAf/gEA0g4SFhoOCJCYoJCsgJiAkkiaNlYOLK4uDITQgNB4mLSYwJJctmTAuLh6fn6GjpTShmSiDHio0LiavLbEkKJktkSS9wKHEvigtyrzAK8y9g7+iICAoi5SRotGyKDAcIR4eFuTiFiscjJfAJBbj5O4ejwscviYcHOMM+wzuHAULClQYNAFEgQLkYOS4IQOEhwIMFkgcdLBAihQWZNzYOA6gR4r0ZDR0kUKVOIkfaQDMIBKcCxol3KE8OEhihh45SHgCUgJEhYAoazIoIFJFhxIuSqT4oYNExAIUD6ZQoUGSCBEpZLhAERCqyoBZRcCA8UISCBkEKkY192KG2xkvixx66LrWA4EXbeG++HCS5tdxd2HofXZyAYOaC8R9wItXwwhxHkI43qRBHIYRGla80BAAcogRIzaFs0BAg4YQJhybg3iYhmF4AR5bcDwCXsRBFOBZaOAAnoIGuikgAsKDBw0ggg4dTw5kI5ALqiyoKJELKXXmG5NwGITBBS4XnHAlN4RceaHx5g8BCQQAOw==",
    "5Herophant": "R0lGODlhEwAgAPYAAAAAAAgnLg0CAA8AABEQEBYEABcEABgEABkEABwAAB0FACAFACAgICMGACUGACYGACkHACgoKCoHACwHAC0IADAIADwKADwYGEE+PkknGk9NTVMGCFUZAlgqGGFhYWiAyHoIC33A0IhYOImJiZBAGJDJ150KDrDY4rjQ+Lt/P8ASGMhIMNiAKOLw9Obp6vDAaPTcbvXo0PXw0Ph9BfieBfmnC/irDfm9F/nCGvnJHfnWJfj40PrMIPvPBvrdKfrnLvrnL/roL//Hl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEQALAAAAAATACAAAAf/gC4ng4SFhoOCGh4ajI2OjYuDio4eIxonj5GYkIonGJuPko4lJ6SmoZgYGiMtLUNDJa2tlhifnh4eLkOur6+tQ7i2qie9LiPHvEObg8O7xhq1xK/Ly0MuHhgpLB2r04yiJy0j2TU127nK0OCeHSw2NTQkn+mXmyUiIxks+zMiIimJ6n1bFSFFihE0/rEYQe0bwwvaXqT4d5CaqhIcRIBgYXBFig4AG14CocLEh2MlUlSo+M1TPRMg8B0DEZNUNE/zMIAwoaIniX+Cbn4bgoFnz5L/6IEjanRFz6QiO8QEkYKnCRMdNHKrp0oqCx0srqpgOAIEN2EYNnQgYYPEUQ8hbTxw4HDzwlyqL2iSIHGhxIi5HS4MUjv33wYLFjZoCJEBBIcOGwYhtsBhw4bKkxlcmGxh0IsYMY6NAD06xovSpwelECJkxOljDY5VWnVM9QsRE16P8BD62IXXnk0fe0EctOnQoF+cEHSoOSEXgQAAOw==",
    "6Lovers": "R0lGODlhEwAgAPUAAAAAAAEAAACmfQRYJgh8Rw0CABEQEBYEABgEABkEABgZGh0FACAgICMGACUGACYGACkHACoHAC0IADAIADQxLDg4UDlLgESAzkdncGBgYGOb5GiAyG2PmXBIMHBgYHVMJId2YYmJiY9dLJBAGJKoxpiImKBBDbLO87d3ObjQ+MASGMCpjtW8oNiAKOKaQuW5fvDAaPD4+PJlIvTWtfXw0PedFPj40Pr2tfzQCP/yAP///wAAAAAAAAAAAAAAAAAAACH5BAUKADsALAAAAAATACAAAAb/wBhrSCwah8LZ7UYTxmjE5/I2GypvNmiJlhmubNMq62qrgmae1Ra8WhVXSh0RBV3d4Cw36zzOomY2Kx4zeG1DJW52bjM0MyFtiIYskW0rZzSGlolelR4eiCEsISAgFGp6baQsJCeVJyQzGSEeIF4gHXsnMbsxKSQgHByvQ8AYFBQkKbwkFsEYFRxDGM7TurskGNnaQxXazqwkHNPBHF0sBAQD4t7k46osAgIZ4+LtFffiQxnoA9r+0CdOsMAwhECwDKSghauQwYOwEhSGfADREAWwgBoseOqg4QRBFiIYinCBApsGDRtEtBhxgYWFISI4dGhBEoWICzhRuGjhqcKQiA4WUKCAgaICzgsgdApFweBnBxMmdjaTOQJFC6gUmrLowICCUBcfBoj90EJohwFaz1KAYcJmOgIiUHxwIYKB1gEEKLQ4FjadCApwUYgdMiDrArGFj1FAXFirlUVECBFaUYdIC0S1Bq3IAGdFgD2h8ghFNHkGhRIsMqD27KV1I8qZOLEQcqR2lCAAOw==",
    "7Chariot": "R0lGODlhEwAgAPYAAAAAAAGWuACt7wMfEgQEBAoKCg0CAAw6JRYEABZPNRgEABkEAB0FACAgICMGACUGACYGACkHACoHAC0IAC4wTzAIADAuLjgPADw/vEJr90hISEqUCE9NTVLvOVxcXGA5E2JjY2YRB3RLJHV1dYM+GoS9/4ddNYmJiYxiOZAQAJhvRJ0KDqOjo6VSJbuRY79hLsASGMGXaMacbddgEN13QN7/c+J8F+20I/OxafXw0PT09PX19fbFaffVafieBfi1JPngaftHR/vdafroL/voafv7+/3maf3taf3xaf71af///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEsALAAAAAATACAAAAf/gDosg4SFhoOCPD1AQDI9Nz0yjpKMPTyDPUJHMiwuOSM5LDGhN0dGPYM8QkQyOSo5ICwjnCBER0CXLIpAm4OtooI3RJapqrwyQEgxMT0xMkebLphCPUdISElIQD3ZSNAqHoM4OC7CRz0qMi4uQMMyKhyDNy0mKMkuMjcvLTdI6ioiBsXwwMFEDCLrNnAoR4QDwXAsPHgQkSIGkA0iWrTYoMKFCBEcNAzSoIGgihMBQKTggJKCBQ0WLIwMqYFCBlGSZAjAUFLiIIkgOMiIoQJDiQwnYrgg4QEERIkEa1I4MWgEhQscQDj9SdBCiw8UMATAQOFDi54QtRIUQWOd2xYgvSdCRGEi5IsVMGbAaJECxgsNI+oOUoFixAkPJ14EgUHiAgoWDVQIZkG40InFVAeFMhGQ8gjIHD7n1RxK1mMWIkB8znHixIoZLFhnVvFh0InP4T6PCEHoxObPLECcLi3okAiZLCyc0ME8hw4lSjScANEgeYMDg7BXJcQ6R6gcGgZor87iRLwR4WK2tuCAAfkcOFp5j/2dvqEXPFxQNcxCZHeRhcCQ3yCxsABAbL4dWEhOpc3noGaIHCJhIToEAgA7",
    "8Strength": "R0lGODlhEwAgAPYAAAAAAAA0cQRYJgh8Rw0CABEQEBYEABkAABgEABkEABwAAB0FACAgICMGACUGACYGACkHACgoKCoHACwHAC0IADAIADQuIDwKADwYGDw8PESAzkknGksoC0woC1UvDFgqGFg4CFw1DGM6DWOb5Gc+DWiAyG1CDnBIC3BIMHNHDnkAAHhQFHw+B4hYEImJiY5XEpKoxpVjGbLO87jQ+LydUsASGNCQINfFd9q9guW5fuXIjfF0IPD4+PPthvXw0Pe9TPf3qPf39/jAkPj40P/lr////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEYALAAAAAATACAAAAb/QB5sSCwah0KYTKY8FplOmcs39Llg1idTOsvIUEqXS7ocLrdV5JU3hiqXY9jqeiW6z2c6Hm/ew+pvZ1piLjR2ZW99MgM0KBlte4iCOjSVfH2KMDo4OIGRmTI4W5F3TDM8PDJspHZvqKpvM35NUmIwM28jI4lEYgwWjS4RuhoBILwwNDEuODEtMR0lIxoZL21D02KVICsiGRrgKC2AASUumysh6ivlAe7sQwMDFi0tICfqNjH7KycWAkMECLDgQZ0HD/xigBgggGFAAS48kBBhIsYKEx1CKJQ3IB5AF9BcnFAoQkAMEhzjMUQRI4OAFAozsCQhECCMhhk2CaDRbIMARBw6MjDseFOggwgQaZyIEIGBg38Cq2ziRBVoVaA6huiwUYmQGBzMCtFgptWGDUpeweKotLaTJqw6plq1GjdrEid4eQQBADs=",
    "9Hermit": "R0lGODlhEwAgAPUAAAAAAA0AAA0CABYEABgEABkEAB0FAB1RZCAgICMGACMMACUGACRccCYGACkHACoHAC0IACxnfTAIADZyiD98k1U0FG3P9nVMJIBXLomJiYxjOpmWlqV8UreLXcASGMLCwsmgaMubaszu+9m4SeW5fvXw0Pf3qPf39/mzFfvODvzbCv3rBf//AP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAC4ALAAAAAATACAAAAb/wNJnSCwah8KDcslsKofNzGezyWyc0ObnwJhit4wwI1PafKRc8QEqZjjT4TW4HVfS5W3uAaPBVOhdHwwRERkXBxUcGhcIB4SEgYMMJokYZxgXGhWPkREHAJkXHCAbGByHkENhVRemUh8dHBiOEYERiZoaHBsasX20EUMRGikgFYskEh18sxMTwR+EIBoIFxV+ixjNz8KejtUa4a2HztARzuiZFRUX7QflQ+jpmu0VCPLxFPr6DPTtEvsm5NtHYQIHCe0uAKRgQeCHCQwJHkwI0IIFCkMYWtQ4MaFGC0MsirTY0drHkCNFiOi4roJIlBZUqtwQIeGmDSJAfrBo5YOIPSkqicj8+UGfgaNIDVBZupSIkCMfnhIx88EDiRBkplQoUaGUVKoeQmAdgmFDCStkpLz6AEKqEbdOocpFEgQAOw==",
    "cup10": "R0lGODlhEwAgAPYAAAAAAAEBAQBAewBQmgBUTgBoJABzagCELgRKRQRYJg0CAAxyFxEqehSNCBYEABgEABkEAB0FAB06lx4fDyAgICMGACUGACYGACkHACoHAC0IADAIADWfQDg4UEVGNk2yV1VWRlsAWGBgYGRlVWXFb3AFbXBgYHVMJHYrC3kOEXp7a4mJiY0AAIyNfYzX8JiImJ0KDqTL3bEoKLd3ObsqAMBXEcPEtMTi8MsAAtBDANSvANiAKN3QAOKaQvF0IPDAaPPthve2Ave9TPh9Bf/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEYALAAAAAATACAAAAf/gDc2g4SFhoOCMS6LizEvMYqMjYOSky8rlYuUlY42mJmbki+DKpGSoT01qjM6LDs1MqaErzNCO64zMEFCNTs7MyuDO0KtQyclQUEhKj0nPTw7KYMlPTO1Mya5IMMwItUhgyZBOjUzLAvoC78nKrbgNia/IAct1vYNBzM7MAKDC/Q6eujQsSMHqx47dKg4sGAQq4A6rI2rUa3cQBWDEM6QEWSjjx00egSh+AuGsCA9dMmgkQxGjpTD9g2i4WOGD1s0Sg4RMoPGkJWDagjpIYPFihdIkZpIkcMWi0E4gJkC1YKFjEGPMjWS1MmG1kUkPjyS5VVrjBYtXrDgQMIFCUovoECYgPTCQAN0K2KUCot1xQoTHWb08HFiQYEEBQwfaDBohYgOHUDoEOIDBggQKkAkGDFhhEMBLUyI2DZDxQ52IACkBuHQBAMJgU/IPjFhggMHExRMGHTZmgcYLE54uEyc+KARHSQI6IDAAAEPI0xIn+7ZxogQ2FMQ2I5Ahffv3o+bGzHDAwICpdGqb4HRBogTlz0Mlz+ivv0RrAUd2k/oRiAAOw==",
    "cup2": "R0lGODlhEwAgAPYAAAAAAAEBAQRYJgh8Rw0CAAxyFxEqehCwyBSNCBYEABgEABkEAB0FABwYFh0dHR4fDyAgICMGACUGACYGACkHAChYmCoHACpPxC0IAC0TCTAIADWfQDgPADgjDjhYcDw/vEJr90VGNkk6L04uDlVWRmA5E2RlVWXFb2YRB3BIMHCguHNKMXVMJHYrC3kOEXp7a4mJiYyNfYzX8I5DGpAQAJDg4JRAE50KDqJSJ6TL3at7TKxaLbFeMbGbRLJ6I7WZObd3ObjQ+L1oJb6QN8BXEcNrPMKJKcPEtMWWNsTi8MZuPsy3Ys91RNF/M9CnRdKNZNizTtzq79+OPN6rQeTFW/PthvSaN/XUaPeUHfe2Ave9TPmtgfnXK/tHR/q4JvroL/zZL/8AAP/GlP/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAGUALAAAAAATACAAAAf/gFFHg4SFhoOCOUk5MosqKjmDSYsyOZFHSTJBMjIqUTCeMIyclZKVOUEqRyaqMJyWQUmEMD0xnZ8wnzkqtZCDPU5IQzAsOikjOiwhMUhITjGDQ01NTiwsPkNOPjMjSExNRk6DPEU4RSklOk9PPiwjPjtCQj6DQjwvPDMlLE46P+j5bPDgMWjGixwwcJRIl2zEjBm7VswY9IKUigoOfZTwAInUAUmTOD0yMQKUopCyBsWIAYnjrhweGFnydeSHjhcmOEJ6pELGESU6YLwYJKDAzQqVLvbkBGPgjkE/WOgT2aljJxwscBScsaOiyJikctgoMvGIgR04lu56ZHGIFB2Dwi5c+HABUo4NJHLU2CViBQwPgypcAKHjoYkNJmKYwPEDihMTFQZx/MACipESJnaZKAFhx4wKBgJbmoG1QwEBHl6EgICuwtAjFz8Y8OGjwGnbAiAYaXFzkIrBF14IF75huIEPsgflGAzC9fDnx0ErZ17hgfXrDxpAWL1iOogLHkiIHy/+RQ8WPXwvr2CivXv3L2yyCKwCRorn+ElYIzHIhggUOyS20oCK6YCVCYOEYAIJIZDwnnskGCMCf4IcYiEhUQQCADs=",
    "cup3": "R0lGODlhEwAgAPUAAAAAAAQ/MgRYJghPGQ0CAAxyFxSNCBYEABgEABkEABhqFhl6MB0FACAgICMGACUGACYGACkHACoHAC0IADAIAEwoC1mFJ2A5E2lCG2iAyHNHDnRMJHYrC307D4dUK4mJiYzX8JBAGJMKD5xzEqM9CrNzQLlIEbjQ+L2JWMASGMBXEcacbdZXGtiAKNzq7+BcHeKaQuUkK+ZfH/DAaPD4+PJlIvKpHfLHHfe2Avh9BfrhfP/yAP///wAAAAAAAAAAACH5BAUKAD0ALAAAAAATACAAAAb/QNdpSCwah8KTK/nJgD6gzIeYVAqjrs8nO4Qiv8NMdqttgoxJbJObBZ2pp3M0Q6+/lV+3fs8v8v97cIB/eH5xhG5Gg31+i4BDjo+HkYGTlImWgTAqJU9Qb4MrODclFSEhAhmQGQEBICstKB8wMBkLJR4kAWEXuQIwNzAjMzcjGzC4G2EYJbIfKCivybQ2UycZzCsBGCMeelLEOCNhAVMfGhgVDSssKig6NyghQwq7LgEe+Q0osB7wM7tOLLC3wUM6big6lDkRkAQJVR44iBCxgYSHEiEweBiBYQgJFR0ChBDBggUGdyRGlCihcgg0XCNjxODAD8XKly5tciRRksOKMxU2LwIdslKFiREqRloEqkIFC5ZDPBjF5UFBvl4Kmsow4YGowxFgu3ErYXUl2EJH0iIJAgA7",
    "cup4": "R0lGODlhEwAgAPUAAAAAAABzagCmfQJcVgQ/MgRKRQRMLARYJgdCJwh8RwoCAA0CAAxyFxADABSNCBYEABgEABkEAB0FACAgICMGACUGACYGACkHACgXBioHAC0IADAIADUfCT4kC0UfCUSAzkwoC04uDlU2F2EmCGOb5HAMEHNHDnVMJHYrC4mJiYzX8I5DGpBAGJGanZMKD5xzErFeMbzCxMASGMBXEc91RNiAKObp6vDAaPe2Avf39/h9Bf/yAP///wAAAAAAAAAAACH5BAUKAD0ALAAAAAATACAAAAb/QFtsSCwah8JYK5ZIBJwJTmfQTAgSSJsw1bK1Wimu4VAdqs7a4SDGbYFCVGzsjI55l7HTyDQaBMx0Z19JKXwmIimAgXQ5MR0hIoeJc4uMMR4ieyJ4lZaYkSlJnXQtHiAgJikqip0BIYebq5SjJB6aZ1m0mCMiuEWrNDQtZySQfKpDS8M6NzUvxB6QIQGySSssNDB0JCAjb9TJQykrLzXbHiaQA3g2dDE1MMMqJCPe9SasiyQBIiIg5CPybetnAoaHEzSIkAj0YWGKAwwQFBiQ6E8MEhhVfAizwsUBETAmBihQYMiHhh8GuBjBAKKIcgQKnJihJkAABi0ZOHCAEwaMZDEMRAw58CKYiQMQd544gRPngaE1cMCbMWPFgRo0ZjBtOsSAiBrwpM4QQUPqiZ06h4qQyqDs2asvmuIcegIrSBxMX0iF6HQIzhNIo7Jw8OLFCrlPY7REegAwY51Nkdo5QrmIjSAAOw==",
    "cup5": "R0lGODlhEwAgAPUAAAAAAAGWuACt7wQ/MguEoA0CABERERYEABgEABkEAB0FAB4fDyAgICMGACUGACUlJSYGACkHACoHAC0IADAIADcjFzg4UEGAWkNOO0cxH0hZO1AbBFI7JFxdTVxyS2BgYGmPnHBIMHJzY3YrC3ejsnkAAHp7a4Q6CYmJiZiImKAeHqtUAKp9ALCnAMBXEeW5fve2Avh9Bfj40P/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADUALAAAAAATACAAAAb/QNlrSCwah0IQabkEKZ3M5jDaTClFVNKUiiKJZFjqlpp6pbLaF9q7Hq+z7nc0Ll8OlXUmiC7fv/B5dn9oIB8dFoB+gFEWJoYWendoDyIfhniKek8iLyIWH5F/TqNLjRkMDKOKqk4fBQsGsR+jdyAmHSImhbEGBQYPtJ0fJpUfFxYMvAwFIpVDHxjNIh0aD6jJDAAYHR9DGN8a4dXXBssfBARDGh7h7BoD1tcF6BrqGtsr3MgM8QUuLiGGoCNwgoUJdNdQFXjR4oRAEAYLsgiBysCCDBtirMDgzQWMGCBZcEhmYMW/FSw4vgjh4oXHFiEyTCgAYAUMGCpUdBjS4cSKMhMaWbjgMHPCPw9Ih5w4wbLFRxYVKmAIcTNE0hcdRpxwIXQpOw8iXKywulPIkbNEZAQBADs=",
    "cup6": "R0lGODlhEwAgAPYAAAAAAABzagJcVgQ/MgRKRQRYJg0CAAxyFxEQEBCwyBSNCBYEABgEABkEAB0FACAgICMGACUGACYGACkHAChYmCoHACspKS0IADAIAD08PDw/vD9AQEA/P0NYO0NyO0VFRUhJSUlpkkhyO0iNO0trlE9NTVRVVVVWVlZXV1yNS15/o1+ApGJjY2YRB2fXXGiAyGpqam0PD2yOr29zc3YrC4CEhIGlwImJiYwMDI0UFIzX8JBAGJDg4KTL3bEoKLC2trjQ+MBXEdiAKOPj4/DAaPD4+Pe2Avh9BftHR//yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEsALAAAAAATACAAAAf/gEM/g4SFhoOCPT02PTqMNpCMOpM6PYOKMis2Pyo9M4IylJODJDIsHwI/NTozPzc2ojqDKCgzLCwwPzYyoLGDICUoGSUmnToyMo2igyUsMx8lH7Cxyz8gtxkfIdSUMrk/LCinJSqS1DYfg7csIJqQMpGRMiXqtyE2LMiL8ZAq9TMyxKGAF6kHwU3gUjBbR0IFPHjuBu0Q8oMIChAgZljYgBGGjRAY1QkxEoSYiRkZToj7aAKFCXU7jJS45uwDCBMlZpTYSQ/cyCACgp6ClnFnyB8wgtBosSKBjAQcXKKAwWGDiZc/XJ5a4a3GBxMdStDAQSJAOqStbqCYuOPHDAIWuHIIsUHCwiAYLG7U2KFUiKAWFoLs2AGjxd1cM1TA2HEjhRAaHSb6aEHjrjMKi1wJ6SDCQwYcOErYzToggwYgLwQIDiJiRIGgAh4MKuBBBAUSK1QPFiHidckBg1rzznHjhgjOP3oHgCGAwCAPI34M2TFkegcXQ2oAV+r8R0whRIIYucGXiIsgQYYQ2SEi+Ej270XEfx/9h4eY7MXTECGetxAhnT03kg/yGQGfgSIYYaAH0h3iYCFDBAIAOw==",
    "cup7": "R0lGODlhEwAgAPYAAAAAAABKgABzagCmUACt7wgoGQ0CAAxRTBA9KBYEABgEABkEAB0FAB1FaB9XPSAgICMGACUGACUlJSRoSCYGACZbiSdqSykHACoHAC0IAC15VjAIADaCwziGyUJr90SAzklnjkpPUEuRzk2I1EySzk9NTVELDVGVz1V9lV1jZV2EuF56n1+d02JjY2Ob5HNbBXYrC3p+gImJiYxiOY264IzX8I9pB5aYmZ0KDqenp6p3B6ysrLjQ+L/Y7cBXEcYTGcacbdPj+NSJDOqzde0cJPD4+Pe2Avh9Bf/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEoALAAAAAATACAAAAf/gEU7g4SFhoOCNDWLjI2ONIOKNTQ3kCo5Nyw5MpKQO5IqPShBLT2YQZyLnjQqKiA7Nz0rOzGhLYyeIDQsHSiwMjuYsJ2DLCcgFScqMTEtMYqQOZ+DyhytIM4hzCgoMikxwDsoMTcxIDKhPTQgBy0zMy0hhENGPrUyPT0qKyEzRkYzDgySIcNIiRYfhAwZggMEiBA+hJSQt6OFECM6bmg8InFFixb/ZlAMoWMGDHAxhEh01sKHSYofW6RI4c6IkBcfaYbQNigETZnf4OX8RjBGz6E+47WQAY6pzEHfaN7Y6ROBDAczfGilyEwECHIzcsQI0cIBjBk4gLyAumLEihQ3qoDcSOHAAYJ+OHQAGTQDXUsZN3b4eFEChg8dOnzs3fHiost/OnYAAVLyn8ue/ibOENIixwwdEyNO7CnEhgQJF3XEADJEB0iAKaC2MAAAgAmhzZrZazYwhoTaEpiRY8pMxqZIuwAYOAiMBo0c0HdMilSDRW0DCSQ4b9VoFY0Hta9zM9CgO/ID4ZUDSKDL/KcaKsI/QCFghaPp72kY2G/gwH1VOwhyyICEFBEIADs=",
    "cup8": "R0lGODlhEwAgAPUAAAAAAAGWuAuEoA0CAA0OEhEQEBYEABgEABkEAB0FACAgICMGACUGACYGACYmKykHACoHAC0IAC5EJDAIADxcMEhyO04uDlEFCGmPnHYrC4mJiZBAGJMKD7JsCbu2SsASGMBXEcIyFtOMD9iAKNxOHd/cleUkK/JlIve2Avh9BfmvFf/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAC0ALAAAAAATACAAAAb/QFZpSCwah0KMsoJhVpxOJWao1JQqJatGq1VSMVYs5Yp9Xr0lKZe1ZWvYaHXHk4U271+MCEXUSKUOWGlKKnxDIn9PCg5DFEoihR4oHYkKCgWNTxqQKiJ+UhWWCkMFBQ5Vn5UOjCWrDo5/fwWLrA6isbKmoyWiCrhSlg6YvAUEvr8WFxcOBEMKEgQEGBJMSq8kJh8XEY0UFNAKFAICFAoZJiQk20MS7d7jAgHjGx8hHxsb7BLe/BXxAhwCZviQgR0/Cv7iBajAoZ42C0MUBpg4MR6FhiRCXJAQEYwGAR7HfUhH4oOFMSUEjBAhYsPKlhIyvOywgWNKDZ3AoBBRYVWGak4ZvmViOZGlAAmrWFpo12gDChQVNOzUMBEnigwWWI0A0QHEBq5eQYgYsaEr1yFPQYzY6XLF2Kcd4A7pIMKCBRUbEKoIOqKDgE1TSuwpu5NCXJpPLQwe0jdDB5oWuOLzaqFxCSFHMhNhEQQAOw==",
    "cup9": "R0lGODlhEwAgAPUAAAAAAA0CAA8RVRFNERYEABgEABkEAB0FACAgICB8QyMGACUGACYGACkHACoHAC0IAC4wkjAIADU6RjyYZUVGNkwoC1ZaZVi0h2RlVWYRB2c+DXYrC4CEjILhs4mJiYzX8JAQAJBAGJMKD8ASGMBXEdSrYNiAKNzq7+UkK+W5fvDAaPXo0Pe2Avh9Bfj40PtHR//Hl//yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADMALAAAAAATACAAAAb/wFNnSCwah8KT8vQRdj7D5tK5/EBPnqyHY5UimdbOycLJXrpKZPfjwXY4Jy5a3TVVNhxTKOSxpp9hKSUsJB0pLCWFXVEfgiQkJn0dLC0mJCFhYo0shJSPJpwsfU4rhJeWoJchJpYhRIeEJhsQEC0YEBYtnHxDEBwsGhYWECQxJLQhkLRDkLK0EHuztJUkFkOgJSHPAtzPLSp6QxaWtNzm3RYs2uKI5efdvyYQQ6vVAhUjKCMjINyQIdY6mIPAbcOeEBv6dRMwRADBhxo8JEIgohvBXtsEUCiRAoOADA6fYSyXYAAGDxgSWFzW4RmEARNKDEgAA8OAkCzLQUCQYMKEawQUBlDAOa/lQwkJkk64AFSCy4YEBVhIcKHqhQkULIRk2IGCBApZl1b1mdXr1yFgwSL1OXaABAwYwKKF67Wnz58J3tKdGzdoz6QDMlSAG5dv3A0UEICtAAIEYQpowR6uQOFx5bRijmguciIIADs=",
    "cupAce": "R0lGODlhEwAgAPYAAAAAAAByNgCt7wICAgM8HAM+VQJoMgVcLgYHCAeStw0CAA4REg8YGhAZHBEaHRUWFhUWFxQbHhYEABYXFhZgfRgEABkEAB0FABwOAh0YFiERASMGACUGACYGACkHACoHACobDi0IADAIADaYvjahykcaBlXQ/1ggCFshCHYrC3u904hYOImJiYzX8JGanZve+Jvj/qDf866urrCBXrDl9bzCxMBXEc7S1Nunfd47FeLZxebp6uzs7PKXBfK/k/TlnfX19faZBfeaBfh9BfmbBfvPBv3y2//Hl/7uo////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEoALAAAAAATACAAAAf/gDs1g4SFhoOCKi0tMTGLj5CLKoM0O5U7PC2Kmiqdj4M3N0A1MjUjCZ2nJCSbgy4uNa8JCSwJMqsyMgk3Ma4uMrK/NTixvwk1gjWhgjIUODIqLqw4KCSwlDw0oRQ9MxQzMys9Jyo3hI8jNSw94zbuQ+Qy5jWPnRQ5RScrKTZDKNHXOC0awWKFDSE9VqxgoYJFKXoqErQYcUqhjYUsGAqjtyiGCootXBxZoYICBWvzJFGoNULFDB8zCJ5UNmiRsxksvhXZaQOYtXMuceAIJ2OoURYkWAT0GG6ojBUzhIJL+rAFK5cKwSmEOiNpwI+aUKA4kXErSWI1H8WY1WlWggL/iWacs0pi4oh6rKQ5LIXObgtUKljdejUoQEtFIDsFJjGCRKhBJk26dXvSJAmTg1ZpViFAQIIVJDoHTkAi80oBoU2YuNxZNerSNTSTSHDAwOzJrikMeu14B7BQK2KRMNF5UIIAFEYwq0HBBYsbSF9nDg0MGCEXN3QlPRa7s2bSs253Ro3skPlCOwIBADs=",
    "cupKing": "R0lGODlhEwAgAPUAAAAAAAA0cQGWuACt7weStw0CABYEABgEABkEAB0FACMGACUGACYGACkHACoHACspKS0IADAIADg/cDhYcEuEyFF4kGIEYGJjY3F2gXCIuHCguHYrC4CEhIXW9YhYOImJiYzX8JBAGJInj7jQ+MBXEcDY8MZlK9dgENiAKOJ8F/GFRfDAaPXo0Pe2Avh9BfieBfi1JPj40P/Hl//yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADUALAAAAAATACAAAAb/QFZpSCwah0KQcslsKofOKBMqlVKrzit2WmpqvmBN84rBXMroM2ZJLXM4HvMlzik/u6DLhXMxoVKAHnwXd0oaFXoWJCgkIXoVYiBaGheKKysWF5BseIZ7GismIBghKJGTIigoJh8ZFw8hnEwWIi+hGxaIJLJKFbkeKB4VFRIfHqedFRgWKx4fYhoeD8hKHcoWHhEhGRmUD7IDHQQYIiIYkBkTeoZDFAMD17nDFeoXGu/t7+OZ3RUZ9BfeDRjyjgIiCxMmPEj4oKFAggPGyRn2KgCiCvhK6KtTZqGeCRLMEKAAMSIkCgknYNRAAONAjQILxpz5MuJId4cojCQwQCfPOiEEWGgocUbDhKHPKgzhQLJEUBYflLKwR6PElyEfCAC1WkLqsxJQKwjJ2o6AWZ87zdocCfaI2yIsggAAOw==",
    "cupKnight": "R0lGODlhEwAgAPUAAAAAAAGWuACt7wRMLARYJgh8Rw0CABSNCBYEABgEABkEAB0FAB4hJCMGACUGACVwpSYGACkHACoHAC0IADAIAEJr90RMVESAzlO49mC39WOb5GzH9Gzg9Gz013YrC4OLkYS9/4mJiYzX8JdtVbC4vcBXEeW5funp6e3v8Pe2Avf39/h9Bf/yAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAC4ALAAAAAATACAAAAb/wBNpSCwah8KNaMlsOjdDp1QaFQU+galz+HkMs1pmlBQIPMJiMukR+qCXw8GHK6pOucSAqVQaaaMaAYEkIyUhVh8WGmlmIRYAIYRsH21gdSQAAV8BI52JDxkXaRYWWBYjbXMkF3ZEWAGlDxUgIh8XGmQiUCQdHRewcycgIBeKIG64JCIZD5MnKCgaFdMkHxnJpBodD88oXxkbDxoarFxl1ULVTOQX5SevSChCotfseGSlzyQWt+O/XmuuTCJxQkgzCw8KEBjw5ReHKx8iEgyhcAABApvKXDkRohGWhBeHXCzwQBMJAgojPrhVTCTKAgxPDoiEUJCGAiIVLiQRggADQ1IEAggog/Pkwp+JBgxgoJRAs2ZDvBV5R3CIBYIco75TkfVquoknrhJUJeRdwUiRPoQdwpSB27dulS6dW/WIXSInggAAOw==",
    "cupPage": "R0lGODlhEwAgAPUAAAAAAAEBAQB2owCt7wWMkQeStwpEWg0CAA8PDxEqehJNqBYEABgEABkEAB0FAB06lx4fDyAAACMGACUGACYGACkHACgoKCmlqioHAC0IADAIADa+wzg4UEVGNk8aAFVWRlbH8mRlVXNKMXYrC3onAHp7a4ctAImJiYyNfYzX8I5DGqFuJqM/CaVSJat7TLEoKLGbRMAuLsBXEcPEtMy3Ytra2tzq7+Y+Pve2Avh9Bf/GlP/yAP///wAAAAAAAAAAACH5BAUKAD0ALAAAAAATACAAAAb/QNtsSCwah8JNaslsOjdDp1QanVpT1St1pp1mu8zv8kJgKpviFGG9WZfDXGahbXATDGdsHDQQzO8hHSMGF3BLBCcJJWoeJCMiF4VLVTM0NC5tBCODkYZLJyohJyUXCRwEJXlZJyIlLiwPZAQxi5MzNUs4OKQjDw8CCSwsSzVDuFgnSgQJzCImJsTGUsAGBiMeSjbFtzZM2gm+DwlvKdveNjaJ4uIiKSDaQwPyAyk2BSPPKiYh81AzGwADXhAhAoIIGAQC+uvAsOEHGCIsrIDYsMMQCxgxQvCgImIHESo0ZBzyoWRJES46nnQhwuSQECVixnTxAWaIDytkhhhS4uaHP5glbdYsGfPlrRmi0IkiKQQmzxM1apS4VSOEkKrpis4oAfXEhxknkFINUUxryQ4hApn8wJBth5IzhByZS8RGEAA7",
    "cupQueen": "R0lGODlhEwAgAPUAAAAAAAGWuAh3kA0CABBYuBYEABgEABkEAB0FAB40CCMGACMeESUGACUgEyYGACkHACoHAC0IAC9YBDAIADMtHThYcEQ9Kkc/K0ig8ExQWlMvIVV9lWRlVW9HN257QXBIMHF2gXCguHYrC3kAAIJlSYheTYh7TYmJiYzX8JMKD5O416KDZbciIrjQ+MBXEddgENg0NOUkK+W5fvD4+Pe2Avf3qPh9BfieBfi1JPj40PtHR/roL//yAP///wAAAAAAACH5BAUKAD4ALAAAAAATACAAAAb/wJlqSCwah0IVaslsOonOaHQorS6pVik2GuJwMpwQc9vcZCiXC3qDgj4vFvX5wqlItsTQ57IyaTRpFwlUKhwSCQkXLjQ7OC8sFBYWFFQgHR2AGSU4NDcvIhQZaYSXHXR8LicEGRZgGYQfJZcXICsyMhsCaBwXhC8uvyUsL7cgFQ2nhJ40Mo83LiUVGaK8hCs2NjQuNicqLSHSyUoqmC4yKx3dMycUC3SUKiGWGjcrKxcb+aHIakMCARsodKAQQsUGadNcwQvwT02Ib97A0eG1EOCZiDNmhJgIB54AECTOPAwx41urjh45kKBA4cSGPBYosvQnQKWIFBxYgFBR4RRLZI8BAoAk0YGFCBC8KFroMCQoQw4mPJAgYYIoHAsaSNAUIECaBkwdiFItRaTFDA4tQOTgoPFEjm5vieRQMSPDDBBp151o0a1HCyInHr5qkfbv3niEu6n4x7WxY5VVp9I9QrnIjCAAOw==",
    "pen10": "R0lGODlhEwAgAPUAAAAAAARYJg0CABA9KBYEABgEABkEAB0FAB9XPSAgICMGACUGACQ+sCYGACkHACoHAC0IADAIADQzMz89PVBQUGpqanV1dYcIC4mJiZWVlaxnBMLCws7IyNSqAtevAuHh4enMAevr6/bkAP/yAP/7sf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACYALAAAAAATACAAAAb/wNBmSCwah0KKcqnsaJjLIaVCrW4ylkuVShlOvl8KJrOpZDDb7oYyUWKuQ8vmg45u2prMh4PpUucbGk9SHiAgVxkZHIlkHIYaQxWGHnoflpcfhiCQax1OFhUMDIuiDBlOF14Vi2WiHxmiZFcJUhYhb7AMr6JXr7RrqxZkrrCRi78UhR5yvYlXGoYVcZNzmJeanBSekBxEshweqFLSVIqOHpZrVxK1IaBT2BQIAa/sa7agbyDhVxYIrxNqbeKwyIKTN4tAdAhYRlORD0QcPZqm0BzBixI9ZBNUaYMFPor2OFGzRI8iECIODflQYcAAL18qQJS0TwOGD/4QIJDSRgydRW0f7+h8uYbJnDdyPsgbgIAomC870+Fs6pIoVaofDWFgqrPpkKpdKWC76nUDV6piFV4AW7aqWwoaLkhw63KDkCN4iYQIAgA7",
    "pen2": "R0lGODlhEwAgAPUAAAAAAAEBAQBzMQBzagCt7wNXUAJbNAeStwmeWg0CABYEABgEABkEAB0FAB4fDyAgICMGACUGACYGACkHACoHAC0IADAIAENdz0QhAEVGNkwoC1VWRlZTS1bH8l9562A5E2RlVWc+DWllX3NHDnp7a4mJiYyNfZMKD5dtVaxnBL4xEMASGMPEtNSqAtevAtfX1947FeUkK+W5funMAfLHHfbkAPf3qPf39/rhfP/yAP/7sf///wAAAAAAAAAAAAAAACH5BAUKADwALAAAAAATACAAAAb/wBdrSCwah8KLcjk4XAbL6PDiqV4Or1IpS/Usp0rrS4QdVK2X6dmD1d5KVCkrbHVeu14leM1H6+d4fWdfc4MigXxphV4nMCcXIol/YQcnKjAqKpFrk10iliooI4GdFyQkKSopLIeJYCQyMyYgKS8meIRKLTMzLiAmXAclB3mvLi0pNCYsJbAzIHZqByYfKSgzMi0uvC5Qiksjli00OC3aLSjeYBclKyfJNCkjJCwYGZ0irCIuNDIuBwNQZFDH4gCBAyQuoKBBjsahAxAJKDp4EKIKZCtglCDAkeMQLSBNnFhhIQSMESC1DHHAsuWHk7Q+tGQ5JIPNmyZPGDDw4KbNRCEgggblwOHECZtEhYIYcuqUCBA7DWQQQVVEU6ZNqXLIwKEq1assSJgYS7asWXphm6pdq7bmhrdw48rNwELIkbtEXgQBADs=",
    "pen3": "R0lGODlhEwAgAPQAAAAAAAEBAQ0CABYEABgEABkEAB0FAB4fDyAgICMGACUGACYGACkHACoHAC0IADAIAENdz0VGNkpLO1VWRl9563BxYYmJibm5sseTZuW5fvf39////wAAAAAAAAAAAAAAACH5BAUKABwALAAAAAATACAAAAX/oHaNZGmOoqCqQ+sOqzpOVW1p1qVVc11Ns4lQchFeJDmJ0HgRBJ633G4keQYEI2cgIqwhKhLEJPLEXp6HiRICoVQg6snhOXqKlZZ3TcJF0M8BdzRtEDxifgF1AQNxExYQFjlcA38BBxGYQm1umJhzPRZ8EWI/nVxjIxY0PxISFZ01cTxHkT6OY7WxRBcRj2yFEa+/bBUIPW+Famk1bEMzhcSQaZDROUeDkBZceGySVK7drWDYR7tCpxFKpehMYkvnFu7vxkVj24XMSplAR6c0XQDP7fq1pEIOVprYjGBDoWEXMFwa/lq4yaHBHwyV8GPYkIKaUmv40OPo0NUEBOnYJCA4QFEiBFd5xGw6ubCjShphNkEoMYzNvgi/eAARcaIoCQ0hAAA7",
    "pen4": "R0lGODlhEwAgAPUAAAAAAAEBAQBKgA0CABEQEBYEABgEABkEABl6MB0FAB4fDyAgICMGACUGACYGACkHACoHAC0IADAIAENdz0QOYkVGNkwoC09NTV9562JjY3NHDnYrC3kAAIhYOImJiZBAGJMKD5Inj50KDsBXEcPEtNiAKNmLDPDAaPTcbvXo0Ph9BfieBfj40PvPBv/Hl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADAALAAAAAATACAAAAb/wBRpSCwah8KJUikQTJzOpXI4wVgnwwwJK7hOt0qrh3QhCcxWzLd6zY5J3jUbI+iYWqNRHLtNT0orJiaAI2xraR6CiiYrIV5UaSMrgYKEfpBWIyqKJSUnektUhictJiOAK3N8S1YhJh8dIh+OanJpGBkjphm3aphXAh8kHh1VUqJVAhQUHcMdUaF9T8sWuiMWy8dgAhkeJYwrmyTPExmrGhcaGx/WJSMfFsUXZ2YZF7mTgeErIxncZWQuzJMk6JSnEQIvVBjioSExSp0YfXD4ZoHFBRbumAJUwsLFBUMUiIzHQdKkERwkWBCpIKSCDp8obFg3k8KHEx9EhrQzYtkGT1MjNmCTlHOIBHCCVnybpIifhCEZTXw6RZCfJkEWjDaNSMmEioNPSbxcgUcXvxZWJ21oKVbBB6TXzAbKyZZltaASFEjYkGelTiFHAhNJEQQAOw==",
    "pen5": "R0lGODlhEwAgAPUAAAAAAAEBAQCt7waj4Qif3A0CABYEABgEABkEABmFtRiGuR0FAB8TBx4fDyAgICF3oiMGACJ1oCUGACYGACkHACgpGSoHAC0IAC4vHzAIADc4KDlQbTs8LD8aBURFNUVGNkwxQVU0FFVWRnBxYXPS9nVMJHwcCYUeCYmJiZBAGJmWlqV8UrI+C7Lm+reLXb3p+8LCwsubatiAKNiWBtp7C/DAaPf39/+WAP+0AP/XQ//oZP/yAP/2Q//3ZP///wAAACH5BAUKAD8ALAAAAAATACAAAAb/QBtsSCwah8KCclkwNJmR6FA0qlpVHxi1SiIlpqJwGKWFbcQqlWhY0WgqqJQrBouhXCf4CDPkaFYoMTMzMiEygzErKxgVfSIoPDszNS4KLjUzkSgbjTAYKTE8OSwpViksOTwxLnwwHzE1OzUyMigKI7SxNTFZMCUrOTMswyMzI8MsMzkrI0MbxcaCh4cuEYNVziLCCSvCO8kr3DIpJUMhJyy2x8ksKxG3LCchQ4q1KCi0ObT3+Ir0LoRwyGBRg0eNZLNmrCgHo8MKTClo6eChg1aKSQvpPZxB4JKMHTJqrCCAccWQEiZKVTklTGWJFCYYvpxhC9+0WrdmkNPIotiKqWSS2hlrZ9JXiV8uVqRYkXSpoqMMm7UQUqNEiKNzFKwKM8QDFS0fjo5QMYLDh7MfPLDBwIGAhg4hRszxUKHthwadNHDwoOCDhl9DRtQd8YHtEL8cVHgo4eKoihIePtT1QAbGiz0aDIRIceDqLw0Y3BB5AUMFhg8cJnhOoUKICBVEbLyQTVrzyxEtZtMe8qL3ixYoNIcIgcJ3byGWbSgnbUS5cyHIj0hHEgQAOw==",
    "pen6": "R0lGODlhEwAgAPUAAAAAAAM8HARYJgh8Rw0CABEQEBEqehYEABgEABkEABsUZB0FAB06lyAgICMGACUGACYGACkHACoHACoglCpPxC0IADAIADBlqTgPAD40qUNdz0VGNkSAzkgrDkwoC19562El3GOb5GRlVWc+DXNHDnNKMXVMJImJiY5DGpdtVat7TLGbRMBXEcy3Ys91RNmDCtmYCeW5fve2Ave9TPbkAPf3qPf39/h9BfjAkP/GlP/yAP/7sf///wAAAAAAAAAAACH5BAUKAD0ALAAAAAATACAAAAb/QFtsSCwah0KKUqPJUC6UDIPCZFKGmo+W0mKERMOL1jqkZq8nm+h0yo6vMbeWEztdhOIqnMnmfJ4nKBlZbE5lLjgzMBcnMTMyKhoqiTApQxkyMo8qKjOPMCcwMjQyLpeZmyqaMqCipKZxLpkvHByikJKZlWUafWNsbsAaZSctMCpayXMwMC4ZlzCfJ8pa0ZkspzOkyFoMg66l0Jk30x8ZEwYGJ+PYcScvL9wfGyQbBgooL868vloGKSPsMSATg8KkGbTGoFDhwUCyYTEwreLGiI0BMxAlbvuT4UIIDffEwMkgS8aLEwoyGHAyYQOKCUwubfAwog2KDg0yZEABAwUKlRbPIm4YkcKABgYMLkwQUUJBSillwMQQo+VChhQsUOBzgWKIAg8mRCig8sHbiawTULhoFIPmiIBsGARI5zTdBzoxRpB4W8yEgAEpVpQoALbWEA8kTJDA0CBAAAFENwQoYeICgyEd3pLw0ECEiA0mUmzYsEK01A4daHrY4DlwCdYpSnjGjBpDB8+eR+PGHUPIkd9EbAQBADs=",
    "pen7": "R0lGODlhEwAgAPUAAAAAAAByNgJSCAqERA0CAA8PDxYEABgEABkEAB0FACAgICMGACUGACYGACkHACoHAC0IAC0WBDAIAENdz0SAzkwoC19562Ob5GiAyHFLJ3NHDnlOMYhYOImJiZBAGJZtRZ1kG7U8ILe3t7jQ+Lt/P7+HUsBXEczMzNmDCt47FeHh4fDAaPD4+PXo0Pe2AvbkAPh9Bfj40PrNAf/Hl//yAP/7sf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADcALAAAAAATACAAAAb/QNVpSCwah8KJcslsKocTi1TUwVBVHdGps4QqLVSrYts5RZ9mqWWixXSwImzXHJV+nfO6es9H6/mAfgEYFhSAfUMBAQKLf3tziyUrGwGOj0MCJDIyKAOVZxsZnxOJIC4uJopRGBkaGxwZaIwgqaoWHRwauhoKpCeMi4qfHRkcHxsfvZiKAhkrKB2MHCUzJRuywisyLiiLG5Ik176MniSnJAEdJSErJiVcmBkZjCQgihUfJSIiI5VDGytWcAjgiVkxfhjQlNiEApiAYxk6SOxQaIgpGCGAUXMBAkSKFCEoUEj0wZ4iZ9tCbKAVosPIE8wcmiIR8cOHKhgwCQC2gQQsWUVZAozAhclmAGfPNng6IYJgAA5DSKxw4XOTi4E2AZZQNGQhpwAkUNh7GEAb1QD/UKAYGPPDURTcQAhIdFRYAGQk3IK1B/XXzlcbkH3Iu9OYzRNCjigmoiIIADs=",
    "pen8": "R0lGODlhEwAgAPYAAAAAAARYJgZpNgh8Rw0CABYEABgEABkEAB0FAB8TByAgICMGACUGACYGACkHACoHAC0IAC0WBDAIADBlqUNdz0QhAESAzksnAkwoC09NTVArBFU0FFY8I1gxBl9562JjY2Ob5GU7CWiAyHNHDnVMJHYrC3lUDYhYOImJiYwpE4xiOZZtRZdtVZ0KDp1kG7NtNrU8ILe3t7jQ+Lt/P7+HUsBXEdTU1NmDCt47FeW5fvDAaPD4+Pe2AvbkAPf3qPf39/h9BfmhA/j40PrNAf/Hl//yAP/7sf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEgALAAAAAATACAAAAf/gDsxg4SFhoOCExQTioyOjhwlIRiDFBQxHyAoMTYfNjEonzMzHZWXKDIomxOgE51DQSaVHiKDrJ02NqExMzUkph6WwY2NGC4mlDEUHszNzMuWMzcuEbPO1x4oOkM3JcDYzSg8PDcn3+DBL9Mc5+AUJC4nIabL6CI5OjfzyvXoKEPcUlhDR+tGkBf7LNVT2I/CCBchKgyk8KFCBUUKaeRwsQEYxQ4mTFSo9w+WOWXBKGwYwYKFomDiyI0w9WFCBhY5QC108UKkrQ81J6yggSLDB4UnXpzoGGPChwwkWrxgASrHCxHa8s2MYZREBxi6IoTAd+MFwG6DMggIoABG1RQAkoOgkEZtUIAAIVK0aMEhA4obN2psuDAihIZBJDSUaJFCVYgQJk6YCHGBw6RBETp0wJBBhIwIGjRguNBBAwcO1WJEWE2ChOcPKlScUJFjxobWgyyueOFigiYaNF5s4zHjhYpBkGfQIHJDBQngNG6Qe/FixaAVo3LwCDIK+6gbxY0PUoFdXY3w1KmHty7okHtCOwIBADs=",
    "pen9": "R0lGODlhEwAgAPUAAAAAAAIqFAM8HARYJgh8Rw0CABEqehBYuBJNqBYEABgEABkEAB0FAB06lyAgICMGACUGACYGACY8DikHACoHAC0IAC9YBDAIADVstTgPAENdz0SAzkig8E9NTV9562IEYGJjY2Ob5G0EB4mJiZBAGJInj5jo+J0KDrEoKMBXEdiAKNmDCtra2uW5fvDAaPe2Ave9TPbkAPf3qPf39/h9BfrNAf/yAP/7sf///wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADkALAAAAAATACAAAAb/QJZwSCwWD5pkEtE4IJxKzUEYTQpBo6zGo6QmPeARCyEGgbka6pkr7LCymKh3C8YgNHEM2sqir/9nfH6Af4KEh2l9GiEhG4d7QhgtLRuVYI2AiSowLyuVG42WYBofH0IpLy8pGBgbrBgNDXkgbiwWKSkdKSgdA4wbBwYBIh0SQgMDBCouqgMbWQgGJC0rIm0fHS81qgIjJCokDS3bKkISpSIrKRIYICrqGyQpKyRCFioqHbQCBiOTI8JYgDDGYhkMFSU6BDAgC1aDLBIECFGRSsUHBwYwxjJgQAUICxJtqUgBIoA3bBul6bLGAtkAES1IiBCBi2QABytelGMhodi4cBckNHJ0QKITimP6ctJAkaEBQ463SAwQMs2FPFwjnDo1QKCDhakFa9RY0dNqrK3TqlF9sXSABXoct/7cOYAECQkE3IrgyBfViqM8BwiwQFhChg98M6IgYcEc4ccWMmRwQJmyBMLmJFyGzBmykc+fgwAAOw==",
    "penAce": "R0lGODlhEwAgAPUAAAAAAAM8HARYJgh8Rw0CABYEABgEABkEAB0FACMGACUGACQ+sCYGACkHACoHAC0IADAIADBlqUNdz0SAzlVhl1bUml9562Ob5GY+JHkAAIMxAINYOIKPyYmJiZ5vSq68+bEoKL+HUsSQZMeTZsrX+dFvBdWgbtbW1uSsefbecPieBfvPBv///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAC0ALAAAAAATACAAAAb/wJNwSCwWF8ikciFZCpdIidRikSafUamWqm0unl0Jt0P2IoUUSqTbQZlQKlXneopwOGvLCFWKq/oeZyd4FBwSHHArf34lFF91doYmJiElIJeWJSGPHyQfHBQmf5oqICWnjUIkq5+MfX2jFEKdrImop6MYsx+dHyGVGrAeJiUeQ7yeoCEiIr+WICEexie8dx3N0iIjIiceGyGy1KvM3hsY5xsd34Gznh8b8PAY8B7Rgr3V59L1Ho73vJ9ARUgTYo6SWXc4JDNUpYqVR3iQ3JEwgYqFCRPUNMHSxaKFCAMiRBAQ4dECkXmkYOwQgcqEARKECJhJE8OAmyEnXJggIJyAUgHnftKcGUHnSAFCAtBUKkBpAKUimyI98XRmAAIEnmINIG3D06RCOwjRdYLMCXgzZeIcsqFsWzIe0p74OQCpWLJi3daVObNu3QAb9nmlaaRw4SAAOw==",
    "penKing": "R0lGODlhEwAgAPUAAAAAAAAhVwBKgABzagRKRQRYJg0CAAx1GxOtfBYEABcXFxaYDRgEABkEAB0FAB4fDx40CCMGACUGACYGACkHACoHAC0IADAIADAuLjsiCkNdz09NTVBQUFU0FF9562IEYGJjY2gICohYOImJiZBAGJInj50KDsASGMBXEchIMM2bOtdgENiAKNmDCuJ8F+20I/DAaPXo0Pe2Ave9TPbkAPh9BfieBfj40PrNAfroL//Hl//yAP/7sf///wAAAAAAACH5BAUKAD4ALAAAAAATACAAAAb/wJhwSCwWNcikcokUKj3QqNTTjCGnWGpVk+1qnF3sVlBSjjTnZPlrLbVaKtZb8H7Ly06NSOVKoUICISotKygkgE6BKC4rJiEGISgvhSEbAkIcHBgiKCZ/ACQkKH8dIh1CApoCnCgAoCyHGxsgIaiaHCKHKjgqKigZspm2GBwKHSEvcX+VshtCGweZCgAhKSOcEgDRHM4xBQUHGCodJiIwKo7aBx/dBR/gMC8oKTAsJxvqwjHQBeY4NiJEmPjAgcCBgweEEDwg4oWMFgFHgPgAAsTBAkK+HYAgioSKESNU7BFRAEIGIRkOFDDgCgMBghs6uCqQ4WSMDBgysARAYABBaU0zaaKEgGEnxQETMbi6mFGlUaQfBhBYerDpRgUKevokgOEBBIRWEWotaPAixpslIXwbseFbyW9qz0KIMSJGRbZ1QULIe/bsiLkxOIzoQbcuXcAY64IQApLx4sMZIUhOq1Zy5clGMmcOAgA7",
    "penKnight": "R0lGODlhEwAgAPUAAAAAAABbfwo/VA0CAA1JYRIgBBYEABgEABkEAB0FABwcHB40CCMGACUGACYGACkHACoHAC0IAC9YBDAIADMzMzsiCjuIpjwfA0Ndz0RMVEwqClU0FF0LC19562A5E2e73IOLkYmJiY8TE5dtVbEoKMBXEdmDCuW5fuY+Pve2AvbkAPf39/h9BftHR/rNAf/yAP/7sf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADIALAAAAAATACAAAAb/wNVpSCwah0KMcslsKofOjnQ6fZ6WlkAAQ61aMZZsgMDtVqEBCyET6EC7Xy3hFBq5XKay9Gsh0QMhJil5el8ZJXUkGSIiFkpke1AZJFoeJRwbCgoUI1sdGEMBhxkEAhwAmgMiJSJcoCcaGoyXIhwcCgAiGQpLQxccuiMeChMkjMe9JxUabAGaBgYixsZbrwMMCgQWApq4kyQK1UPdAgQG3QAAjtWvmhQB3KnpAk3jCgLO3bgA9K7tAwNSyQMAKdKJdAgBBJznZJyWfQAVklESYMGcK2AwBACIqx9FAhe1SKBAARcuiwFIkgwwpMKClyUHpCuwLJbNITY1UBgwQWbNUpwVWi6roIABA5mxKvzUILSCAQAGZAJwUFNphAdIQAwBAWKFVjonMpxYsSIEEq9kzYotSyTECrFjucZFC9asW7gvC+jVm7fAAg1Wgwo5QpjIiiAAOw==",
    "penPage": "R0lGODlhEwAgAPUAAAAAAABzagJcVgRKRQRYJg0CAAxGIxFyOBYEABgEABkEAB0FAB+OTCEvEiMGACUGACYGACY6ECkHACoHAC0IAC9YBDAIADVstTgPAD1tCkNdz0SAzkwoC1w7Gl9562Ob5Gc+DXNHDnVMJImJiZMKD5dtVcASGMBXEc2bOtiAKNmDCtra2uUkK+W5fve2Ave9TPbkAPf3qPf39/h9BfrNAf/yAP/7sf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADgALAAAAAATACAAAAb/wJVwSCwWL5qkcsm8CJlJj3TqUT6j1Kw0+dRql1eNdwpeicdZrhmd1nTZVLf5XEV+1VgNiUUi0clhHhckJiZ9dFZzUSImJSggYhsbVXJYHiIkKCslGiMtKYlKF0gBJS0lFy80LiN4GgExAgIjKzIrIiguKUiVgrQjAgHCBqWtrhoDIgMDwgIDAiXGlUkDHcvCGcscAom8GgIXuCgo1nZqAQcBWwIiJSLgk1tCBAfpHrL4AR+Skx9CBtYmyQowcJ+kfUIEdOggZuBAfhsQrqiQIYOwZ7KejbqAT0iFjx/xLYsAskKEBkIymIwQYUCDBgM4YDCw8uO/IQNorZiVUMYIJJsTdY7QKcDnTp8BKnj8FWEFLZ47EyqdaPIjSZI1WQI1wrVIEAA7",
    "penQueen": "R0lGODlhEwAgAPUAAAAAAAByNgCmfQM8HAM+IwRYJglFJgh8Rw0CABA9KBYEABgEABkEAB0FAB40CCAgICMGACUGACYGACkHACgoKCoHAC0IAC0uIi9YBDAIADVstTsiCkNdz0VGNkSAzlU0FF9562Ob5GRlVXBIMHkAAIhYOImJiZ0KDrEoKLjQ+MASGMBXEchIMNdgENmDCuJ8F+W5fvD4+Pe2AvbkAPh9Bfi1JPjAkPj40PrNAf3maf/Hl//yAP/7sf///wAAAAAAACH5BAUKAD4ALAAAAAATACAAAAb/wFhqSCwah8LC6GAQFTSdQ0ejKRwCh8KwIDqQrh2r4SA9YMjDw2iqcZKjB2onEBh2RBwQhyrScDodenckQyIBGiCJeYp5e2gpXYiJk5QcJVlDBlyUnIpdW4ednZ8pB3iTHKmpqE5bkop+q4kajx2yezArJYt7rSl+rC4vK32qtEOyiSIwzBhTqSIiyLcaJjcwIgbPVdOsRCXafpfIqCYwLDcopdsH5HomNjUsKOombI+qHC44MsQpIQGe+cpnQoaLEiZMBODi51gKDiE8cPBQAsUJEoBE3PFgaIiHEBo8aKCnosSdCxdEeAgzpE0HAwlOqEAxQhtKK3SGbNjw4cMGaxInTtTscHNhuxQ8d/Ik0TMBUQwJDGjSuRNlzw0olWLAMGCAzgoPBjwYe2HsTgdiFUAYYiJFDGnWRMRIeINuwiHXYnSYC2luW3M9UrQV3LbDYGkw/g4e3MHBAweOHxiA7FipBQtuj2guEiMIADs=",
    "sword10": "R0lGODlhEwAgAPUAAAAAAAMfEgeStwhSZQh2kw0CAAw6JREbIhEqehYEABZPNRgEABkEAB0FAB06lx0+ayAgICEzQSMGACUGACYGACkHACoHACtOfi0IADAIADgPADtGUEADA0dncGEnEm2PmW+El3kAAImJibEoKMDY8OW5fuY+Pvf3qPf39////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACoALAAAAAATACAAAAb/QBRpSCwah8KOctnZDDbM5TDaAYlEVOWUeoVSt0xRqYStMsFM6MCsBHXQ2Sho6GbH2/S68vNpf0kgH258gksgem8kTISIHRePF0OPVJAXDw+PD0OXmEqQnJiZm5xrG6CnmiSXEaYPG6YRq7JDEbUdtVABAREHBxsBBxFDTxtWVVZOhyAbj8MgEU0DTwPPrwcdBAJ5r0prB3XKBATD34dXy8ciXtokBOa8VSIREB1XjuMkByIQAFgRIgdIXBFBQleAIQFJMMCiIZ9AdQV1DTEwhMOVEQ4HijA4BEIJEiMukoAwsAQGDhAOkvAQgkSIKy1fXfHggQMHlSMwhhgR4mUEPASvHtTEgJNnzhC1aiFA8MBCAYkgR5jgaaCq1QcbOUbNmTKAAQVgN5QAoDWnB69W01b1CoGEkCNwiaAIAgA7",
    "sword2": "R0lGODlhEwAgAPUAAAAAAAGWuACt7wMfEgoKCg0CAAw6JRYEABZPNRgEABkEAB0FAB0+ayAgICEzQSMGACUGACYGACkHACoHACtOfi0IAC42QTAIADhYcEZrg0pRXE4uDlV9lVh2kmiFo2+El3BIMHCguHiUtIhYOImJiZe626BgALjQ+MDY8PCgMPjImPj4MPj40P/Hl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAC8ALAAAAAATACAAAAb/QFZpSCwah0KGculwMJrL5TDK+KBIDlRJQ50yNCIliisiKUVchlfj0nxYWK3GMlauXZanE0pP3zUUgVF9diVKbHlUDIRqhl94iot1jUoYkIqMd4lUmY6Wm4OTXnSgTKIlDmUkJGFRqqwOUyEkV45LsyUihlNNIRYOJsEgv6kaTl4OHYspKyspJkoZUo4OH4sjqyQjv9aFAQEc3xxguRoBAgLhAUMCHyQc4RgkKiQb4BwqGeslARkjHiU8yFuloUPAERQEsAvAwIMIDx04hOCQIcNDBgYyDAHHgCIHCh4m6svAgcEAA0MMGHCAARwGhwLFYVCZUuWARR1EhPDAIc83TpolDCBQSUBDiKM6NRBQOXRIgwZEMeQ6GgIDgadPh1jQwJWAVJ1JG3Cdo9WC2a0Pd3qYc9ZC2bYYOHjI0Pbs27MNHGjIW9etkCOAibAIAgA7",
    "sword3": "R0lGODlhEwAgAPUAAAAAAA0CABQjLhYEABgEABkEAB0FAB0+ayAgICEzQSFDcSMGACUGACU4UiYGACkHACoHACtOfi0IADAIAEdncFVmdmAWFm2PmW+El4UeHomJiYsfH4wgIJiswJiuxJjHs7EoKMDY8MzMzNk5OftHR////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACYALAAAAAATACAAAAb/wJBoSCwah0KMslKhXJ7Qy2d6GS4vGpGmI6oMK9NPVUSpXDrVSpaylYrH0U5oO/9CMcMzlVkZMBtmT3giYWEXFB1lFGVKg0+GYhUHZVJnjhiUGBUNHQlOH01SVhiAi0QeHmWbGGNNDRqwpBoNGLCzpl0XmhpmGCEVu8AXXl2YtawVJb0apKRWfLnJFJpdBwcKXwoKDR5MFCUNChUe4dpD1goCZxMN4JwXGRMKB+cHFiAVHRwWJRYWHRVGgLDQoB4Hgfo4lODAocOGESMyFBRh7eCIgyA6gACRgQOIiBOtZYAocOPGkgNDHkhg0aRJgRwS0KOo7R5Elx8HWhuiTVuCV48oN8qbxxPdypYg9h2IsFOEtmvbJmDc1+Ba06VPaTXYaIEUOmw0reYTMGGCugo9wUK1tujAE7ZPZ661Zk3SvHJEac6je6DqXqZ5/fIdbHWnkCOIiYQIAgA7",
    "sword4": "R0lGODlhEwAgAPUAAAAAAAEBAQICAQ0CAAweFRUUCxUvIhYEABgEABkEAB0FAB0+ax4fDyAgICEzQSMGACNENCUGACYGACY5UikHACglHyoHACtOfi0IADAIADEtKDYxLTk6Kjw3NEVGNkZAP0dBP0dncExNPVVWRmNkVGRlVW2PmW+El3p7a4N2fomJiYyNfZjHs7i5qcDY8MPEtP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADEALAAAAAATACAAAAb/QNdrSCwah0ITy3QKmZzM0GRBXUyGS6ZJ5VK1UNtQdTE8KVnLF6nlbTlZJ/LrjOaqQkMV2sTH8pdNE3x/YGZlTXwhJ4JPEydNj0OKSyGVgiEgjU8pZWhwJywvLi6TLUiSfE2VIyopEywhrCicL2NVoaFCLS4pcrZUoSYgdye8Vy8OU2OhCyEuDg68BkMQBsrAtcUGBrwQQ9sOCxcXC8za3CnTL9vVyuYu29Lf29bYDtoE8usE4NgGxQTypZtHL1mIFhNSwDPQYuA6egYaQIAQ4t7CER/UGai2jZ8BfiMW0qPG8WPHbScgqkOxAoXLlzBjDnlZIqZNFCWGNGCws4FPUp88R4QA2mAIAwYFkiotMKCAEqUMhozgYGaQVRQtGlRo4GFICRNHiHCBYyLnCxEdPKj1kFYtB7AeRIgY4bVETbswS6RQgddsTZd/b/4VFbYwkiAAOw==",
    "sword5": "R0lGODlhEwAgAPYAAAAAAAEBAQCt7wIECAMfEgeStwsQEw0CAAw6JREQEBEbIhElQBEqehUtThYEABYvUhYwUxZPNRgEABkEABk0WBs4Xxs4YRs6ZBs7ZR0FABw6Xx07YRw7Zh06lx0+ax4fDyAgICEzQSMGACUGACYGACdGbidHcSkHACoHACtOfi0IADAIADEtKDQ+RjtGUEFWXEVGNkdBP0dncEphfEqUCFLvOVVWRlRudll3gll3g1p5hGB+hmRlVWaFjmaGj2eHkW2PmW6EkG+El3p7a3+au36nmYexoImJiYyNfY+itZBAGJOnupjHs50KDqt7TLq5uMASGMDY8MPEtNiAKN7/c/DAaPe9TPh9Bf/GlP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAFoALAAAAAATACAAAAf/gFFSg4SFhoOCFRyLjBQPGxQlJR4cPUCDGB4eM0AeF088R0cYkzNGP4McJkBGPSY3T0NJRxseJiYzRYMeOUxAJUVFPVJPQTOaHjhGgzJGQDc3zjpHMjnIppeDQJa+MzNPLx4lx85Hg+ZCQD/eOUkuJTnHJklPzOY7ODM6L/wvxx70Xgz60SOIFCAycATJMUQGhQpHwHkYuOPHEGjVcECocCMIDw0eMAzSh1AGNBMvNmDYwY+CiYlSjBQx8kLGiyS1OOQAEsKFBVyDigB5VsKCC5AcXFDgkEnHjaA/8uUwAcGWiYe3ZuwoMehGjx86Wsy44cIDhBdBGpTYIYPDIAQI51q4QCujgocQIILsCCEjBIFBJW69wgHERAoTMoAcUQCiRIhBAiITefKjQ4HIlnc8uVwAsoACTzpEHj16x5LIgwoUWMIicoEUpF8fAdJZCpIhuJEgsQFDNxIjVGogODJkEIvjyD8gZ0GDRg0kCVgMAsHiAwDlH5SzsDFlyhAaIEAMggEDBAAW5Mm/gKHEiQsGIWAM4sHDBgD69G1EGcIjRYcXJdgwCG5DwEDgEEEs4cQLTigxBQ/FSXHghEkMcRgPIUA44IQHPqHEh03YECGHBPIACgw8OCHieDa06OKLMMonyCE0EhJFIAA7",
    "sword6": "R0lGODlhEwAgAPUAAAAAAACt7wMfEgeStw0CAAw6JREQEBEbIhYEABZPNRgEABkEAB0FAB0+ayAgICEzQSMGACUGACYGACkHACoHACtOfi0IAC0XATAIADtGUEQhAEdncEsnBkwoBk4qCE8rCFMuC1QvDFYwDVs2EV43E144E2M8F2U+GGY/GWpCHG2PmW9HIG9IIG+El3VMJIXW9YmJiYxiOZjHs6V8UsDY8P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADYALAAAAAATACAAAAb/QJpsSCwah0KVSqZqbTaZh7RB3SiHm5bqKcvINsJMlSujUjM08EYGo1Yq1KG5OkR35w05PtqSPvB6DW8NGS0tMBlRc4FnYhtSfYtlc09rhYd/cZNjXFGKZowNT3liMpmaeDBtd3egm1SqpHmnea8NsRtxtIFvqnBxgr+hsYqIZg9DAn8PBRkFD30PGY/MBUN/BwICLQaGMJVtcEMDAQEV3gMb51At5QFD7gEDGeQy5Cow8ePuA/bv7Uv4wRNYj4ULGF/c7SvXr4ULGQYRxmjXT4a8RMhcxOgCQqKLehYraBgJkcUGFCliwIgRo9yQCh44cNAAw4XNESZMdJhBriIGSA0cPnzQgNOmCxQunriUcWGk0xMmPog4wSKGCoVMnY5EwQLFBxRaBoitqFVEVxEjUiQlh9VEiRAaTLBgkTZFC7H6hBzZS4RGEAA7",
    "sword7": "R0lGODlhEwAgAPQAAAAAAAMfEg0CAAw6JREQEBEbIhYEABZPNRgEABkEAB0FAB0+ayAgICEzQSMGACUGACYGACkHACoHACtOfi0IADAIADtGUEdncG2PmW+El4mJiZjHs8DY8P///wAAAAAAACH5BAUKAB4ALAAAAAATACAAAAX/ILeNZGmO4qIuzWKxbdOu49ps1naJGqeti5qqwbEUNxriZTJRCVUZkRHpAwozmEXmcpHBrDrMBrNkAhfMprAJ5LrB55X7ksnQNvEV+1zjAjGAZHxjGHZnE3VbgSOIdIFbC1x1S0EbE4VLb34Tb4x7khcqTFhLNWZAaaJpIwMDLVtNEw2tAyoDASMBAxoFMbQBFhoBBRa4GwMWGBa3zAe7GAEBF8bIOsizrQEa0BYZORu609Liutl0Gqy32tDRtM67BLkNyxfWzLTIxsAXyPitzrOijaCTQYO/cv1ujSDAoIEuGe5aXbDgMJcGgwO4vGvFoI6GeOAuGJwTcZdAcOXmIFlYtnEAEn0DDji7iE/mgYnUZN7iEtOfug0iTgglwSEEADs=",
    "sword8": "R0lGODlhEwAgAPUAAAAAAAMfEg0CAAw6JREQEBEbIhYEABZPNRgEABkEAB0FAB0+ayAgICEzQSMGACUGACYGACkHACoHACtOfi0IADAIADtGUEdncG2PmW+El3QUFHohComJiZBAGJjHs7EoKLOxsbYzEMDY8NiAKNzq7+FgPeKaQuY+PvDAaPtHR////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACsALAAAAAATACAAAAb/QBJoSCwah8LF4tJYNBvPp0U5vGA4IAvoIuSQsKQLFbS8ZEXaiwW9ni6qmKsIlOl+QeHlMMPPXP4WFmp/F35mW4SEfHF9fIdxGIoYhhmRhFV/jYSThZdbnH2Khp6JCxOJm5xDphenExNKS4Kwr0MDTQt+ShMWBwe3Fg0DQwEDAwVTUMINxQEZAQG2vgMW0MXUAQx8HNEgxtDPxQfOAQQEDBYExMHb0ATbFgVb3QEXAQXc1vgAGQXbVX7kdfgQogMDOhk4kLrAoQGIDyDmdMgSb4g6EPiQgejAYcQHDXQwWhwir0FCgiY+UNhWQN7FAoUSItnYwAIHAi5Jgmhgb+KQUA7DQOAE0W2YGWggTGwwNg9mN3xmfoX4AHTYtQH06nkbsKHD0mEDfiElOsCMsbO/tn4jFsAmVmhnLZwde9Xa2btrQTDAO9euMS1CjghGQiIIADs=",
    "sword9": "R0lGODlhEwAgAPUAAAAAAAMfEg0CAAwMDAw6JQ8RVRYEABcMAhgEABkEABoaGh0FAB0+ayAgICEzQSMGACIuNyUGACYGACkHACoHACtOfi0IAC4wkjAIADQ0QTgPADg4UDs7O0dncEpLYlInElVjcGBgYG2PmW+El3IyEXx8fICBo4I9G4M+GomJiYubq45DGpWVlZiImKVSJaamprW1tcDY8P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADMALAAAAAATACAAAAb/wBhsSCwah0KBUjk4NAeD5XIoAAAUjWEIlio1FAOrgHrdZFivTQrmaW/CY1gVwgLBYtsXqzMCwYcgHiAsEAMKJSmJLCpdJSVDGQ0ZXoAjlpeWjzBWgY8vnyoqnyyka5sAgSMwLHcxrq+uQxAKHCkhKSobbSCBHhwQEIAeJYQmJimfyckqQ2EDIQqLDhvUENMNX0NWlswvsN9CpwMcDaQgJby86LzCxBDqpPHxpl8NKVls6frsp33dR0ReaANgxoMeZgCJeMjgIQWEUBtCSJw4cYiHDYMgZArFkSOrUw1C0GHBoaRJk8H6legWQ4bLly7DWXnWwBGEDDhz5mxHKEQJZA8h0CjTMwSMghQZQphh2KZpm4EN+mz4oOFEAgDOrAAgY6XBBw4aPhjQSpZKrRRhGxRgUKGAW61xBAANAYKB3QsVLjBwywBCHAXAdOmtsHetWzBxEhzA1mCvXbcFGki5k7ByjCAAOw==",
    "swordAce": "R0lGODlhEwAgAPUAAAAAAAgoGQ0CABA9KBYEABgEABkEAB0FAB0+ax9XPSEzQSMGACUGACYGACkHACoHACtOfi0IADAIAEdncFRoeW2PmW+El3BIMIhYOImJiZjHs7CBXsDY8NFvBfbecPieBfj40Pj4+PvPBv/Hl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACUALAAAAAATACAAAAb/wJBmSCwah8JKRVOxUCYIhEJDySAoyiHFUnlGo9OM5vocfs+IS1gzgSLMaKlIohFvNlH497JRfD4aGx4iG3xDXV0QF3+MjR8dh1wWEwGPFxd1GRcYHxhDFqAVCQMYHQN0YgqlmEwaFhqjAxeydRqXEgOHWaIDUmtSA7muS13BCnliCAMJAVrEvMe/xp9KrxUD0bXAU0xOFEzYE1MTFGBvrUxKFBQcRe15w91OFgASFu0Sx+dboG3iIyPuYCgEb4K6CRkGhgDB8M4FeNYSjAABMITFgATPKZmwYSJAhhQ7bJAAkQKfDh0AqgzY4eG+J5vudJR5R5+WNpdy6lTzRU8cPwUBKlgh4/On0F0+FSj1FUDBNyZPz3AQkoEDh28ZtpQZE4UdEYRVMxCLiqzWkKquDhX1pcBgF2/fhByZSyREEAA7",
    "swordKing": "R0lGODlhEwAgAPUAAAAAAAICAQMfEg0CAAw6JRYEABZPNRgEABkEAB0FAB0+ax4fDyEzQSMGACUGACYGACkHACglHyoHACtOfi0IADAIADEtKDk6KjhYcDw3NEVGNkdBP0dncExQWlMGCGRlVW2PmW+El3F2gXCguIN2fohYOImJiZBAGJjHs50KDrt/P8ASGMDY8MPEtMhIMNdgENiAKOJ8F+20I/DAaPXo0PieBfi1JPj40ProL//Hl////wAAAAAAAAAAAAAAAAAAACH5BAUKADsALAAAAAATACAAAAb/QFprSCwah0KFUkEyfZ6dzkfDWA6XCulFo7FkutirAqMUFM5oxmSiFLcwIsaWq7lUMRyFGNUSZTJRHRoRcCAhHHstWYJfXQxweWIcLAwbgnQWDCGGImIdOgyNjXYcpRieoBkbJTAqJ5kYZHqKWakeMTUxLhFVVrQKLCYWHickJScNvW0thyIjLREfKi0qKhRVHGxDISEiHS1SG60cHQwcICCdzBzPLSgRJykplhvoIogtHCIoJSYmHd6iZGhwDgS+Qxw8lCghgsWIERwsTCt1MF2EERFCPAxBxsIGDoeGAAzIAAWKEQYxZDgXsgUBAlEenXwIQqW5l0MEvBRgDoXGcREcMwTQKWAIAQNICTx0iJJDBJ0EiroUoBPbCBEGFTCgSjXnTqr3HmHgytVoVLJkX56VynWt2rc7c7YlYGIDVbVkcwoB12lDi2DQhohgS4OGiaI0vulgUeRwziEsvhnmY1iEEMct0s6Nuhbxkc9FaAQBADs=",
    "swordKnight": "R0lGODlhEwAgAPUAAAAAAABbfwMfEgo/VA0CAAw6JQ1JYRYEABZPNRgEABkEAB0FAB0+ax4hJCEzQSMGACUGACYGACkHACoHACtOfi0IADAIADuIpkRMVEdncG2PmW+El4OLkYmJiZdtVZjHs7EoKLC4vcDY8OW5fuY+Pu3v8Pf3qPf39/tHR////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACoALAAAAAATACAAAAb/wFJoSCwah0KGkkEZhDbMTGbJMAyXmU1GpMluKFTGNavRhkTSJQWMGW403YyGI8IwHAbDgOEBudMUWhkYGw0BShh2Q2kbjSEdGyEDGAN5SlcMcnMdIwaDIRkGfSRjgnAbAwMBHiMeJCB+IUpSBloYgxkgrwEBbbJyGB0YDg5SiR4GVQ5XgqAhQo+hDJXLTxsci88l29G9sVIlIs7b5B0eDrBXbVIDGdgi23l9sUqVS07cvE5ETGtUHeE4BLDCTVaYO4sGZihokMoyIVC2hCPiT4mDDuI4ZHCAbUjHNU0uhuDQQYpJY0McpBJJyRgCQhsSDRHgwFeGVBgK6NSZs8DMWgxDMDRoIECngKNHCwgYUqBDiAY7iyIwWvToTAFEjVKlajUEAaoAkIY9CqAsASRGSnR0CnSb02ciOJwQwfYMRrt1hsRFG1cE3Ucj84Y4gLSw0sJInx1ZXKREEAA7",
    "swordPage": "R0lGODlhEwAgAPUAAAAAAAMfEg0CAAw6JRYEABZPNRgEABkEAB0FAB06lx0+ayEzQSMGACUGACYGACkHACoHACtOfi0IADAIAEdncGA5E22PmW+El3NKMYmJiZdtVZjHs6FuJqt7TLEoKLGbRMAuLsDY8My3YuW5fuY+PvF0IPORMvPthve9TPf3qPf39/jAkP/GlP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAC4ALAAAAAATACAAAAb/QNVmSCwah0KFcslcWjbKYXOqtISiUEVkG6FasdTpVyENM0PZslmxUFEo5OxUo6FcKG4wk/IRoU4dd3lxTRR+IiMcFgohb4RvdiAmJSIpGEUXC2pvGhwZIyIFCgUbGSGacnYUGCQrKyBvIo6bcB4kILgeGQAUFhdqSxi4JCQcJ3d3wMEgHiAYFXYWFMpsGh4eC3Z3b9TCICQY26pDW8vfzNq+03JKwhjXGNmq6wP1C2wYGhUY9QPZAwGGBKgXAICGDhgwiKgwMIDDgBsGFCgwoIK+APkmABwIcMjGARM6dBiQj99DhwIJYsQQYIJCkw89bjx5UiVEhwAA4NQ5M2fHMg0B0RTA42ZdASELbppqtCFEIyFPM1C4SSFEBk0ZNkxzWlXrTYcE+808uUHIkbNEVAQBADs=",
    "swordQueen": "R0lGODlhEwAgAPUAAAAAAAMfEg0CAAw6JRIeLhYEABZPNRgEABkEAB0FAB0+ayEzQSMGACMkGiUGACYGACkHACg3SyoHACtOfi0IADAIADAxJDgPADk6KkFml0VGNkdncFmT4V8zG2RlVWR+omkvCG2PmW+El4M+GoW084mJiY5DGpjHs6VSJaZMD6dXK7jQ+L9hLsDY8MPEtNdgEO20I/F0IPD4+PORMvPthve9TPieBfroL////wAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADkALAAAAAATACAAAAb/QJlrSCwah0KFcrkUuSJMxTDKDLWoU8VkO1laoVtllqr4RseKiBpqZo4jLBiMFWkvxwsVbKbq2MUuSyU1MCYsfi0RGBFhQxElGDA1LygjBFYXIxubE0MeHh2EIygdH1YTEZshIUMLGhosLB8ZtFYbIRsiJydTERoZHxwlmxEnqiLIQxkhGsEuJ1YlFy4hyCIbQ8gaExwuLSegIBoeuddDGxEWvyUlISAFBLMiq9guIooeGuqvBCcKptfqbViAId+rgxpSXTP3JEKDVxggasCw4cOmDVJcDBgQ4CEGDBZCNuNAQMHGIQECqPtYoEDEVyQDcBwyoEHEBjYtNLAQsaLMaAA0VWpQqRPnq4oTUqIkKiCl05AL0ijVyNGp1ZQbnS79iXWjV69AXQQAAOBnVplnp3qT4cFFiRYeZJx4W8Jb3SEtXMjQ0OJtXHZ9XeDIO4SdCw3e4Oa9yyuw2K4pG4C1WkDvkctFZAQBADs=",
    "wand10": "R0lGODlhEwAgAPUAAAAAAAETCwNpOQKBVAQ/MgRYJggnGQ0CABFKMBYEABgEABkEAB0FAB0KACAgICMGACUGACYGACkHACoHAC0IADAIADMSADcXBD8bBUJr91MlCV0kAWYRB3M0DnkOEYS9/4mJiZAQAJVFFJ0KDqTL3b7JzMTi8Nzq7+W5fvF0IPS5Nff3R/f3qPtHR////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAC8ALAAAAAATACAAAAbxwFNpSCwah8JjCbRUOpkgplMJnR6lUmuxqu16v2CtKUx2msalc/p4ag/RXwEIPj2BDJaLJfo2lwYXGA4OFn0lJ3QlGBQYEnkYfWdnSSYCgRMVFVljWEiKGBMYm0lMHVF2DheMRSZRJCUdsSBCIBaQRgMIURgaGlGmGBdrQwLFAgi8Gh0aCMiiWQIDAgUiKSIcG72BFhYGUsUFBCorKdnZGLYXFwhDgc8oILG9Fg4YFRcFQxvyGRlLCMYGFGiWr4SGYFBAFBggzVgzdiWKaeiXAQS4AhgRZBwizZcuEQOLNZxWEKOyaSIASsPIkl0SMCeCAAA7",
    "wand2": "R0lGODlhEwAgAPYAAAAAAAA5dgA/fgBdogByvAGWuACdYwCiWARYJgh3kAiHTA0CABYEABgEABkEAB0FAB4fDyAgICB8RSMGACNUlCUGACYGACkHACoHAC0IADAIADARBTAxIUJr90VGNkSAzkdIOEspFFIuFFk1Gl0kAVxdTV46H2Ob5HBIMHGftXM0DnNKMXp7a4mJiY9JH5BAGJMKD5RmQaFuJqenp6t7TLGbRLjQ+L7JzMASGMPDw8XFxcy3YtiAKNzq7+UkK+W5fvF0IPDAaPPthve9TPj40P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEYALAAAAAATACAAAAf/gD06g4SFhoOCNz03OYwzMzmQN5ONN4OTmDM9jz0tlZiXmDczOiUtNyyik4iLk5qcnqqsoi2eLTOiPYI6o6eqv6u8MyCfwKA6OSsmuMaigzMkIM2yvCso087ILNKuj8A5lyUeOTk1MTA4vpMtqYMsIiIs5Tw+OOmKMyokpDr54zMsaADhgYPFohQeRPBDVSKHBAk/hPDYMePEhw8JB1za1iJBghIxNogIQIAARgEnBn0QEGPACg4pQITYEIJCyZEfBgkoIcNUClQiQozggCBACA4BBiUAsSFBihQtSoyYykECghAiECj14MFjhBQlTFBFUCKEihLuSpQoUMDDjRZTfUNAIBsiBFodHPIKSMDhA4W4EECU3cBhEIS8JVhwiBqXA4sSIggPyuuBA9OPU0dsAAHiUWG8XCNEgKBMqAgLlR9/5uohQl4aK7CKgNA6qIdBrCNwLW1CbuW8q7kmRhFjBNYQIFgoVz4o8fKwIbgmX85cB/Xn16nr2HWoO6JAADs=",
    "wand3": "R0lGODlhEwAgAPUAAAAAAAFoMgByNgGWuACt7wIuFgIvFwM+VQNJJAJTKAJZKwKBVARYJg0CABF8PBYEABgEABkEAB0FACAgICMGACMMACUGACYGACkHACoHAC0IADAIADcXBDg4UEQhAESAzl0kAWBgYGOb5HGftXM0DnNKMYmJiY9JH5BAGJRmQZiImKt7TLEoKLjQ+L7JzMYxMdzq7+W5fvF0IPe9TPj40PtHR////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADcALAAAAAATACAAAAb/QJhrSCwah0JX0qVqqo5QJuwJMw2tUabL9ORqjbCkaqrEYouwkbnLPBtVIKKzGOqQ4sMS6Knq1DtPQyAgHkSDTykrJimJJSEhICSBLiElQyGJjB2ECR4gI0SQl3UTHSkcn3oToZZDiCUrkCYmIAasrggIKCwvJCQhsURVlioBCgooL72fHiZLm03GAbwyJB52IUQmdwgjAQwIMi811gO/H0R3IQMBCCQ1MnogByAhIkMD2AcKHiziDB5OHLg2YMgHSAMIdFAmjoUHEvlCoHMxYOCADyVqvBC3LJ8ffB06fDioURy5eh04IADZYcCAEMpiRvqzgKXLELw2vohEz8MqdBcHOlxDlSIni0ETAgTgMISDBw8GiJZooAeBB5UIbLlIoMCBA6VWMzxVAMJpgARDECgVkICD26cIEhi7qlWuAAFKGSQwkEutVQ8rtzIIIMDrggV3z0a9GjgBAwV3HRx2oADcX5VDEmjWrECpsc19Vy7JAiYIADs=",
    "wand4": "R0lGODlhEwAgAPUAAAAAAACt7wNpOQKBVAQ/MgRYJgcmGAZsOAh8Rw0CABYEABgEABkEAB0FACAgICMGACUGACYGACkHACoHACspKS0IADAIADcXBE9NTV0kAVxdTWIEYGJjY3M0DnkAAHp7a4mJiY2Oe49JH50KDqIin7EoKLAxNL7JzO0cJP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACoALAAAAAATACAAAAb/wNRpSCwah8ITKEMEgZRQpeapFGWe2NOnehKNTMNRyRMKPTlRkKlU2p5CJdQWlHIOsaUR9WQSHZx2SiAiIh0jIUMhhSUZBYACIAcdGZQliRwYJpMYGwIIGAUdGpRUSxgnlJycGxgdIKOlHaekWCAfrhqud7Ink0a3r1e7GqhMURwZFxlou7PEfE+To8xKvBlbISYmIJNL1NxXpIqukx8ZukPAlFIY5hcYqUTmHqQYmPAZo7xDyBgXFBgo3KPEQdkpfhngvROIQSGyhESQjUrIsBXAeEM0XBi1cCCGiQc1bkxFQMCBUBQISBvib+S7AwgEoKTQ4QIBlhdcFhAgMxQBWgLJbp7AN4qCpwEHBGQgUCDoEArJmmJAQJXn0qYXCrBMhiADBQ0HNDRMyPHgB3jm2n1Yy0FUWjdnryX8wIFtvrf8ONR9t9auBroamNVdG7gv4Lp60SQ5whhJEAA7",
    "wand5": "R0lGODlhEwAgAPUAAAAAAACt7wNpOQKBVAQ/MgRYJg0CABEqehFpNRYEABgEABkEAB0FAB06lyAgICB8RSMGACUGACUlJSYGACkHACoHAC0IADAIADcXBDh8U0NOO0Jr90hZO0woC10kAVxyS2YRB3FEEoS9/4mJiY9JH5AQAJ0KDp1kG53a8bAxNL7JzNiAKNzq7+W5fvF0IPDAaPf3R/f3qPtHR////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADQALAAAAAATACAAAAb/QJZqSCwah8KjarRUIo3MqDF5lDKdzquSRSVqiVyseCzmdrdhVdjMniaFIbVwxB2NOiH6m/Whj0InHiGCHyFmSCwjHiocIy0kJ0N5h0N2ISGNS3oeV0kIEnh9DSIbUR0fBBxEJx8dHQUCUQIFHR4kKxwEQyctlx0HGwEbBAUeHSstLboqB80klykEKaiAjieRKgQNBAS1HhocrYIFHx8kQ8gfD8UnIRIceB0c8AhDzSbvvOYe3wSFr0NIaGDFoUSKEiA6IOBwjZ+DIe8+cNDgIRAHBAhWwHAR4tYQDRgp8mIl0dqlD0MwPph4osQJDeWYBHipSgVGAQI+rPDwaB7KQwb8UNp8gDFDAw0a3mkYEWAEOKEIHkglOjWXHRUgayIQEBUnV6kHRjQagTNl1KkqiRZAkCEDUbNoMcqdi6CAGjJTggAAOw==",
    "wand6": "R0lGODlhEwAgAPYAAAAAAAJSCAVFKAZpIwh8RwqERA0CABEQEBJIMBUVFRYEABgEABkEAB0FAB1/UyAgICMGACKGWSLUgiUGACYGACkHACoHAC0IADAIADC9fTMzMzcXBDjhlVQoDV0kAW0PD3CguHM0DnNKMXohComJiY0UFI5TL5dtVaFuJqRNF6t7TLEoKLGbRLC4vbYzELjQ+L7JzMBXEcZlK8y3Ys9xDdMSF9MjLNzq7+FgPeW5fuY+Pu3v8PGFRfD4+Pe2Avf3qPf39/8YHv83RP/GlP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEUALAAAAAATACAAAAb/wB1sSCwah0Li7dYitprDZZFEYsKqJFgrG70NWx2RtSraQo8isVZbvR6HaW1rY6OtSCqld0jykFoOHSQoOjJNUmdgWWkZDiIOXFoiX2AaJB0DESYmDhlEfV8pJgMBGxoRLCIRETAifx5DHiIIKimygBEDTVQtsDAbISosM34wIRuCV36+JCIzMCwdTynNk32gksMjghky1cqXfCUlIykfJAQs1VtUHUMn4yW3JDFlLZM3Iu4wHuMhIg0abDBBYseWK+FajfPQYYNDExqeENyyj8SHESJKbBBxwsSDAYFUUBRX5sQIFTJStAhAKsUMfUNGlBDx4sagFCEMCmDJLpYHfgEgSJgQIEoOlTJcAih9wIIFURQyaNCIkSypUg8qRGiA2MEEiqEnDsJgGUCEiTQ0BqhdOwCBhiEDCAToOuMEDZZx1wZ4MIRA3AACBIhIS0qtX6V92Q4YzJIAgQJ64aoN4LdtgcuVJw/BGwDygMuY9QbYXHit48ykECd5w3pHEAA7",
    "wand7": "R0lGODlhEwAgAPUAAAAAAABzagNpOQKBVARKRQRYJg0CAA0OEhEqehYEABgEABkEAB0FAB06lyAgICMGACUGACYGACYmKykHACoHAC0IADAIADcXBEUXBUgfB0qUCFLvOV0kAV0mBV0pCmwyEHNKMXg6FYmJiY9JH5dtVat7TLGbRL7JzMy3Ytzq797/c+W5fvf3qPf39/jAkP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADAALAAAAAATACAAAAb/wNRpSCwah8JTank0JpVC0Ukqnaaky2SSmgJNpV7ndiiKXrFabVVErTbfxCzyCa/biW6RxoRyN0NVKBoaG35HJCR9GigmbHYiKB4FJSt9dgEIFyEeJlOPCAgEGSAgBAGGRgEEph4fHgQIqEUiAbUErRKOdbSnJB2Iu2wiBFMgHrJktqvFH2FHpqqqeCAks1OrBBKrAdZkIV4kpQEO1MdNxiLhBQICICMdAoYikh4eJBnsBeoFH24Bks1A4GMX7sOADOZOSPhQIAMGfgjXScCX4UKVDBkKSPCwsIAkARcyesg4xOEBCiEkYHCYcaKDkQWGjDww4YODlTUlbJwQ0sGQFw8XHFAAmqHDhAwSHHyg8MCDTzp3lAQBADs=",
    "wand8": "R0lGODlhEwAgAPUAAAAAAAGWuAIvFwM7GwNFHwQ/MgRYJgh3kA0CABEQEBFpNRYEABgEABkEAB0FACAgICB8RSMGACUGACYGACkHACgoKCoHAC0IADAIAEQdBl0pCnM0DnVMJHkOEYmJiY5YEp0KDqTL3b7JzMTi8Nzq7////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKACYALAAAAAATACAAAAb/QJJoSCwah0KiR+RpLpXP4afJZJKaV1GWyOlWNSLOkhqFMjlXT3Y75HymYg8Ho6lzNJ7RaCjfbN5kchp+RU5Nfm5xTGUbbk0QTV2NU0t7i5IaioIcG0WUi3UbTQRjRZmAHhBVq0eRiIZHfHyRnJkcEApGbh9iUHJUhXeTsEaWenyhf5SWha3CYpBEk7GylUpdYrfN1KmccXKkepZPI09NoWBGp7wjQuNExyIEGRkaU4tISUUGCgYGyV0MNFFAMFcYDgUI8qtnSwEuAwSGnOoCAZdCPx80DDAwZB5AXhz8FSig4cCBIQUJjkymIIDLAwZNWjRJ84DLADA5ilBgsyZOCpwm+0HUQq0oiSAAOw==",
    "wand9": "R0lGODlhEwAgAPYAAAAAAAEBAQIvFwNFHwRYJg0CAAxyFw8PDxUVFRSNCBYEABgEABkEAB0FAB4fDyAgICMGACUGACYGACkHACoHAC0IAC0WBDAIAEQdBkVGNkwoC0xQUU4uDlVWRmRlVWiAyG0PD3NHDnNKMXVMJHh/gXp7a4hYOImJiY0UFIyNfY5YEpBAGJidnZ1kG6RNF6SusKt7TLe9vbjQ+Lt/P77JzMPEtMTLzMZlK9zq7+fv7/GFRfDAaPDVnfD4+PXo0Pj40P/GlP/Hl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEMALAAAAAATACAAAAb/wJxtSCwah8JXbBl7sVgvp5L5GsZoWNoLB4WestjhF9u0ebwvMPGJPedYMZKtlC3GUjYa63R6ek5XNDY4OFYlcC8pWSKBWHCGT4laNIxkczFDJSUphykxJpSYZjaeQyyHUXgiOCaiIXeiMagvJTEiNqCCHImxqLK2NK00JyGksSIZUJ4iwVcvGDS1ViIdqbYsIUosAifSNrJQtDEhHH0lJCouHL0pULUhHjEnGSErK7uG7acxHDApJjA43DAhosq3TU/eteDBYwaGGyRKGDylr5aIEi12zODgIoMIFkMyeEjhwUMtDiZM7GBhj0AHDyEzjDBAoFYGPSxgwJjZYcAQfwIyXWYwwOGDDEomWHTg4NMGAQ4jhD59QOJDjBscDIxoqqmrJhEgUIC4EcJrJq+aOohdoc6sDQdw48L1IIKtAARxh3TYy7dDhhck1DnoO6Sk4ZIiWphw4YHE4bNoRcxo4cLEDJOaMqXYzLmEiQ4iMG8uofew6dMdbAg5wppIjiAAOw==",
    "wandAce": "R0lGODlhEwAgAPUAAAAAAAGWuAQ/MgRYJgh3kA0CAA0FABYEABgEABkEAB0FACB8RSMGACUGACYGACkHACoHACspKS0IADAIAD89PUSAzktKSk1eY1BQUF0kAWOb5GUqBWUqBmkzDXM6EnSFiomJiYujqo9JH5NLH5hPJJlTJZ9XKKjH0LFvR7toNrrFyL7JzMdwO9B2QNqHVdzq796KV++pePvizPrq3Prx6vv7+//Hl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADgALAAAAAATACAAAAb/wJdqSCwah6/VKjkMDZXQlSoKVV0GTSd1axVcTCYPaLp9JVefwceT8mRC22UyRF95SKL3BSSPqgZjKmsdGCFXH3F0Fx8gKB4XUhdEUFoXAhEeIo9SdCBwUgMDIR8CAiJhklcDF58qIAKjnmscEyIAXqNbrCsgIhxhaYIWUGdkKhkdIyt0ggJUga5uIjFOdIhSkYAgLjEYKDB0JyefSkkCjS42KtwgH6OfZrwvIS0xKxH1Lqzj5SoWFFJQxJBBQaCNELLKfYhAwUk6EBkM0qkjBQMFCqxAUMuQAkYMTxRVXKQQwZMJEGJYgAwpYEEoEEI8dBDkbty1AQtcLvhgJo+rXQ82P4VyGerChQyINHxwl2vFUKKhSl0IUGHpBwJKcELduoqAV6xOtZbCOWBsqLNZz5pBqAQSiAtfs+bkuWzFHj5vAxCAtGKvqIlTXEnxGqrt18OHjaIVcqQxkRdBAAA7",
    "wandKing": "R0lGODlhEwAgAPUAAAAAAAB2owIvFwQ6FgRYJgZZIg0CAA2IHxJNYxYEABgEABkEAB0FACMGACUGACYGACkHACoHAC0IADAIADcXBF0kAVxdTWMoBGktCGkvCG0wCm8yCnY2EHY3EHp7a4JAF4NAGIKkRYUtJImJiYi9ZIw/DY2Oe49JH5dtVZ0KDqBIDqVnB6hXM7jQ+LzXeL+HUr7JzMASGMBXEchIMNdgENiBCtzq7+W5fu20I/D4+Pe2Avf39/ieBfj40ProL////yH5BAUKAEAALAAAAAATACAAAAb/QBtsSCwah8Ij7LVavVgl5bH2etVkJ6nRenpmtURcrYaTqcDE16njRQ9rgDHWDatlVtcvGi9m6Y8jQyhqL2V/RSOBI04seH5KIxWKVSkqbUYjHhuKQy9sc0obHjCZPSgICCeHpJGBJi4uISMBFaukFCgZMU0siRS2MBcVFRspIiM2AQggUpswHRY3MC3KFVIXIyfGHxYB1UhJpBkjIikxxt4IGUnhHhYwHOYp3rQqNvdEIxYXweYi6RVUsBgyEIa7ChZCWFioDEFAFlDOwLCQIYM7haiUDeDAQsWJFUMsDPPgbqEFVAgogCjRaMgJYSRJLixJsoMIEUNKXJBggaS+OQEDZi688OVEkp4ThwR6ZxCFy3sjPsCw8W4HJqYbkLyzEWhqJiH6hnDQcOHCBgzCTPZUO5VOERtBAAA7",
    "wandKnight": "R0lGODlhEwAgAPUAAAAAAABbfwB3lgCdwAD6/wD//w0CAA1JYRYEABgEABkEAB0FAB0gIyMGACIqMiUGACYGACkHACoHAC0IADAIADcXBDc6PTuIpkMRF0RMVEpNT10kAWJrc3AOGng4EYBcEoUtJImJiYsUFIt+Oo9JH5L9/5dtVahXM69dFbEoKL+HUr7JzNA3N9zq7+W5fuqoIO3v8Pf39/3maf///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADQALAAAAAATACAAAAb/QNhqSCwah0KjphM6Ookh5vMZ2jSNqqyzeh2qTqxUaltphkKqcOrULYZcptBgnjKlWKenpsKZlwIrIXFuZyEaFhccAnNtQyEWHhsWkxcqKwMrLo0rHC4uHg4OB28uWSRFLS1nKh8eHw4aWQQEF0cjJi4fKiMuFh8aAhebKi+8KhseBwEHBxpNLUPQGLgjHh0dJHsmL6VuHBwrGhjXKp4uLyqDgRmTHBob8CBnLzKfGEMWGhoODBgb1xhKEBhA7NgQBiE4THLgb0OFORZInCCxYYgDdhkcWICXYdGAcR023AsUasWGfhgGDAxRAYPLkSsYaFRB0cwKVRMohBwCYgM7aRQqUJCQeMIECQwVdq4AQcIDCKBZJoJgehQez6EnoH45wXVoB5dXuaJAkTUL2YlNKQz5F5LEh7cmPpgwCs/DyCSBVsC40gRci71IAsXICy6vo3DRrqhanNemhrUh4UmGdy2kZb1TnsAIAgA7",
    "wandPage": "R0lGODlhEwAgAPUAAAAAAA0CABBYuBYEABgEABkEAB0FACMGACMMACUGACYGACkHACgoKCoHAC0IADAIADCB2DcXBDg4UEQhAEig8F0kAWA5E2BgYG88EHNKMXg4EYBcEoUtJIhYOImJiYt+Oo9JH5dtVaMSF6hXM6t7TK9dFb+HUr7JzMlUFMpuHdzq7+W5fud0GOqoIO0cJPf3qPf39/j40P3maf/Hl////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKADUALAAAAAATACAAAAb/QNVpSCwah8KjcslsOp/QqBQaEnmmHlFHehEIQtenRwCBCK4XJ7kM8XgmzvHZ5K6Elx6J6bRyd+5KISUmJiUXHxOARiEpjSktLCQYTB4oKCUrJh8oCBWUlo8mKyQXW0gqSSceKZePLSYkW0KoqZUlIC0tJCMGcLQrRba5KyslDHB7J4MhQx4lKSu5sB4VICQmHCMkHEQhGh+EJG4Y2SYjIyYgRB4cIhXtHh0WIISwsEMjGSAiGSIoIBqqkRhEaMSQEBk6KFTorcI1ErtAqDvBwcIGCyHkRbBQIYMGgO8mqkMlwQOqC8xOXBCCYaI4FTTSqIBxAcaQlfG4nRgRQoUHGAuqVBJZqXIiBxAhj0oEGfCdhhOpoqgIAgA7",
    "wandQueen": "R0lGODlhEwAgAPYAAAAAAAIvFwNFHwRYJg0CABYEABgEABkEAB0FACMGACUGACUlJSYGACkHACoHAC0IAC0WBC0uIjAIADm5SkQdBkgwIEwoC04uDldXV2JjY2cJDXNHDnJHKnVMJICEhIUtJImJiYtZN42NjY3GP4zJPo5YEpBAGJeXl50KDqFrSKhXM6xwSL+HUr7JzMhIMMyHWtQgINdgENiAKNzq7+Gja+J8F+tAKO0cJO20I/G5K/DAaPNLK/Xo0PfsRProL/zNQP/5R////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAUKAEIALAAAAAATACAAAAf/gDMtg4SFhoOChScvLzQ4NIwnh4YvNTiWNS+TlDaZNTaam4QyKjUrMS4yoqMspqahmx4iLCs2NDYssJMbizU1MjSZohm8jjk0OY/DGieOkDjKosy0K9QpgzqTzC8pPz44LyEtPzs5hxogKxsrKSUdzD82OIchFyv2LTQmFic6ONmGToRg4SEFDRYZMgzyUCiRQAySXkjKcGJExUMFTbxYwTEFRYaGBLXz16Mkjh84RIBoKEjEChw5YubwleIFw0QtTqhIsUHFyR/JZHy40ALnBxUcLZjA0eOHNxkhQpwQOChFtRDrmIZIoYNGiqgprrXgyG6DCRk5BgzIIaMER1qDcj6Y+MpBBrgVJZKp6BAC76AOCTNwCLsCAIBcGTBwiLrQg2PHGDAAIIDhsYcMFQZhqFBhM2fDCzx7jlAoiEIPMzLMOCFidVERhATNwDCDoWoPkhgGKYS7BYaiLVTnzCnJdQvOCyJEWJCc+XLm0IGvOjQjEAA7",
}
CARD_NAMES = {
    # Index 0-21 = Major Arcana; 0-77 = all cards
    "0Fool": "The Fool",
    "10wheel": "Wheel of Fortune",
    "11Justice": "Justice",
    "12Hangedman": "The\nHanged Man",
    "13Death": "Death",
    "14Tempance": "Temperance",
    "15Devil": "The Devil",
    "16Tower": "The Tower",
    "17Star": "The Star",
    "18Moon": "The Moon",
    "19Sun": "The Sun",
    "1Magician": "The Magician",
    "20Judgement": "Judgement",
    "21World": "The World",
    "2Priestess": "The High Priestess",
    "3Empress": "The Empress",
    "4Emperor": "The Emperor",
    "5Herophant": "The Hierophant",
    "6Lovers": "The Lovers",
    "7Chariot": "The Chariot",
    "8Strength": "Strength",
    "9Hermit": "The Hermit",
    "cup10": "Ten\nof Cups",
    "cup2": "Two\nof Cups",
    "cup3": "Three\nof Cups",
    "cup4": "Four\nof Cups",
    "cup5": "Five\nof Cups",
    "cup6": "Six\nof Cups",
    "cup7": "Seven\nof Cups",
    "cup8": "Eight\nof Cups",
    "cup9": "Nine\nof Cups",
    "cupAce": "Ace\nof Cups",
    "cupKing": "King\nof Cups",
    "cupKnight": "Knight\nof Cups",
    "cupPage": "Page\nof Cups",
    "cupQueen": "Queen\nof Cups",
    "pen10": "Ten\nof Coins",
    "pen2": "Two\nof Coins",
    "pen3": "Three\nof Coins",
    "pen4": "Four\nof Coins",
    "pen5": "Five\nof Coins",
    "pen6": "Six\nof Coins",
    "pen7": "Seven\nof Coins",
    "pen8": "Eight\nof Coins",
    "pen9": "Nine\nof Coins",
    "penAce": "Ace\nof Coins",
    "penKing": "King\nof Coins",
    "penKnight": "Knight\nof Coins",
    "penPage": "Page\nof Coins",
    "penQueen": "Queen\nof Coins",
    "sword10": "Ten\nof Swords",
    "sword2": "Two\nof Swords",
    "sword3": "Three\nof Swords",
    "sword4": "Four\nof Swords",
    "sword5": "Five\nof Swords",
    "sword6": "Six\nof Swords",
    "sword7": "Seven\nof Swords",
    "sword8": "Eight\nof Swords",
    "sword9": "Nine\nof Swords",
    "swordAce": "Ace\nof Swords",
    "swordKing": "King\nof Swords",
    "swordKnight": "Knight\nof Swords",
    "swordPage": "Page\nof Swords",
    "swordQueen": "Queen\nof Swords",
    "wand10": "Ten\nof Wands",
    "wand2": "Two\nof Wands",
    "wand3": "Three\nof Wands",
    "wand4": "Four\nof Wands",
    "wand5": "Five\nof Wands",
    "wand6": "Six\nof Wands",
    "wand7": "Seven\nof Wands",
    "wand8": "Eight\nof Wands",
    "wand9": "Nine\nof Wands",
    "wandAce": "Ace\nof Wands",
    "wandKing": "King\nof Wands",
    "wandKnight": "Knight\nof Wands",
    "wandPage": "Page\nof Wands",
    "wandQueen": "Queen\nof Wands",
}
CARD_WORDS = {
    # Max character length per word = 11
    "0Fool": ["beginnings", "innocence", "spontaneity"],
    "10wheel": ["destiny", "change", "cycles"],
    "11Justice": ["truth", "law", "fairness"],
    "12Hangedman": ["surrender", "acceptance", "sacrifice"],
    "13Death": ["rebirth", "endings", "change"],
    "14Tempance": ["balance", "moderation", "realignment"],
    "15Devil": ["pleasure", "addiction", "materialism"],
    "16Tower": ["revelation", "upheaval", "disaster"],
    "17Star": ["hope", "healing", "inspiration"],
    "18Moon": ["illusion", "distortion", "intuition"],
    "19Sun": ["joy", "optimism", "wellness"],
    "1Magician": ["talent", "potential", "willpower"],
    "20Judgement": ["absolution", "calling", "awakening"],
    "21World": ["unity", "harmony", "completion"],
    "2Priestess": ["inner voice", "mystery", "intuition"],
    "3Empress": ["femininity", "nurturing", "creativity"],
    "4Emperor": ["masculinity", "authority", "duty"],
    "5Herophant": ["tradition", "society", "legacy"],
    "6Lovers": ["intimacy", "choices", "union"],
    "7Chariot": ["action", "control", "discipline"],
    "8Strength": ["compassion", "composure", "endurance"],
    "9Hermit": ["solitude", "insight", "awareness"],
    "cup10": ["soulmates", "harmony", "alignment"],
    "cup2": ["partnership", "attraction", "harmony"],
    "cup3": ["friendship", "solidarity", "socializing"],
    "cup4": ["evaluation", "jealousy", "boredom"],
    "cup5": ["remorse", "failure", "depression"],
    "cup6": ["memory", "nostalgia", "childhood"],
    "cup7": ["choices", "confusion", "fantasizing"],
    "cup8": ["escapism", "withdrawal", "letting go"],
    "cup9": ["fulfillment", "gratitude", "acclaim"],
    "cupAce": ["love", "creativity", "joy"],
    "cupKing": ["diplomacy", "tolerance", "devotion"],
    "cupKnight": ["charm", "romance", "beauty"],
    "cupPage": ["admiration", "sensitivity", "epiphany"],
    "cupQueen": ["empathy", "compassion", "nurturing"],
    "pen10": ["family", "windfall", "legacy"],
    "pen2": ["balance", "adaptation", "decisions"],
    "pen3": ["cooperation", "learning", "talent"],
    "pen4": ["investment", "security", "frugality"],
    "pen5": ["poverty", "loss", "isolation"],
    "pen6": ["giving", "altruism", "sharing"],
    "pen7": ["results", "persistence", "vision"],
    "pen8": ["hard work", "practice", "diligence"],
    "pen9": ["property", "luxury", "gratitude"],
    "penAce": ["opportunity", "career", "prosperity"],
    "penKing": ["bounty", "leadership", "provider"],
    "penKnight": ["reliability", "patience", "routine"],
    "penPage": ["potential", "thrift", "ambition"],
    "penQueen": ["steadiness", "generosity", "nurturing"],
    "sword10": ["fatalism", "crisis", "melodrama"],
    "sword2": ["denial", "stalemate", "choices"],
    "sword3": ["heartbreak", "trauma", "grief"],
    "sword4": ["self-care", "rest", "meditation"],
    "sword5": ["abuse", "sneakiness", "pride"],
    "sword6": ["moving on", "regret", "progress"],
    "sword7": ["secrets", "cunning", "stealth"],
    "sword8": ["restriction", "isolation", "victim"],
    "sword9": ["anxiety", "despair", "nightmares"],
    "swordAce": ["truth", "assertion", "new ideas"],
    "swordKing": ["logic", "wisdom", "objectivity"],
    "swordKnight": ["initiative", "courage", "activism"],
    "swordPage": ["curiosity", "eagerness", "vigilance"],
    "swordQueen": ["principles", "complexity", "lucid"],
    "wand10": ["obligation", "overload", "burden"],
    "wand2": ["waiting", "options", "discovery"],
    "wand3": ["enthusiasm", "progress", "fruition"],
    "wand4": ["home", "celebration", "commitment"],
    "wand5": ["competition", "chaos", "conflict"],
    "wand6": ["recognition", "victory", "pride"],
    "wand7": ["challenge", "defiance", "courage"],
    "wand8": ["travel", "haste", "impulse"],
    "wand9": ["resilience", "resolve", "fatigue"],
    "wandAce": ["inspiration", "ideation", "creativity"],
    "wandKing": ["leadership", "charm", "innovation"],
    "wandKnight": ["passion", "adventure", "action"],
    "wandPage": ["free spirit", "discovery", "play"],
    "wandQueen": ["boldness", "ambition", "passion"],
}

def main(config):
    # Main function
    # Define user choices
    card_back = base64.decode(CARD_BACKS[config.str("choice_back", DEFAULT_BACK)])  # Decodes chosen card back for image src
    card_color = config.str("choice_color", DEFAULT_COLOR)  # Returns desired color hex code
    card_max = int(config.str("choice_max", DEFAULT_MAX))  # Returns Major Arcana cards or all cards
    card_draw = config.str("choice_draw", DEFAULT_DRAW)  # Returns single card or three-card spread
    card_freq = config.str("choice_freq", DEFAULT_FREQ)  # Returns how often to draw new cards
    # card_freq = "once" # For testing
    # card_max = 21 # For testing

    # Calculates which function to run depending on single card or three-card spread
    if card_draw == "single":
        return draw_single(card_back, card_color, card_max, card_freq)
    elif card_draw == "spread":
        return draw_spread(card_back, card_color, card_max, card_freq)
    else:
        return render.Root(
            child = render.Box(
                color = "#000",
            ),
        )

def draw_single(back, color, maxdraw, freq):
    # Single card draw funciton
    # Define variables from user choices
    card_back = back
    card_color = color
    card_max = maxdraw
    card_freq = freq

    # Determine whether to pull random cards throughout the day or only once per day
    # For throughout the day:
    if card_freq == DEFAULT_FREQ:
        card_num = random.number(0, card_max)  # Generate a random number for the card draw
        # print("SINGLE - THROUGHOUT\n")  # For testing

        # For only once per day:
    else:
        if card_max == 77:  # All cards
            url_draw = URL_ALL
        else:  # Major Arcana only
            url_draw = URL_MAJOR

        res = http.get(url_draw, ttl_seconds = CACHE_TTL)

        if res.status_code != 200:
            print("Request to %s failed with status code: %d - %s" % (url_draw, res.status_code, res.body()))
            return render_error("Could not reach range_x.json\n:(")

        draw_from = res.json()
        card_num = int(draw_from["single"])  # Set the day's card number
        # print("SINGLE - ONCE A DAY\n")  # For testing

    # Define card properties
    card_name = list(CARD_NAMES.values())[card_num]  # Gets card name (string)
    card_keywords = list(CARD_WORDS.values())[card_num]  # Gets card keywords (list)
    card_face = base64.decode(list(CARD_FACES.values())[card_num])  # Gets card face (for src)
    # print("MAX: " + str(card_max) + "\nNUM: " + str(card_num) + "\nNAM: " + card_name + "\nWDS: " + str(card_keywords))  # For testing

    # Create animation delay for single card render
    ani_delay = delay_list(card_face)

    # Send everything to renderer
    return render_single(card_name, card_keywords, card_face, card_back, card_color, ani_delay)

def delay_list(face):
    # Set up a list for animation frames during single card render
    # Set variables
    card_face = face
    output = []

    for x in range(240):
        if x < 111:
            output.append(render.Box(width = 19, height = 32, color = "#00000000"))
            continue
        elif x < 239:
            output.append(render.Image(src = card_face))
            continue
        elif x == 239:
            output.append(render.Image(src = card_face))
            return output

    return None

def render_single(name, words, face, back, color, delay):
    # Render and display animation for single card option
    # Define variables passed from functions
    card_name = name
    card_keywords = words
    card_face = face
    card_back = back
    card_color = color
    ani_delay = delay

    # Display the animation
    return render.Root(
        show_full_animation = True,
        child = render.Stack(
            children = [
                render.Sequence(
                    # The card flip and slide sequence
                    children = [
                        # Show card back
                        animation.Transformation(
                            child =
                                render.Column(
                                    cross_align = "center",
                                    main_align = "space_between",
                                    children = [
                                        render.Row(
                                            expanded = True,
                                            main_align = "center",
                                            children = [
                                                render.Image(src = card_back),
                                            ],
                                        ),
                                    ],
                                ),
                            duration = 16,
                            delay = 0,
                            keyframes = [
                                animation.Keyframe(
                                    percentage = 0.0,
                                    transforms = [animation.Scale(1.0, 1.0)],
                                ),
                                animation.Keyframe(
                                    percentage = 1.0,
                                    transforms = [animation.Scale(1.0, 1.0)],
                                ),
                            ],
                        ),

                        # Flip card back
                        animation.Transformation(
                            child =
                                render.Column(
                                    cross_align = "center",
                                    main_align = "space_between",
                                    children = [
                                        render.Row(
                                            expanded = True,
                                            main_align = "center",
                                            children = [
                                                render.Image(src = card_back),
                                            ],
                                        ),
                                    ],
                                ),
                            duration = 16,
                            delay = 0,
                            keyframes = [
                                animation.Keyframe(
                                    percentage = 0.0,
                                    transforms = [animation.Scale(1.0, 1.0)],
                                    curve = "ease_in",
                                ),
                                animation.Keyframe(
                                    percentage = 1.0,
                                    transforms = [animation.Scale(0.0, 1.0)],
                                ),
                            ],
                        ),

                        # Flip card front
                        animation.Transformation(
                            child =
                                render.Column(
                                    cross_align = "center",
                                    main_align = "space_between",
                                    children = [
                                        render.Row(
                                            expanded = True,
                                            main_align = "center",
                                            children = [
                                                render.Image(src = card_face),
                                            ],
                                        ),
                                    ],
                                ),
                            duration = 16,
                            delay = 0,
                            keyframes = [
                                animation.Keyframe(
                                    percentage = 0.0,
                                    transforms = [animation.Scale(0.0, 1.0)],
                                    curve = "ease_out",
                                ),
                                animation.Keyframe(
                                    percentage = 1.0,
                                    transforms = [animation.Scale(1.0, 1.0)],
                                ),
                            ],
                        ),

                        # Show card face
                        animation.Transformation(
                            child =
                                render.Column(
                                    cross_align = "center",
                                    main_align = "space_between",
                                    children = [
                                        render.Row(
                                            expanded = True,
                                            main_align = "center",
                                            children = [
                                                render.Image(src = card_face),
                                            ],
                                        ),
                                    ],
                                ),
                            duration = 32,
                            delay = 0,
                            keyframes = [
                                animation.Keyframe(
                                    percentage = 0.0,
                                    transforms = [animation.Translate(0, 0)],
                                ),
                                animation.Keyframe(
                                    percentage = 1.0,
                                    transforms = [animation.Translate(0, 0)],
                                ),
                            ],
                        ),

                        # Slide card left
                        animation.Transformation(
                            child =
                                render.Column(
                                    cross_align = "center",
                                    main_align = "space_between",
                                    children = [
                                        render.Row(
                                            expanded = True,
                                            main_align = "center",
                                            children = [
                                                render.Image(src = card_face),
                                            ],
                                        ),
                                    ],
                                ),
                            duration = 32,
                            delay = 0,
                            keyframes = [
                                animation.Keyframe(
                                    percentage = 0.0,
                                    transforms = [animation.Translate(0, 0)],
                                    curve = "ease_in_out",
                                ),
                                animation.Keyframe(
                                    percentage = 1.0,
                                    transforms = [animation.Translate(-22, 0)],
                                ),
                            ],
                        ),
                    ],
                ),
                render.Row(
                    expanded = True,
                    children = [
                        render.Padding(
                            child = render.Animation(children = ani_delay),  # Prevents card face from showing until flip/slide completed
                            pad = (0, 0, 1, 0),
                        ),
                        render.Column(
                            children = [
                                render.Stack(
                                    # Children listed from back to front
                                    children = [
                                        render.Column(
                                            children = [
                                                animation.Transformation(
                                                    child =
                                                        render.Column(
                                                            main_align = "start",
                                                            children = [
                                                                # Card name
                                                                render.Box(
                                                                    width = 45,
                                                                    height = 13,
                                                                    color = card_color + "25",
                                                                    child =
                                                                        render.WrappedText(
                                                                            content = card_name,
                                                                            align = "center",
                                                                            color = card_color,
                                                                            font = "CG-pixel-3x5-mono",
                                                                            linespacing = 0,
                                                                        ),
                                                                ),

                                                                # Card keywords
                                                                render.Padding(
                                                                    child =
                                                                        render.WrappedText(
                                                                            content = "\n".join(card_keywords),
                                                                            align = "center",
                                                                            color = "#fff",
                                                                            font = "tom-thumb",
                                                                            width = 45,
                                                                        ),
                                                                    pad = (0, 1, 0, 0),
                                                                ),
                                                            ],
                                                        ),
                                                    duration = 112,
                                                    delay = 0,
                                                    keyframes = [
                                                        animation.Keyframe(
                                                            percentage = 0.0,
                                                            transforms = [animation.Scale(0.0, 0.0)],
                                                        ),
                                                        animation.Keyframe(
                                                            percentage = 0.9999,
                                                            transforms = [animation.Scale(0.0, 0.0)],
                                                        ),
                                                        animation.Keyframe(
                                                            percentage = 1.0,
                                                            transforms = [animation.Scale(1.0, 1.0)],
                                                        ),
                                                    ],
                                                ),
                                            ],
                                        ),

                                        # Box that covers text
                                        animation.Transformation(
                                            child = render.Box(width = 45, height = 32, color = "#000"),
                                            duration = 240,
                                            delay = 0,
                                            keyframes = [
                                                animation.Keyframe(
                                                    percentage = 0.0,
                                                    transforms = [animation.Scale(0.0, 0.0)],
                                                ),
                                                animation.Keyframe(
                                                    percentage = 0.458333,
                                                    transforms = [animation.Scale(0.0, 0.0)],
                                                ),
                                                animation.Keyframe(
                                                    percentage = 0.4625,  # Box pops in right before text revealed
                                                    transforms = [animation.Scale(1.0, 1.0)],
                                                ),
                                                animation.Keyframe(
                                                    percentage = 0.466667,  # Box starts slide to reveal name
                                                    transforms = [animation.Translate(0, 0)],
                                                    curve = "ease_out",
                                                ),
                                                animation.Keyframe(
                                                    percentage = 0.533333,  # Box ends slide to reveal name
                                                    transforms = [animation.Translate(0, 13)],
                                                ),
                                                animation.Keyframe(
                                                    percentage = 0.625,  # Box holds for 2 seconds
                                                    transforms = [animation.Translate(0, 13)],
                                                    curve = "ease_out",
                                                ),
                                                animation.Keyframe(
                                                    percentage = 0.691667,  # Box slides to reveal keywords
                                                    transforms = [animation.Translate(0, 32)],
                                                ),
                                                animation.Keyframe(
                                                    percentage = 1.0,  # Box remains off screen until end
                                                    transforms = [animation.Translate(0, 32)],
                                                ),
                                            ],
                                        ),
                                    ],
                                ),
                            ],
                        ),
                    ],
                ),
            ],
        ),
    )

def draw_spread(back, color, maxdraw, freq):
    # Three-card spread function
    # Define variables from user choices
    card_back = back
    card_color = color
    card_max = maxdraw
    card_freq = freq

    # Determine whether to pull random cards throughout the day or only once per day
    # For throughout the day:
    if card_freq == DEFAULT_FREQ:
        # Pull three cards
        draw_pile = list(range(0, card_max + 1))  # Creates a list of all possible card indicies
        card_1 = draw_pile[random.number(0, len(draw_pile)) - 1]  # Draws first card
        draw_pile.remove(card_1)  # Removes first card from draw pile
        card_2 = draw_pile[random.number(0, len(draw_pile)) - 1]  # Draws second card
        draw_pile.remove(card_2)  # Removes second card from draw pile
        card_3 = draw_pile[random.number(0, len(draw_pile)) - 1]  # Draws third card
        # print("SPREAD - THROUGHOUT\n")  # For testing

        # For only once per day:
    else:
        if card_max == 77:  # All cards
            url_draw = URL_ALL
        else:  # Major Arcana only
            url_draw = URL_MAJOR

        res = http.get(url_draw, ttl_seconds = CACHE_TTL)

        if res.status_code != 200:
            print("Request to %s failed with status code: %d - %s" % (url_draw, res.status_code, res.body()))
            return render_error("Could not reach range_x.json\n:(")

        draw_from = res.json()
        card_1 = int(draw_from["spread"]["card1"])
        card_2 = int(draw_from["spread"]["card2"])
        card_3 = int(draw_from["spread"]["card3"])
        # print("SPREAD - ONCE A DAY\n")  # For testing

    #Define each card
    card_name1 = list(CARD_NAMES.values())[card_1]  # Gets card name (str)
    card_name2 = list(CARD_NAMES.values())[card_2]
    card_name3 = list(CARD_NAMES.values())[card_3]
    card_face1 = base64.decode(list(CARD_FACES.values())[card_1])  # Gets card face (for src)
    card_face2 = base64.decode(list(CARD_FACES.values())[card_2])
    card_face3 = base64.decode(list(CARD_FACES.values())[card_3])
    # print("MAX: " + str(card_max) + "\nC1: " + str(card_1) + ", " + card_name1 + "\nC2: " + str(card_2) + ", " + card_name2 + "\nC3: " + str(card_3) + ", " + card_name3)  # For testing

    # Send everything to renderer
    return render_spread(card_name1, card_name2, card_name3, card_face1, card_face2, card_face3, card_back, card_color)

def render_spread(name1, name2, name3, face1, face2, face3, back, color):
    # Render and display animation for three-card spread option
    # Define passed card properties
    card_name1 = name1
    card_name2 = name2
    card_name3 = name3
    card_face1 = face1
    card_face2 = face2
    card_face3 = face3
    card_back = back
    card_color = color
    card_font = "CG-pixel-3x5-mono"
    num_font = "tb-8"

    # Display the animation
    return render.Root(
        show_full_animation = True,
        child = render.Stack(
            # Children are sorted from bottom to top with 7 different children in total
            children = [
                # 1/7: Single card back
                animation.Transformation(
                    child = render.Box(
                        child = render.Image(src = card_back),
                    ),
                    duration = 240,  # Durations must be 240, the entire 15s length of the animation (at 16 fps)
                    delay = 0,  # Delays must be 0, because delays occur at start AND end of animations (why?); thus render.Sequence can't be used
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                        animation.Keyframe(
                            # Show for 1s
                            percentage = 0.0667,
                            transforms = [animation.Translate(0, 0)],
                            curve = "ease_out",
                        ),
                        animation.Keyframe(
                            # Move card up for 1s
                            percentage = 0.1333,
                            transforms = [animation.Translate(0, -32)],
                        ),
                        animation.Keyframe(
                            # Keep card out
                            percentage = 1.0,
                            transforms = [animation.Translate(0, -32)],
                        ),
                    ],
                ),

                # 2/7: Card 1 face
                animation.Transformation(
                    child = render.Box(
                        child = render.Image(src = card_face1),
                    ),
                    duration = 240,
                    delay = 0,
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, -32), animation.Scale(0.0, 1.0)],
                        ),
                        animation.Keyframe(
                            # Keep card hidden for 1.5s
                            percentage = 0.1000,
                            transforms = [animation.Translate(0, -32), animation.Scale(0.0, 1.0)],
                            curve = "ease_out",
                        ),
                        animation.Keyframe(
                            # Deal and flip card for 1.5s
                            percentage = 0.2000,
                            transforms = [animation.Translate(-23, 0), animation.Scale(1.0, 1.0)],
                        ),
                        animation.Keyframe(
                            # Keep card in place for rest of animation
                            percentage = 1.0,
                            transforms = [animation.Translate(-23, 0), animation.Scale(1.0, 1.0)],
                        ),
                    ],
                ),

                # 3/7: Card 2 face
                animation.Transformation(
                    child = render.Box(
                        child = render.Image(src = card_face2),
                    ),
                    duration = 240,
                    delay = 0,
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, -32), animation.Scale(0.0, 1.0)],
                        ),
                        animation.Keyframe(
                            # Keep card hidden for 3s
                            percentage = 0.2000,
                            transforms = [animation.Translate(0, -32), animation.Scale(0.0, 1.0)],
                            curve = "ease_out",
                        ),
                        animation.Keyframe(
                            # Deal and flip card for 1.5s
                            percentage = 0.3000,
                            transforms = [animation.Translate(0, 0), animation.Scale(1.0, 1.0)],
                        ),
                        animation.Keyframe(
                            # Keep card in place for rest of animation
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0), animation.Scale(1.0, 1.0)],
                        ),
                    ],
                ),

                # 4/7: Card 3 face
                animation.Transformation(
                    child = render.Box(
                        child = render.Image(src = card_face3),
                    ),
                    duration = 240,
                    delay = 0,
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, -32), animation.Scale(0.0, 1.0)],
                        ),
                        animation.Keyframe(
                            # Keep card hidden for 4.5s
                            percentage = 0.3000,
                            transforms = [animation.Translate(0, -32), animation.Scale(0.0, 1.0)],
                            curve = "ease_out",
                        ),
                        animation.Keyframe(
                            # Flip card for 0.5s
                            percentage = 0.4000,
                            transforms = [animation.Translate(22, 0), animation.Scale(1.0, 1.0)],
                        ),
                        animation.Keyframe(
                            # Keep card in place for rest of animation
                            percentage = 1.0,
                            transforms = [animation.Translate(22, 0), animation.Scale(1.0, 1.0)],
                        ),
                    ],
                ),

                # 5/7: Card name 1
                animation.Transformation(
                    child = render.Row(
                        children = [
                            render.Box(
                                height = 11,
                                width = 10,
                                color = "#00000099",
                                child = render.WrappedText(
                                    content = "1.",
                                    width = 10,
                                    align = "center",
                                    font = num_font,
                                    color = card_color,
                                ),
                            ),
                            render.Box(
                                height = 11,
                                width = 54,
                                color = "#00000099",
                                child = render.WrappedText(
                                    content = card_name1,
                                    align = "center",
                                    font = card_font,
                                    color = card_color,
                                ),
                            ),
                        ],
                    ),
                    duration = 240,
                    delay = 0,
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(-64, 0)],
                        ),
                        animation.Keyframe(
                            # Keep name hidden for 7.5s
                            percentage = 0.5000,
                            transforms = [animation.Translate(-64, 0)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            # Reveal over 1s
                            percentage = 0.5667,
                            transforms = [animation.Translate(0, 0)],
                        ),
                        animation.Keyframe(
                            # Keep name in place for rest of animation
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),

                # 6/7: Card name 2
                animation.Transformation(
                    child = render.Row(
                        children = [
                            render.Box(
                                height = 11,
                                width = 10,
                                color = "#00000099",
                                child = render.WrappedText(
                                    content = "2.",
                                    width = 10,
                                    align = "center",
                                    font = num_font,
                                    color = card_color,
                                ),
                            ),
                            render.Box(
                                height = 11,
                                width = 54,
                                color = "#00000099",
                                child = render.WrappedText(
                                    content = card_name2,
                                    align = "center",
                                    font = card_font,
                                    color = card_color,
                                ),
                            ),
                        ],
                    ),
                    duration = 240,
                    delay = 0,
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(-64, 11)],
                        ),
                        animation.Keyframe(
                            # Keep name hidden for 8.5s
                            percentage = 0.5667,
                            transforms = [animation.Translate(-64, 11)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            # Reveal over 1s
                            percentage = 0.6333,
                            transforms = [animation.Translate(0, 11)],
                        ),
                        animation.Keyframe(
                            # Keep name in place for rest of animation
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 11)],
                        ),
                    ],
                ),

                # 7/7: Card name 3
                animation.Transformation(
                    child = render.Row(
                        children = [
                            render.Box(
                                height = 11,
                                width = 10,
                                color = "#00000099",
                                child = render.WrappedText(
                                    content = "3.",
                                    width = 10,
                                    align = "center",
                                    font = num_font,
                                    color = card_color,
                                ),
                            ),
                            render.Box(
                                height = 11,
                                width = 54,
                                color = "#00000099",
                                child = render.WrappedText(
                                    content = card_name3,
                                    align = "center",
                                    font = card_font,
                                    color = card_color,
                                ),
                            ),
                        ],
                    ),
                    duration = 240,
                    delay = 0,
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(-64, 22)],
                        ),
                        animation.Keyframe(
                            # Keep name hidden for 9.5s
                            percentage = 0.6333,
                            transforms = [animation.Translate(-64, 22)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            # Reveal over 1s
                            percentage = 0.7000,
                            transforms = [animation.Translate(0, 22)],
                        ),
                        animation.Keyframe(
                            # Keep name in place for rest of animation
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 22)],
                        ),
                    ],
                ),
            ],
        ),
    )

def render_error(code):
    # Display if an error is received
    return render.Root(
        render.Column(
            main_align = "center",
            cross_align = "center",
            children = [
                render.WrappedText(
                    color = "#ff00ff",
                    content = "Tarot Card\nerror",
                    font = "CG-pixel-4x5-mono",
                    align = "center",
                ),
                render.Box(
                    width = 64,
                    height = 1,
                    color = "#ff00ff",
                ),
                render.Box(
                    width = 64,
                    height = 3,
                    color = "#000",
                ),
                render.WrappedText(
                    content = code,
                    font = "tom-thumb",
                    align = "center",
                ),
            ],
        ),
    )

def get_schema():
    # User options
    return schema.Schema(
        version = "1",
        fields = [
            # Select card back
            schema.Dropdown(
                id = "choice_back",
                name = "Card back",
                desc = "Choose a card back",
                icon = "paintRoller",
                options = [
                    schema.Option(display = "Style A", value = "A"),
                    schema.Option(display = "Style B", value = "B"),
                    schema.Option(display = "Style C", value = DEFAULT_BACK),
                    schema.Option(display = "Style D", value = "D"),
                ],
                default = DEFAULT_BACK,
            ),

            # Select card name color
            schema.Color(
                id = "choice_color",
                name = "Card name color",
                desc = "Choose a color for card names",
                icon = "palette",
                palette = [
                    DEFAULT_COLOR,  # purple
                    "#f9e890",  # yellow
                    "#90f9aa",  # green
                    "#f99090",  # red
                    "#90c6f9",  # blue
                ],
                default = DEFAULT_COLOR,
            ),

            # Select single card draw or three-card spread
            schema.Dropdown(
                id = "choice_draw",
                name = "Card draw",
                desc = "Choose to draw only one card or a spread of three cards",
                icon = "layerGroup",
                options = [
                    schema.Option(display = "Draw only one card", value = DEFAULT_DRAW),
                    schema.Option(display = "Draw three-card spread", value = "spread"),
                ],
                default = DEFAULT_DRAW,
            ),

            # Select card range
            schema.Dropdown(
                id = "choice_max",
                name = "Card range",
                desc = "Choose to draw from all cards or only the Marjor Arcana",
                icon = "handSparkles",
                options = [
                    schema.Option(display = "Pull from all cards", value = DEFAULT_MAX),
                    schema.Option(display = "Pull from Major Arcana only", value = "21"),
                ],
                default = DEFAULT_MAX,
            ),

            # Select daily or per display
            schema.Dropdown(
                id = "choice_freq",
                name = "Draw frequency",
                desc = "Choose to draw random cards throughout the day or only once per day",
                icon = "shuffle",
                options = [
                    schema.Option(display = "Draw throughout the day", value = DEFAULT_FREQ),
                    schema.Option(display = "Draw only once per day", value = "once"),
                ],
                default = DEFAULT_FREQ,
            ),
        ],
    )
