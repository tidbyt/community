"""
Applet: Hourly Temperature Graph
Summary: Date, temperature, and hourly temperature graph
Description: Display date and current temperature along with a graph of temperature each hour
Author: D. Segel
"""

load("http.star", "http")
load("humanize.star", "humanize")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")
# load("cache.star", "cache")

# config
#API_KEY = "11aa1b96e7f013ad68a0416851844b23"
API_KEY = "66c21f4a92134ebb929c4304bf82a900"

DEFAULT_DAY_COLOR = "#334455"
DEFAULT_DATE_COLOR = "#33F8FF"
DEFAULT_MONTH_COLOR = "#33F8FF"

NOW_LABEL_COLOR = "#fff"
NOW_TEMP_COLOR = "#fff"

MIN_LABEL_COLOR = "#00f"
MIN_TEMP_COLOR = "#00f"

MAX_LABEL_COLOR = "#f00"
MAX_TEMP_COLOR = "#f00"

DEBUG = True
LABEL_FONT = "CG-pixel-3x5-mono"
TTL_SECONDS = 60
LOCATION = {
    "lat": 38.5449,
    "lng": -121.7405,
    "locality": "Davis, CA",
    "timezone": "America/New_York",
}
POLLING_INTERVAL = "15"

max_bar_height = 15

url_hi_low = "https://api.openweathermap.org/data/3.0/onecall/day_summary?units=imperial&lat={}&lon={}&date=2023-09-17&appid={}".format(LOCATION["lat"], LOCATION["lng"], API_KEY)
url_current_temp_str = "https://api.openweathermap.org/data/3.0/onecall?units=imperial&lat=38.555&lon=-121.7631&exclude=minutely,hourly,daily,alerts&appid={}".format(API_KEY)
url_history = "https://api.openweathermap.org/data/3.0/onecall/timemachine?units=imperial&lat=38.555&lon=-121.7631&dt="

config = {"day_color": "#fff"}

def main(config):
    """Main function that renders the Tidbyt display

    Args:
        config: configuration values
    Returns:
        Pixlet Root element
    """
    api_key = config.get("api_key", None)
    if api_key == None:
        print("fail")
    history_data = []

    day_color = config.str("day_color", DEFAULT_DAY_COLOR)
    date_color = config.get("date_color", DEFAULT_DATE_COLOR)
    month_color = config.get("month_color", DEFAULT_MONTH_COLOR)
    now_label_color = config.get("now_label_color", NOW_LABEL_COLOR)
    now_temp_color = config.get("now_temp_color", NOW_TEMP_COLOR)
    min_label_color = config.get("min_label_color", MIN_LABEL_COLOR)
    min_temp_color = config.get("min_temp_color", MIN_TEMP_COLOR)
    max_label_color = config.get("max_label_color", MAX_LABEL_COLOR)
    max_temp_color = config.get("max_temp_color", MAX_TEMP_COLOR)
    # timezone = config.get("timezone") or "America/Los_Angeles"

    location = config.get("location", LOCATION)
    print(location["timezone"])
    timezone = location["timezone"]
    print(timezone)
    local_time = time.now().in_location(timezone)
    date_day = humanize.time_format("EEE", time.now())
    date_month = humanize.time_format("MMM", time.now())
    date_date = humanize.time_format("dd", time.now())

    weather_data_high_low = get_data("hi_low", 0)
    weather_data_current = get_data("current", 0)

    min_temp_str = humanize.ftoa(weather_data_high_low["temperature"]["min"], 0)
    max_temp_str = humanize.ftoa(weather_data_high_low["temperature"]["max"], 0)
    current_temp_str = humanize.ftoa(weather_data_current["current"]["temp"], 0)

    min_temp_float = weather_data_high_low["temperature"]["min"]
    max_temp_float = weather_data_high_low["temperature"]["max"]
    current_temp_float = weather_data_current["current"]["temp"]

    epoch_time = time.now().unix
    midnight_delta = local_time.minute * 60 + local_time.second
    midnight_epoch = epoch_time - midnight_delta
    current_hour = local_time.hour + 1

    for hour in range(current_hour):
        epoch = midnight_epoch + hour * 3600
        weather_data_history = get_data("history", epoch)
        history_temp = weather_data_history["data"][0]["temp"]
        if current_temp_float < min_temp_float:
            min_temp_float = current_temp_float
        if current_temp_float > max_temp_float:
            max_temp_float = current_temp_float
        mapped_temp = map(history_temp, min_temp_float - 10, max_temp_float + 3, 0, max_bar_height)

        print(local_time, hour, history_temp, mapped_temp)
        history_data.extend([(hour, mapped_temp)])

    print("Lo: {}, Hi: {}, current: {}".format(min_temp_str, max_temp_str, current_temp_str))
    return render.Root(
        # delay = 200,
        child = render.Row(
            children = [
                # LEFT COLUMN
                render.Column(
                    main_align = "center",
                    # cross_align = "start",
                    children = [
                        render.Box(width = 19, height = 1, color = "#000"),
                        render.Padding(
                            pad = (2, 3, 0, 0),
                            child = render.Text(date_day, color = day_color),
                        ),
                        render.Padding(
                            pad = (3, 6, 0, 0),
                            child = render.Text(content = min_temp_str + "°", color = min_temp_color),
                        ),
                        render.Padding(
                            pad = (3, 0, 0, 0),
                            child = render.Text(content = "Low", color = min_label_color, font = LABEL_FONT),
                        ),
                    ],
                ),
                # MIDDLE COLUMN
                render.Column(
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Box(width = 26, height = 1, color = "#000"),  # column 2, middle teal box
                        render.Row(
                            children = [
                                render.Column(
                                    children = [
                                        render.Text(content = "Now", color = now_label_color),
                                        render.Text(content = "" + current_temp_str + "°", color = now_temp_color),
                                    ],
                                ),
                            ],
                        ),
                        render.Plot(data = history_data, width = 24, height = 15, color = "#ff0", x_lim = (0, 23), y_lim = (0, 15), fill = True),
                    ],
                ),
                # RIGHT COLUMN
                render.Column(
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Text(date_date, color = date_color),
                        render.Text(date_month, color = month_color),
                        render.Box(width = 19, height = 2, color = "#000"),
                        render.Padding(
                            pad = (1, 0, 0, 0),
                            child = render.Text(content = max_temp_str + "°", color = max_temp_color),
                        ),
                        render.Text(content = "High", color = max_label_color, font = LABEL_FONT),
                    ],
                ),
            ],
        ),
    )
    # delay = 1000

polling_interval_options = [
    schema.Option(
        display = "5 minutes",
        value = "5",
    ),
    schema.Option(
        display = "10 minutes",
        value = "10",
    ),
    schema.Option(
        display = "15 minutes",
        value = "15",
    ),
    schema.Option(
        display = "30 minutes",
        value = "30",
    ),
    schema.Option(
        display = "60 minutes",
        value = "60",
    ),
]

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "api_key",
                name = "OpenWeather API Key",
                desc = "API Key for OpenWeathermap",
                icon = "user",
                default = API_KEY,
            ),
            schema.Color(
                id = "day_color",
                name = "Day Color",
                desc = "Color of the Day text",
                icon = "brush",
                default = DEFAULT_DAY_COLOR,
            ),
            schema.Color(
                id = "date_color",
                name = "Date Color",
                desc = "Color of the Date text",
                icon = "brush",
                default = DEFAULT_DATE_COLOR,
            ),
            schema.Color(
                id = "month_color",
                name = "Month Color",
                desc = "Color of the Month text",
                icon = "brush",
                default = DEFAULT_MONTH_COLOR,
            ),
            schema.Color(
                id = "now_label_color",
                name = "Now Label Color",
                desc = "Color of the Now text",
                icon = "brush",
                default = NOW_LABEL_COLOR,
            ),
            schema.Color(
                id = "min_label_color",
                name = "Low Label Color",
                desc = "Color of the Low text",
                icon = "brush",
                default = MIN_LABEL_COLOR,
            ),
            schema.Color(
                id = "max_label_color",
                name = "High Label Color",
                desc = "Color of the High text",
                icon = "brush",
                default = MAX_LABEL_COLOR,
            ),
            schema.Color(
                id = "now_temp_color",
                name = "Now Temp Color",
                desc = "Color of the Now temp",
                icon = "brush",
                default = NOW_LABEL_COLOR,
            ),
            schema.Color(
                id = "min_temp_color",
                name = "Low Temp Color",
                desc = "Color of the Low temp",
                icon = "brush",
                default = MIN_LABEL_COLOR,
            ),
            schema.Color(
                id = "max_temp_color",
                name = "High Temp Color",
                desc = "Color of the High temp",
                icon = "brush",
                default = MAX_LABEL_COLOR,
            ),
            schema.Location(
                id = "location",
                name = "Location",
                desc = "Location for weather source",
                icon = "locationDot",
            ),
            schema.Dropdown(
                id = "polling_interval",
                name = "Polling Interval",
                desc = "How often to retrieve the current temperature",
                icon = "clock",
                default = polling_interval_options[2].value,
                options = polling_interval_options,
            ),
        ],
    )

def get_data(type, epoch):
    """Function that calls openweathermap.com API

    Args:
        type: type of API call to make
        epoch: the epoch for midnight of the current day
    Returns:
        Pixlet Root element
    """
    polling_interval = int(config.get("polling_interval", POLLING_INTERVAL)) * 60
    url = ""
    if type == "hi_low":
        url = url_hi_low
    elif type == "current":
        url = url_current_temp_str
    elif type == "history":
        url = url_history + str(epoch) + "&appid={}".format(API_KEY)
    else:
        print("Invalid type call in get_data()")

    res = http.get(url, ttl_seconds = polling_interval)  # cache for polling_interval seconds
    if res.status_code != 200:
        fail("GET %s failed with status %d: %s", url, res.status_code, res.body())

    return res.json()

def map(x, in_min, in_max, out_min, out_max):
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min
