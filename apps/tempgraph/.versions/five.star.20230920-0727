"""
Applet: Hourly Temperature Graph
Summary: Date, temperature, and hourly temperature graph
Description: Display date and current temperature along with a graph of temperature each hour
Author: D. Segel
"""

load("encoding/json.star", "json")
load("http.star", "http")
load("render.star", "render")
load("time.star", "time")
# load("cache.star", "cache")
load("math.star", "math")
load("humanize.star", "humanize")

dayColor = "#33F8FF"
dateColor = "#33F8FF"
monthColor = "#33F8FF"

nowLabelColor = "#fff"
nowTempColor = "#fff"

minLabelColor = "#00f"
minTempColor = "#00f"

maxLabelColor = "#f00"
maxTempColor = "#f00"

DEBUG = True
TIME_FONT = "6x13"
LOW_HIGH_FONT = "5x8"
WEATHER_FONT = "CG-pixel-3x5-mono"
TTL_SECONDS = 60
DEFAULT_LOCATION = {
    "lat": 38.5449,
    "lng": -121.7405,
    "locality": "Davis, CA",
    "timezone": "America/Los_Angeles",
}
appID = "11aa1b96e7f013ad68a0416851844b23"
maxBarHeight = 15

url_hi_low = "https://api.openweathermap.org/data/3.0/onecall/day_summary?units=imperial&lat=38.555&lon=-121.7631&date=2023-09-17&appid={}".format(appID)
url_currentStr = "https://api.openweathermap.org/data/3.0/onecall?units=imperial&lat=38.555&lon=-121.7631&exclude=minutely,hourly,daily,alerts&appid={}".format(appID)
url_history = "https://api.openweathermap.org/data/3.0/onecall/timemachine?units=imperial&lat=38.555&lon=-121.7631&dt="

def get_data(type, epoch):
    if type == "hi_low":
        url = url_hi_low
    elif type == "current":
        url = url_currentStr
    elif type == "history":
        url = url_history + str(epoch) + "&appid={}".format(appID)
    else:
       print("Invalid type call in get_data()")
       return

    res = http.get(url) # cache for 1 minute 
    if res.status_code != 200:
        fail("GET %s failed with status %d: %s", url, res.status_code, res.body())
    return res.json()

def map(x, in_min, in_max, out_min, out_max):
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min

def renderTemps(low, high, currentStr, now, data, day, month, date):
    return render.Root(
        # delay = 200,
        child = render.Row(
            children = [
                render.Column(                                                            # LEFT COLUMN
                    main_align = "center",
                    cross_align = "center",
                        children = [
                          render.Box(width=19, height=3, color="#000"),
                          render.Text(day, color=dayColor),
                          render.Box(width=19, height=7, color="#000"),
                          render.Text(content = low + "°", color=minTempColor),
                          render.Text(content = "Low", color=minLabelColor, font=WEATHER_FONT),
                        ],
                 ),
                 render.Column(                                                            # MIDDLE COLUMN
                    main_align = "center",
                    cross_align = "center",
                    children = [
                        render.Row(
                            children = [
                                render.Column(
                                    children = [
                                     render.Text(content = "Now", color=nowLabelColor),
                                     render.Text(content = "" + currentStr + "°", color=nowTempColor),
                                    ]
                              ),
                          ],
                        ),
                        render.Box(width=26, height=1, color="#000"), # column 2, middle teal box
                        render.Plot(data = data, width = 24, height = 15, color = "#ff0",
                                    x_lim = (0, 23), y_lim = (0, 15), fill = True,),
                    ],
                 ),
                 render.Column(                                                            # RIGHT COLUMN
                    main_align = "center",
                    cross_align = "center",
                        children = [
                          render.Text(date, color=dateColor),
                          render.Text(month, color=monthColor),
                          render.Box(width=19, height=2, color="#000"),
                          render.Text(content = high + "°", color=maxTempColor),
                          render.Text(content = "High", color=maxLabelColor, font=WEATHER_FONT),
                        ],
                 ),
            ],
        ),
    )

def main(config):
    historyData = []
    timezone = config.get("timezone") or "America/Los_Angeles"
    now = time.now().in_location(timezone)
    day = humanize.time_format("EEE", time.now())
    dateMonth = humanize.time_format("MMM", time.now())
    dateDate = humanize.time_format("dd", time.now())

    weatherDataHighLow = get_data("hi_low", 0)
    weatherDatacurrent = get_data("current", 0)

    minTempStr = humanize.ftoa(weatherDataHighLow['temperature']['min'], 0)
    maxTempStr = humanize.ftoa(weatherDataHighLow['temperature']['max'], 0)
    currentStr = humanize.ftoa(weatherDatacurrent['current']['temp'], 0)

    minTempFloat = weatherDataHighLow['temperature']['min']
    maxTempFloat = weatherDataHighLow['temperature']['max']
    currentFloat = weatherDatacurrent['current']['temp']
    
    epoch_time = time.now().unix
    midnight_delta = now.hour * 3600 + now.minute * 60 + now.second
    midnight_epoch = epoch_time - midnight_delta
    currentHour = now.hour + 1

    for hour in range(currentHour):
        epoch = midnight_epoch + hour * 3600 
        weatherDataHistory = get_data("history", epoch)
        historyTemp = weatherDataHistory['data'][0]['temp']
        if currentFloat < minTempFloat:
            minTempFloat = currentFloat
        if currentFloat > maxTempFloat:
            maxTempFloat = currentFloat
        mappedTemp = map(historyTemp, minTempFloat - 10, maxTempFloat + 3, 0, maxBarHeight)
        # print(hour, historyTemp, mappedTemp)
        historyData.extend([(hour, mappedTemp )])

    print("Lo: {}, Hi: {}, current: {}".format(minTempStr, maxTempStr, currentStr))
    return renderTemps(minTempStr, maxTempStr, currentStr, now, historyData, day, dateMonth, dateDate)
    delay = 1000