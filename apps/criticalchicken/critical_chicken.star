"""
Applet: Critical Chicken
Summary: Gaming news
Description: Shows the latest post from CriticalChicken.com.
Author: Critical Chicken
"""

load("animation.star", "animation")
load("encoding/base64.star", "base64")
load("http.star", "http")
load("render.star", "render")
load("schema.star", "schema")

# IMAGES

# TITLETAGS

# Ace Attorney
imgTagAceAttorney = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJCAMAAAC14NpIAAAAbFBMVEX///8qhLYvibsAAAAXRF0gXX8ocZkjZ4wleqkcWnsfY4gdVXUia5Qlc58sgK8ogrQreqUaUnEpeKQnfKsgapIdW30laI4jcp0mb5gbWHoeYYchXoAgXoAaTWkYSmYVQls0jsAxi70ugrElf7Gvy9mtAAAA2ElEQVR42p2Q25KDIBBEG8YIQS4qbmSvWd3//8dtqOTBKp/ycGq66WKYAX923BOxS7+ntI/W9rdlJbbp/sm6jqNN25aO/MI6mEAcMKts4DwARzw165M3DPBKa3VkQw9h1Ai6UBiBzMRQf7eg1S/cUeqVIwk3AB0mGYCgDVBnMZoY3BmAQatFIPGswQcEP3xi4rvK0TgDp4hHx0BIxxZS11RnKywY4ATS/sDT+MJdSa6H9FMDwaOcNtglSIySo0jWsZrMUR9UPzeomZ+tsFXxOgnv18vl+jqf/618D5dgcWwjAAAAAElFTkSuQmCC
""")

# Breaking news
imgTagBreakingNews = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJAgMAAAD/UMLpAAAACVBMVEUAAAAAAAAAAACDY+nAAAAAA3RSTlMA/1LsNwl0AAAARUlEQVR42oXKwQmAQAxE0djBDKSgBMZ7AlZplbosKOhh3/Hz7cfdoX2LapQNJHQzJZ/jKCnUiPcYIQvzoEtKU3Mea+fHBWf2FbDyLgaRAAAAAElFTkSuQmCC
""")

# Dungeons + Dragons
imgTagDungeonsAndDragons = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJCAMAAAC14NpIAAADAFBMVEX///8AAACuYA8Kss5zIXIwHkEFXn+yzUnLNTc/pD5zLxQBiaIuaScjESqslSR8TQh4jzhcbLmgKy0APVRpbxY4SJC2RSwtjLuOrjsEl3VeFz0yjzmBNpLNryoNxN4lc5cEZk/pyTBGJFQ9H0o8Dzi6fxGdiSCNjCXJiBqTfxhddjCKWAdvehmLVweGUQ2qQSiZNimbQyNGk8pfbR+GSwtYJGJXJGJXJWSISQ1NZidbJV1WJV1VI2EhjMLKQzcNho0KcYcER19RYaQDRmBUX6lSHFduHE4pbY5aHE5sHU2Mu0iasC+PuViQuliUsU+Yskh2u0gHcYnizS4GdYmqLzMHeYwDZk0sc5GIrlM1P4GNLiWOLSUFeYyHqkhsHB1hFkCOLiaIKSuIKiyvpSdgF0GeKyyZLDA1fKoikk/TqSyMJyyMJys+gDKANY+kMDWjKyx5RApMbaAwjjk+UX6KJSsANkpFTId7RwstSII5THQAlHcLlm5kbRdgbSFcGxmwkCfZlBW6QyXFniqPQB5Og7RghMaAPhIkFjAnQ2wnFDAkFS8jFi8jFjB+TwZ+Twd1QAl9NxqbpiKWoyMGfZoEeqAZfKsAPFKjKy1wSAU6di6QmB+NmB+KliB5jjd2jjeKJ2klJEo0JE65Pi+oPS7roh+ONB+INBoHjq4oFC8oFDAtEi8ATGh8TQcrEi8lEy0jFC4kEiuPpkCXpjKZpSUycysBg6iULHZdFkUtJlGtlCS6OT2An0IllVYGi7F7IiFuRQYkESkjEiolbisqbysqcCsBh6ABh50dg64Sws6+MTS9Nz2rNTLGQDXFQDQXfq6FKylpLhZmKRJnKRFqIxdvIh5kIxZsHhxnIBiPGV6SH3S/NTzBQDkPaELFvzNnKBJoGkZCUoVxE0aSIFotNWrHPUF7Lx4AbJp8Lx99KR2wwUEJwt2bH2PIPULCODMEc5M2oUc9pEA2oT/JOD+kMDbO3CtBH0y1wSZCH0zPOkLOOkLLNz/LNTihsz9FIE1HIE1IHEydtoDFAAAB9ElEQVR42h3FBVRTARiG4fffLbudXbhZWKATFVsZoGJ3d2N3NwaK3TpMprMLuwO7uzCxRcUW9B6+8z3n5fzXJin+nPtw6eKaCZZ14+12u8VeoNEbw2hbJyHBqFc/JOZtXuWjfjZb98lTMtby+uaVmOTvUFXVFex07VWdThd9od9iWtEafOwW8IY8ndlxEOZ+3wV1FSVmPuj5YECNoWgFNajoT5ATnriCQaUbwhFucgOhBCLeSDqEYqbliIRUpaEHoaYp1uRGREOwmdoj4iIT7bjNHa7zmCXMZhYUYgxlyMIyYWcLwENmFoEMAo6zETdb2ISNp0Kwi66M5TW3SMU10nOUzch+KlCc0ayYJ2QXxMMQqiOMME0nLW6Osd2sLVpQKQ1yQZA5XKW82bIwzkwf0rAb5NAZWaCDePAwjUjCBNFMbrZiA1EpJXLgy31Z6yOTxGIR8zLxrxi1ZaDkEukx8nSUEiWi67JQhss+0TTzph8SIHdF1FCs1gfvX/z+9bOK1WpJnr1Iz0eGYTT4HB+f8tOoHKn3KIpy+NXlyr6+WVuu1pLn5edwqPfePVNDc4fyMi7uSqeOg3v17rB+w9T+ERHDSnoXLVp4ZYZVS0+cPPWwWX5d1xs3bVOteWBg7PPIbeHhYTNnaIlJ/wKiu+QMquRXzvEfFp+ZjZerjnQAAAAASUVORK5CYII=
""")

# E3's future
imgTagE3sFuture = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJCAMAAAC14NpIAAADAFBMVEX///8AAAA8QEUsIxQXEwpjcogtMDFJV2qkrbkZHR5DOiggJykuKCENDAcfGxNWRy51g5jI3f0LCggLCgMMCwoPDQUdHigNCggMCwgNCgcODQg8NiwwNDkuMDY/NisuNDwwMjYmMDctMjcwMzwrMTstMjk4XmshIR4hISMlIyMkJSgfHx8lJiUfHyAoJikiIiAiIiEeLjA+WmkpJR0fHBUkJSUtJxssJxwtJxwpJxwtJh0uJx9VRzBRRzEpW2pQRTBQRzAsWmlHT15PQzBNQzRMQzRNQjRLQi1HPSlHPipGPSohICEbGBIgHxogHyMaGBUgICAhHxsgHhwwKhwiHRUhHhghHBUjHRVAOCkxKR0wKR0XKy9BOCYfKS0gGxUyKh0yKh8gGhMgGxQhGxMtKiUzKiE0LB00Kxw1LR9zhqARGh4aKTEXGhweFxEeFw4dGBEaGBASGhsVGhwbGhRkqbqFkKwXFxkVGBgQDgsoKSwaGRQcGRM2LiArKCMdGhQfGRIODw8PDwwNDAoRDwYbIiMPDQofISEODQkODAcODg8yMzUpLzYrLzgrLzY6MyYwMTM0Lyg0MSgwMTUxMTYxLik4MSk0LSQ1LiVPXXBGXWxNWm00ZWskKC8mKCkmJyclJikkJiomJiscHx0ZICAdHyAcHyIcICEiJikdHR8hJigaHh4gJigcGxccGxocGxYbHBgdGxYgJSYdHBkrJyJFPCtFOilFPCpDOStDOSlCOScZGBMkKSknKi0sLSk2LiI1LiIPDgwVDQMfIyEQDggQDQcPDghZYm1MU2BLVGIbHB0aHB8bGxwZGhwuYXEeGBFIUV9JUV4YGBoqKSwrKykoKzIuLCcrKysuLCiNob2Po8MTHCAREAqyv8wQDgoRDwk2PUw3PkgQDg4SDgkRDgk7bHo9bH1PV2VNVWdMVWYuZnkYGBYZFxIaFhMlKy0rLikrLiwTEAkREhMXJCgRDw4QEhISEAwREAwUEAo4MCM4MCJDZ3ovKyAXGRkYGRtQiJEgKzEUWKR1AAACOklEQVR42g3DB1yMcRwH4O/vvf+bkRHZpVPGKenw5hCJcyS8iLszMxKZV1aDrOxS2TPZW2a2ZF726uzR2eN9cW+kbD2fzwPPn2v0bW/8/bDO+dOpPRpN87EzDwi/3PWc9bLEFNPAe0weJ03xPxk1OMLPz+7yiG8cElisK13JqiohVXbNwGPgDYDXCPMFUtbvByScRU8Ap6FDFsBYyWGpJ/ouy4/nHvJffKUnrpqnk1VnhgiiougxGjSJCO0xAESlVu8AzUIVPCPQIgjIAYGBjGWPdglx43qcy+WXW5jD4drKZVUCx3H6ujxigAbNQGPIi8C5jHIHFCRCFCGkwQfTAGoNjGgXGKzLq//cwaz6ckbmYFWnb6pj527nV3PHb5CTmuDsad9N4K0pIG/EQRChElAP6SDoQJHBP2YU2d3DzZaIt+q7fvJsKUrZaL/qr9V0hwh8BmjXQU+A9JwNajuBVCJa5BAoBTL6ASMHySyc54evXOHRMTB3rdXbEp1Y2GuD3McsQyQKI/oXNqeAaEtT21JyykgisyBQ8eKG9N6LZDpCpJ1606LleTePToagikEG/p2qQhzbp5Wq15gLk3ilUXaaLdl+vqDM9s2ZtqT7eycKRqFl/9Ts+Nq3bBdUAcez8oTwod2kTJ/DxwyGDm06Ry7RJ/RmcvSDrq5fY2CWpEOhodvU9nmx42O/KRO2flQKWbRJVJn+XL+TfO1iIZMVRfpec/4L5eWCWswYoJKZJp1dKv+qqMnOmIXKf/KE0X8UIYYlAAAAAElFTkSuQmCC
""")

# Error
imgTagError = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJFBMVEVqaWlcW1tjYmJxcHD///9OTU1VVFQAAABGRkY/Pz84ODhNTEwFXEObAAAAXUlEQVR42mNgFBJkEGRmAmJjrIBBxNUlzSUpJc0lAYeClAp3D3dXd093J1wKPFwqXCq8vFyKcJvg6e7h5enuiNMNHh4ebiVlHrgUsBcBQQE7Q1EBDgXGBADDbgIAACkYT3okuIqrAAAAAElFTkSuQmCC
""")

# Exclusive
imgTagExclusive = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJAgMAAAD/UMLpAAAACVBMVEUAAAAAAAAAAACDY+nAAAAAA3RSTlMA/1LsNwl0AAAANklEQVR42mPAACIuAo4CgYIicAEBFxdHQUZBAYQKAQdHAUc0FQKCLALIZgQ4OrIgVBAGq9AAAIW6EFcBRW+ZAAAAAElFTkSuQmCC
""")

# Feature
imgTagFeature = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJFBMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAACJ3+6SAAAADHRSTlMQMCBAAP9QYP+AcFLYzN9EAAAAdklEQVR42mNgFBJkUGA0VFJSFGAUcMEEDKJhocLBoqGppaXBpkHYFJi2R6S2WkSkTp3aWtqEVUF4aGmocbDp1KkRpdhNaIsobTUOFp26tHUpVhNEBYH2CwZyRJiWYjeBg6FDQ4OhwaGBQ0OjAZsCFwKAYTcBAAC15F5A2+Mq8wAAAABJRU5ErkJggg==
""")

# First impressions
imgTagFirstImpressions = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJFBMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAACJ3+6SAAAADHRSTlMQMCAAQP9QYID/cFJDMoEJAAAAzklEQVR42oWNMW4CMRBFvXIadyxZF+kiJ812i5YDRAkuKIM8zEzquOAAHGF7s5JBPsCegssxi+j5T/rTPP1R1dLVulo2i845V6sHTr1Xi67Wfa/sHuHbB9itkBA2QiPETfDhEz5E8BfiwGNOawJiFHyxJU55yrHoWUCCU/7yP2tigjNc4C20IQ6SQ7gLZ1nY7maBiF/4j5vc5OM0TMN/nl/YGnEPyb6uEPFXCjxb9lv2x8jzglHjOBZtdCc3SZU2mWRUMm2behH6J1HXJ7kBNUBfBhUD93YAAAAASUVORK5CYII=
""")

# #ForTheGaymers
imgTagForTheGaymers = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJCAMAAAC14NpIAAABgFBMVEX///8AAAB1B4f/iwAAgCYATf/WAwP/7QCtXwAAVxoANK2toQDPwABPBVyZAALPcgAAP89/dwAAcCHfzwAAJn+flAB/RgC/aQDv3gDvgwCzLgEAaB8AQ98APhtVGqcAYBwAOr+5AgLHAwPkAwMAZJoAeCQ4E3RyAQHvhACtiQDvggCvhgDddADfegDfeQAAQt4AUyerAgLtMwKPTwCTHQGjvwtziQnCMAJgWQDf0AAAQBMAQFq/agAAQVSPhQADcCDv3wBWFZgAQcDfsQATOMt/dgCBkAe/tAC/sgC/tgCcBQKOAgKcAgLPvgC+ZAAAMJ8AUBibAgKvaADPxAATTxMASBWfVwAAN58WLakBRxYljiEAgxoANa8ePOCtowCvowCtpAAAWBoBNKyrWAEAUxutYACtWgD/9gDv4QD/8ADkAQPVAQMASO8ATu8AS/8AbyYAeCMAciUpcBYAfie/lwDrcAFoBXRwBXzvigBsB4D/kAD/jABuB39/AX15BIN2B4YSxp/ZAAABWklEQVR42mWQ13bTQBRF9xFkaAaJGCKLGGIriB4g9N5DS8DU9N577/XXM7Jl+yF737vmac46MzSaMAyNyefNzJ0bgesGgeu7dz8+T6dTqUzG7uO3UVRbYuGDl/W82ZpZz5u7su8UwbRxnbZmyF/C98F3gT9ctJL6Cn+XaWjgl/UFL6EXctkcfNpzShAS04q+Ix7adYVu84wWNID0GRUv/wcuoAIih/T+oBIgrK3wiDoravJ59Q1owZZ4wz9gSGgI2QAKIE90bjlHGvykrtTAZ/ULKjU4Txeyb4jncqVBTqxXAoywNvN00x4+7bguP1LJHwjF76+vj+c1BeilYBftVgIajUIZo7WdQEGgJgW39C6jtFWZSS1FqlUUKVrUPWVlJ1YbTjWgyPSD7Z2EY9tTJ8pMdK8cT+i5Ol9Tps+pwu8i50bGTiaM3xw8k9D/ZPRUmfsdp8sMXztb5RAakDe7G6AYwwAAAABJRU5ErkJggg==
""")

# Guest blog
imgTagGuestBlog = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJFBMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAACJ3+6SAAAADHRSTlMAEDAgQP9QYP+AcFIAGH/OAAAAmUlEQVR42mNgVDI2NlIUUlZRZFQSNGQ0ZFQSYEABIqGppaVBriGhwUyhLkEiISahBqgKVDtKp05tiWhubWSJCA9RbS3tQFPgunTp1KlBrY6uDiyh7SGuU6cuVUAzYWrp1KVNHsFABRHh4a5AHpoCiQiLCNeQ0EZVBabQllANIA/NkYyNjI0SzR0CEgKMHYIdgkAeA4lgNwEAAMLwPtlpQ5EpAAAAAElFTkSuQmCC
""")

# Guide
imgTagGuide = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAADXR6QiAAAADXRSTlMAEDAgQP9QYP+AcI9SHy2TzwAAAFZJREFUeNpjYFQyNjY2UhRSZMABREJTS0tLQ1yDGXAA1Y7SqVOnti5tZsABXJcunQoCuE2YWjp16dStuE2QiLCIcC2NwO0GxkbGRgmLRolGBnLBGQIAABM6MSjYG8PyAAAAAElFTkSuQmCC
""")

# Hands on
imgTagHandsOn = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAKlBMVEUAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7t5lPAAAADnRSTlMQIDAA/2BAn3D/UICPUjQ013EAAAB5SURBVHjaY2AUZBBgUmBSMFBiNgAyjNEBg0pImlsKEIq5CLMBKWYMBSklLVNAcMlMZhUgpYypwGWLyxYgWOnGnAKkkjEVTNkyBShxJG2KsMqWFiwKVELAwFPFk5nTMyUE0wpOSTCYwDnB2GACpyQzhgJjAoDhLgEAADjwXJlHz09GAAAAAElFTkSuQmCC
""")

# Interview
imgTagInterview = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAADXR6QiAAAADXRSTlMQIDBAAP9gUID/cJ9SHnNzHAAAAIZJREFUeNpjYBRSYDISUlRiEBQUVBIUZHFBAwyqqcGqoaXhocZhYWGhpakqGApMW6daRpZOiwyLiIiITG01waKg1TjYNCx0ekRURGjqVlwKpkUGT50eEZkaiqlANTVVKUg1PCxIVSkstHQqphs4JSUZJnBOnDiBk2HiTElJTF+4EAAMZwgAAM1vYJhpoFfVAAAAAElFTkSuQmCC
""")

# Latest (placeholder)
imgTagLatest = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJCAYAAACCPip6AAAACXBIWXMAAAsTAAALEwEAmpwYAAADUElEQVRIia2VS3LbRhCGv26AIkE8KJISI5HWI3ZFdnbJwosscwhfQBfIBbLLCXIA+QI+Qaqy9QWyiRPHZcs0KZrhGyQlUSYmCwIURFmKYuevmpqu7saP/hvTA3muakLAj1cYL58FGkBoDL4IATCK/bVUHFjGktxaiiPBWeV7JusPGBR2aa9v0/Q2qDsl/lrzOFGHITY7luFAz7lvT9jRAVXtUtH3FKVBgdfk9XeUNv8X7AbwZD7nmWVRA14Yw2EU8VQVX4Qn8/ky+WdVfogiAJ5ZFmGcC/BUdWkD/GJZVxowK3/Hqb9D6G3T8zfo5Iu0cgXqmTxtzRFis6mGPb3gnnXKlozZlCEl6RHQxpMmOXmzEC+AueQ2LFyfAg3Ngik0hgZwGEWICIdRRIhBZEGd7ImdiBcRRIRavCdxn8uqLgrfcBbsM3Gr9INNuvkSrVyBRsalaeUYYeMpfGl9YMc6ZVvHVHRIWXsUpE2gJzgcY3N8qTiFTxGfUGjamTTDxDsGjnRBf5SIiuN+LNgYs4xdyzUQuQecBfcZu1X6QYWuW6blFGhkPeq2w4gMNsK+XrCjZ1R1QkVHlLXHunTwpYUjb1mTP+4s6qaOpPuWpCwb0ATC2Jv+2h97KokfxU1YnBaufRmzVuNs/SumXo2hX6Hnl2nnCpys+RxbDkMyzETZs+fsWhdUdUpFQjZkQJEugbTIyzuyvLhVzLKuJLZSx6roNNSPxfwYRUvWn2KfL4KftmMKY8xyBIwxyyOfzjXqcV76mql3j1GwtRDvFGnmfI7X8gwkyxSLPY3Y0xk1mbKlIZvap6gdAm3hSgNHXgKz28V8xkhoDZZz/CjeHydzzeK2X7XTMy8iPFfFX8mdlb9l6u8y8rboeRt08iVaWZ93GZcOWcZYbKthXy+o6SnbVhhfel0KtHGlQU5eIfT/g5yruMtIyG+qNxwYrt22d33hvPiYSfGAYbBPp1il5W3y1i3xOhvwxsrTJ8O6Cg+tGQ90yp41oqo9vtA2ZW1S4BhX/iQjr1bLvaXGOH5TzTf47V/TA7Oa9G/iP0IaObvMbJvphzHheZPBaEr3vEV7lOe9lSPEwhbB0TkzndHRU4yMGciIuvRx5W9ytMhI/Qrv5/zqbsM/Smk6ycG6kcEAAAAASUVORK5CYII=
""")

# Link
imgTagLink = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxWtGoAAAADXRSTlMQIDAA/2BAgP9wj1BS3ufVBgAAAEZJREFUeNpjYGQQVGIQFDDGBRhUlFxd0lydcCtISXP38PTCr8Dd3aURj4JooAIPPCaoeLsCAR4FHI0g0IBbgTEBwHCGAAAAW5tQUdP63wgAAAAASUVORK5CYII=
""")

# Live
imgTagLive = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJAgMAAAD/UMLpAAAACVBMVEUAAAAAAAAAAACDY+nAAAAAA3RSTlMA/1LsNwl0AAAAIElEQVR42mPAAAIurugCLoRUOLIwoAARR1YGEsEqNAAAXooNGiJPOM0AAAAASUVORK5CYII=
""")

# Live updates
imgTagLiveUpdates = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAADXR6QiAAAADXRSTlMQIDAAQP9gUID/cI9SFJll6gAAAKhJREFUeNqFzTEOgyAUxnGUia2ULt0MDbuJF2ga3+BYAgrupCfwCOzYlDQewCP0Fj1UdapM/t/wll/yoQxRSjnO6LHIi/KQ39Zf/UOCt22rmXBOgTopoQcJ9y2A2hhjGXgf3XKNHV42pKA3vV6BHbzXtQIZrwl4dPFtmfBzgM8cF/BskgnRScE1IxYuwoLjUiidTJAxEDThMhBMAjmjQMYJb0G1E/ru9AO5PFmVdEOAXAAAAABJRU5ErkJggg==
""")

# News
imgTagNews = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxWtGoAAAADXRSTlMQMCAA/0BQYP9wgJ9Ss9uVlwAAAFNJREFUeNpjYBRgFFJSYBQwxgEYRFxD3NxdQ5xwKghpmdLu5e7RgFvBkiXu3m4tAfgUtLu4ReC2QqSkxM3DzQW3FRwaGk1NTR3MOBUYEwAMZwgAAFzXUr36jm9XAAAAAElFTkSuQmCC
""")

# News alert
imgTagNewsAlert = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJAgMAAAD/UMLpAAAACVBMVEUAAAAAAAAAAACDY+nAAAAAA3RSTlMA/1LsNwl0AAAAOElEQVR42mPAACIiLiKMLCIBITABQQEXBxYXARcBuICIiwCri0gAQkAghAVdRQCLqwhCgDBYhQYAuv8Q9Emw1V8AAAAASUVORK5CYII=
""")

# Nintendo Direct
imgTagNintendoDirect = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEXsGCXNFSDcFyK9Ex38Gif///+dEBitEhsAAACNDxZ+DRNvCxGrEhoEnhu9AAAAuUlEQVR42oWMMQqDMBRAvyWDo7YIjrXt0LFWhI6KXiCExBhnoRfIHlIiXsAjeJseql8qhU6+4f/H5/HBC3ZJ4KXJPoSQ7EgRwgkNjl5K6gWIWN6ziOuGZ/ye30qeCbQDni7fIHfT7B5SD7KVQtJKtgq3drEkazAjGcuFWmAVDj7w/nlm9X8wKNUJRauuVfhLT78g6pGQRo0Q3DpT8pdAi6VH18C/ImB8a+1IfFKMsBiYwqxBvQG8N/gAI15iFhq4H+kAAAAASUVORK5CYII=
""")

# None (transparent)
imgTagNone = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJAQMAAAC48Lg5AAAAA1BMVEUAAACnej3aAAAAAXRSTlMAQObYZgAAAAtJREFUeNpjoDYAAABRAAF+kizgAAAAAElFTkSuQmCC
""")

# Opinion
imgTagOpinion = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJFBMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAACJ3+6SAAAADHRSTlMAECAwQP9g/3CAUFL85In0AAAAaklEQVR42mNgVBQ2FFI2FBIE0gzYgEiIa4hraoirC5AWwKbAtLS1NHVqaWsrkDbApsB16tTwpVMhwAGrCVNbC4GKprZObcWuQDzc1cA0NTXVPdw1FasVjIXiAuLq6uqCheLqAgzkgN0EAAD19DSgaF6yfAAAAABJRU5ErkJggg==
""")

# Pokémon
imgTagPokemon = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJAgMAAAD/UMLpAAAADFBMVEX/4QNeXl7///+tmQLoIpyQAAAAQUlEQVR42mPAACIsgiIuAgEIAUlJQY2QlBSEgJigmEiKiwtCQEJQUsIFWUBATVDEZQaSgAKHkkaHQgcDbvAfDQAAJTgX2djrzZoAAAAASUVORK5CYII=
""")

# Pokémon Presents
imgTagPokemonPresents = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJAgMAAAD/UMLpAAAADFBMVEX/4QNeXl7///+tmQLoIpyQAAAAbklEQVR42mPAACIsgiIuAgGsQCASECLCwCApKagRkpLC5uYmJZEyI4OBQUxQTCTFxYW1tVUFqHICA4OEoKSEi4sLG5sbp4SLgAoDg4Aa0IwZLiwsrmJAFREMDAocShodCh0cHF0aQHoBAyb4jwYAEI4hTJQ57c8AAAAASUVORK5CYII=
""")

# Preview
imgTagPreview = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxWtGoAAAADXRSTlMQMCAA/0BQYP+AcJ9SgHnw4AAAAHRJREFUeNpjYBQAQiElJSVBJSVmY0zAIOIa4hri5u7u7pJSIoxNQUhLSUtJu6enp0fJlGCsCjxSPErcPL08XUq2YFfQENKypLGlzdOjxAWrAhFhkZISJxFBoBtasLqBg5lDQ6OBg6GpQ0MDqy+MCQCGMwQAAGKgU5jNpmnjAAAAAElFTkSuQmCC
""")

# Review
imgTagReview = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxWtGoAAAADXRSTlMQMCAA/0BQYP+AcJ9SgHnw4AAAAGhJREFUeNpjYBRgFFJSUhJUUmI2xgYYRFxD3Nzd3V1SSoSxKwhpKWn39PT0KJkSjEOBR4mbp5enS8kWXApaljS2tHl6lLjgUCBSUuIkIgh0QwsON3BoaDRwMDR1aGjg8IUxAcBwhgAAAOJRUw6yhBNHAAAAAElFTkSuQmCC
""")

# Rumour
imgTagRumour = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAIVBMVEUAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAABCVqQUAAAAC3RSTlMQMCAA/0BggP9wUigrnkYAAABkSURBVHjaY2AUYFJSUmJQYFJSFDDGAhhEXENSUkpCQaQrMzYFIS0pJSUuU1qmlJS0KGNV4JEClCoBAQ9lXCZMAUIg2SKM1Q0pER4hQKwBJLEq4NBgaABhAyCJ1ZHGBADDKgIAANTuUZd8sJaTAAAAAElFTkSuQmCC
""")

# Second look
imgTagSecondLook = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAADXR6QiAAAADXRSTlMAEDAgQP9QYP9wj4BSoEutSgAAAJ9JREFUeNpjYFQyUhQWEBZUElQSYDQEQWFjAQYkIBKaGuTq7OoS6hLqyBQkEmIS4lqqgKzAtCO1LSIsIhIIg1hCVFtLW6cuRVEgEZIaHt4eDQIhLCGuW4EgwgDFitbStsiw6Mjo6KgglnDXraVbp7aiWhHhGtTa3NoSHh7ayBSqEWERgeYGiUYgFJAQbG7uEGDsEGxkbJSwEGAgBZwhAADPbkUJbMxPkwAAAABJRU5ErkJggg==
""")

# Site update
imgTagSiteUpdate = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAADXR6QiAAAADXRSTlMAEDAgQP9QYP+AcI9SHy2TzwAAAJhJREFUeNpjYFQyNnIyUmQ0NlYSVBIQFlRRVhJgQAYioampoanBTOHhoS6hzq5OoWGhBigKTDtSMyJSm1kiIyPCgTCktS0CVYFESKpLiGswUEFoGxCHuLqgmSDSWgpU0MwUGRUhEh0VAVQQgWZFhKtSkGowY2tLEFNoS3iQqlIomhWNEoKNEo0MQJKxQ7AZyOsQYCAJnCEAAKkOP0fw5f2DAAAAAElFTkSuQmCC
""")

# State of Play
imgTagStateOfPlay = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJCAMAAAC14NpIAAADAFBMVEX///8AAAAQYKoJOWsJSZMIkM4PUp0EfKkGKVoLbK8LP4QKgcECUIUOTpILSYAJXJURWaURWaIfcLAQVqMPWJ0SV54KV50LVp8LWJ0QVaEPVaEIV6EMba8NVaAJbLASVZ0JdrAQVJwLcrUKcrUSVp0JbrERU5wJa6wJa7ASdqYVdqENabAJaa0IabECWZIFdqQQdqACbrQHcJ8DaKkFbZwKV4oJUXopg7wlhasGLl8FLF4LPYELPYMLPYILQ38LQ34MQnsNQ3wJPoYKPoYKPYQLPYQIQ3wFPYoIPogCSHkKSHgIP4cFR3gIJ1MJT48MUJcFTn4OUJQMUJ4NUJwMg8ICVpAHQocJgMAKP4UKdbcLdbgMdbQFe64HdbUQU5sGeKYGUo0HUo0GU40IUYwJUogFK14FK10HKVgHKVYHKVkNR38HQIoHJ1QHKFUDJUwLUpoKUpoIUZ4OUpsPUpoLUZ4JVJYMUZ0Mfr8Kfr8KV5YHWJgHeqcHfKkOVpACWJEDV5ECV5AHUocHKloJQ4gPU5oDVZAKVJwNVJ0LVJ0MVJwJVJ0PVJ4PU58LVaAJVaALVZ0JQ4cKRIcMUp8PU5QGQo0HQ4wNR4UMR4QOUZUIgrkNTooDUIYTlNAhlc8vlMoHT4UCT4UUTXgIk9EJktAHlNIGldIKSJIJh8YLh8cKh8UIhsMIRpYKicgJlNEHl9MMUJgNUJkNUJgLT5sLUJgIUJYGSJcHSJcJToMPSY4FS3wJi8oSjsoHTZsHUJUHRpAERZUPS4gFTYQISo0LSYwKSYoIjswJj80LOmkIkM8DOmMMTZoKTpkKTZoKTZsJTZwNSoQGRpUGRpYFRZYHRpEHRZUFRJQIRI8HRJAPSogKR44LTpcMTpYMTZYKTZcJR44IRo4YSXQJOGkKOGoPTJQLTJUKTJULS5UNTI8PSYcISoEIQ40GQ40JRIwGRI4JTJoJTJYKTZUHSZMGOGEKRYsKRYoQZI4JTZYJTZcJTJUIS5EJS5EJSpQJS5URRXEQQ3AHNmpwBPAVAAACKUlEQVR42i2PZVhTcRjFz/ufYqDcuzuUoVNsQIYO7lCvQx3GbDExUGyn6FRsUAzsVjAxZ3d39+zEzmF3bkzFzW0Pv/d53nPOt3OQvjczlaX24oKDOZHZJrTjxlYRIyJEThTHjRfDWY+ecnlGBT7hbezjXxPjPt++dfLugZLq0hXLq1Wj2m4+kn8t3hgADkDnSGhtABq7Y4i4DEVWAynq7oBfIh4k6KHXQYKuFLuZxJhyyqC5LKST77YLa9YjGURLCVQABI1bD4O48MkgXAKlqN+DYEHMIrdIGAidMDUpYLDdkftoGq8uN3LT+XU7wAi2LZGo2hXAmNHeFlz4aUjuQzLzA8gJvR6Ai0ALRlzfY3fY7bt3TVcydUffo8u3Q7mKUEYLTWUQamgQdRDEhXWDhB8gOUsEBcXAJQNBJoNr/5drOXb799zXr3YWV7JC1VeuuIgWAMVrERqKasi4gTq1gXMBSgL5IZOxU3jHLwasnv066K5eyfn6dwM7sfDTwz/HlYyp2m/EPiIWpiKVnA5RpSCa1IqoaNkhS8jfn4rxfBANVcQSnaU4+tiQfj915Lv/UhCeN2pat3504XlnhotdMGPObJ4xRethghDGe2nD2Ewfn1mBcrdXKEqkBwrC5a1ZWcdC4p/cufeh/zf27Ge9Dg2ia+k8zIfL5ZLJPM/8z2nJ44XTmp1tlVksToOXJoZmLaO0NrNZ6l2zjyQVTEvrZzQa+5pMpgHN/wO0D7vCcYE4lwAAAABJRU5ErkJggg==
""")

# Summer Game Fest 24
imgTagSummerGameFest24 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJCAYAAACCPip6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAESklEQVRIiW2VTWxUVRTHf+e+N53voTCdmQ4RNciXpIWyASPRBBPdsZBESHQBbhSFxJgKUtDERIpQCYYvaVyoG4wG3LAgaPwIiSx0IUSWmqjEWArFip2Zlmk7x8W9c98rcDfn+3/POfe8d2Rz8ZLOMMHk7AjGQNLkMIARMEYJ2rwoBrXUyYHjm1rDCGRMlqZOYEQpJipkw4y1t2qMz1zHoJQ6yojAnVaNXJjFSIupVh1p46NMtuoYlHKqCyMwdmcUAfJhhkarjqBUkyXEtLgxdRMRyAdp6q069Zk6+USahakiAlyfGkMEqqkFiCj1mUnyYZpCIg2q8OyCr3RD4YS2z4bO91RV9Yl5e508oKqqawvbVFX1meIeVVVd37lVVVU3lnf72Oer73j+5QeH9N1lZ3Vw+Vnd+dBBr9+39Jj2P3JAVVV3LxnUPUv3q6rqpuoWVVV95eGd3nd49Uk90nPIy28t6/f8h32Derhnn5c/6B3Q+DmzbkjProtiT/Xt0lN9Nn54Tb+ee/yAfv/kETVNneC72zsQEUTEdgWozY4A8J+jP97+xMozVv5h/FMA/p2+DoCIMNmqeX74z11MtuqMT49y/I83Pf6t5iiHfxtARDj0616uNX4H4Mu/PwfgZvOGx1CgMdvwcm227vn6TIP+q/s9bneqy+bv7PkwQyHMePv2y0OMTN0C4OLYFTZeGmBk6h9Mh+TtZao83XkcLEbsRKD3l+1RVR+rqs6uTM7apmyqvoSqcmv6RuQPNGJF3YMXS0ZVvaSqZIOMz/tI7wC5IM3RVXsAOLZqN7kwgwInV+/y+VRTRQA+u/YNABPTDQzAU4UTiAhfj+/k7g4kTQ6AtYVtc/TrO7fObZMIaNQcVWVqtk4qsPHtRszxj51N1S332O0MRHI2zEY2EQ737EVEeP2XA9TcpMTPyNQYr14ZQkQ41fcG1XQpmnRXqWnqBN/e3uG7ND9cgojw88THiAhd4RIACmG3oxUA5jna6fSqSsrYBJ/r7vdJLEhUEBHOj55GRFiUWgzAi4teA6ArWba0w9KSo+0JyQQZAI72HqTcUfK22nSd/quDPu98mCUbWt+co/GJ2X75fQTlpw0fcXrt29YvkY4+ARFhc+kCuaDKC+ULiAhbK+cpJmxDFnassQUk+1whlj6UXu3jq0nruzhrdfMTFdJBloMrztgXW/kFD6QWIyIsz61CRFiR60VEeDTfg4iwMr/S42XDLOWUfbVKskQlFb1gd+w1zz02TDZM050sOVsXoFTdfyHCS4O2N4L9JGRz8ZIawa4gE608u/6UoL0C3coLTKQP2mvRONmtsiC+Kr0PGGlZXHOflUoLid8Vs4vTCZFN5lAQFHG4eD8bC5bH1WTHw+KFfzUv2ksciE3Ozk/g9PYi1xxiSd2l9wWAS4a5SYrz8RhgaNk7nE2IfGj7oiDtvHROTuIKMsSoxyJWvPuJSvQzFVH+Bxf2KjMjhInBAAAAAElFTkSuQmCC
""")

# Update
imgTagUpdate = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAADXR6QiAAAADXRSTlMQIDAAQP9gUID/cI9SFJll6gAAAG5JREFUeNpjYBQUUmBSMBBgchJSMMYCGFRTU0NcQ0RCVENLA7EqcG1tnZoKhJ6RpRNxKYgsbW0NdQlxxW6CauvSCa5bl04FKsBuAmekq7JqpGuqUpAqdhMMJnAyc07glGSYwDkBqwJjAoDhDAEAAOO1VZyrIcYhAAAAAElFTkSuQmCC
""")

# Updated (News | Updated)
imgTagUpdated = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAKlBMVEXFAgKqAgK4AgLSAgL///+dAQGQAQGDAQEAAAB2AQFpAQFPAQGOAQGtra0QeQUzAAAAhElEQVR42mNgFGAUUlJgFDBxwQ4YRFxD3NxdQ5xMnJ2dTZxNXEycjZ1NjJEUhLRMafdy92gwcYYCFxNnFxMTJAVLlrh7u7UEgBSAsLGLibMJmoJ2F7cIsBUu2EwQKSlx83BzaTABSTibgBSguoFDQ6OpqamDGacvjKEAp4IzUHD2LnYAAPw3Xu4/v7hrAAAAAElFTkSuQmCC
""")

# Video
imgTagVideo = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAJBAMAAABwEDdJAAAAJ1BMVEUAAAAAAAAAAAAAAAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxWtGoAAAADXRSTlMQIDAA/2BAgP9wUI9SXpJ+2wAAAF1JREFUeNpjYBQUFFJgUmBkNsYOGFRCQkLcUpxSEnApSCkpKWmZ0uXhhNOEkilAJa7ubrgUcHgsKdkypcsdpwlGTiohHilOLQ24FBg0cEg0cDRw4PSFMQHAcIYAAADorFMJTiwd4gAAAABJRU5ErkJggg==
""")

# BACKDROPS

# Ace Attorney
imgBgAceAttorney = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAA8FBMVEUAAABdXV0vLy9SUlIYGBgNDQ1CQkJXV1c6OjohISESEhJMTEwpKSkGBgYKCgoHBwcLCwsICAgRERFQUFAqKio4ODg5OTkkJCRJSUlKSkpLS0tGRkZVVVU7OztAQEAMDAxISEg9PT1ERERFRUUPDw8gICBWVlZPT088PDxBQUEfHx8/Pz8ODg4iIiJOTk4eHh5NTU0dHR0cHBwUFBQTExMbGxtUVFQWFhYVFRVTU1MXFxdRUVEaGholJSUmJiYoKCg3Nzc1NTU0NDQzMzMrKyswMDAuLi4tLS0yMjJZWVlbW1taWlpcXFxeXl5YWFgQEBDfsV8ZAAABR0lEQVR42u3USVPCQBAF4CcJRpawJoA4KmtAjYJgBgaQHUGB+P//jTO5YKkH+mgV36Fv/eoduhonJ/+Ma+IPCRwtOU7hF6+H44WbUfwQX4KiFxtBSfc7z7qqs3gATcTIA/pmvnwdh64v6rliGkRv29U6lEGgbpzlQVbeX5kIdAtsFnsEUWJa8qs1SK3hxwaecw8aOxpu+G2v27eYf24CS8cFRcQCOpwJzhlrhyHFbkBhJ+WwmNA0wTtQJj4IBiFIriY0mVCDkhEgiLcg3WZVAM9ASbZBsOgGDbJCYjMoZgEEuahaqTCmDTVuxIOASxBc6Gr4TujTHcQM7gFIZUEwt4D1VuQhudX3Rg3wHBBEKqhvGzoCyfJOXrVNCkgX16JUOxTa2S9DDorVvmziwNKeWAkE5rkxxXd3htBBYE9GTjN9eJI2F9noFwylIpaulPb9AAAAAElFTkSuQmCC
""")

# Dungeons and Dragons
imgBgDungeonsAndDragons = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAt1BMVEUAAABSUlIqKipCQkIXFxcLCwtNTU05OTlHR0cgICBLS0tKSko8PDweHh4hISEODg4JCQkNDQ0KCgoSEhI3Nzc2NjY4ODg7Ozs6OjobGxsdHR0PDw8MDAwUFBQYGBhGRkYiIiIjIyNFRUVEREQ/Pz89PT1DQ0NBQUEyMjI1NTUlJSUkJCQoKCgvLy8nJycuLi4tLS0sLCwpKSkEBAQDAwMHBwcICAhRUVFMTExQUFBPT08CAgIQEBBc19wgAAABCUlEQVR42u3UyVLCUBCF4fMDuSTIEJAhAholII4gk4Sr7/9chqKgyuUNK6r4lr04i+6uo6ury7WajDc6xwt0dIYamUflESrTNPgx9leZ8Ecu2ibpLmtT7KBpSfrLbmLKcuFzYNsdw4EvFx+QGE5MAgu5GO6YJ5hCFSaFlHjBdiAnYzJPuocHBWSKclMHqlIJ7qQy8CY3oSH1jgFhBevJzbchbR0DNjfYltwEQHQMaAPvcjMhE+yXWFKfzFROvB2fI8ysDL1ZBX/OtiEXMyimnJgiFOQi5sBGkc31ypH1q1/1Z2zDM4yCRS+2PblYD9eSBpY4wd7uB95KOdTJccB/XqGrc6zG01Op/gH0XBNtva+UuwAAAABJRU5ErkJggg==
""")

# E3
imgBgE3 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAqFBMVEUAAABMTExSUlInJyc5OTkVFRUcHBwYGBgwMDBFRUUHBwdISEgEBAQFBQUGBgYjIyMNDQ0PDw8eHh4dHR0zMzMyMjI/Pz8bGxsaGho3Nzc+Pj42NjY9PT0XFxcTExMUFBQ8PDw1NTU6Ojo0NDQtLS0fHx8pKSkkJCQoKCglJSUmJiYKCgoRERFJSUkDAwNKSkpAQEBEREQLCwsQEBBRUVEBAQECAgIJCQlh5b8KAAABEklEQVR42u3T3U6DQBAF4LPbCuWv2moF/23VYlGK6ELf/810mJACYsdeNul3Q+ZsOGEzAUdHh8FTDWaO0LSCBSRKNw0x1S1TSHYXOD4kuwsSiLhAZYqYJ0TKY4biDURcYJUBGfso/AruKB5BxgU2OsrLn9R8QfZHQULpFWTggtnpigwisLMqXkKG7hbYgsdnyHoLwnp+hai3wJ2cWCPao5lA0lfAkv8tkgsu4gFZhtj6pE/IIelbY1FW96CjDJLfBWX0MaOnrfcosIqgskYQ53R1t7x36OAakvpnqqgbPGgOUqPJChKlm5w1hs3ZcyFRuuUcG2c7GRuiTkH2jrfHekjl9wFPtZj0pYA9zzPl3cZjAN+hTRQcwxOwFgAAAABJRU5ErkJggg==
""")

# Error
imgBgError = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAsVBMVEUAAABSUlIpKSkVFRU8PDxHR0ccHBwKCgpMTEwGBgYMDAwPDw9LS0tAQEAICAgJCQkLCwshISE0NDQeHh4dHR04ODhDQ0MgICBERERKSkpJSUkbGxtGRkZFRUU/Pz8SEhI5OTk6OjpBQUE+Pj4ZGRkUFBQ9PT0TExM7OzsXFxcwMDAWFhY2NjY1NTUnJycyMjIoKCgxMTEvLy8tLS0sLCwrKytQUFBRUVFPT08HBwcEBARl4QbCAAAA8klEQVR42u3U21LCMBSF4bXSgwnQoiL0QFUUWxQUD2iJvP+DaVo746VJr5zhe4B/JmsmG0dH/9FhnWVXWwVnHzQCDy6U520C6ltN6ms4WNJIMZiS6QH2chqXAHzyDvaGL0KMmkBJRmI7j2Fv1gSUpCF39g9pA7FmK/qEhcSvKt0EQvLJexAZ6cOC7kYcF+QKwGlKhvi7t5GUZHFyUZALGKs972FBKTXjXpNM426SHHYSGtMYLZ8SliaLm12JTsAAfZyRj+hhrkm3fzlOhBDvFclXuAglf5zDxbBmo44mcLImnzeeVw7gaMm6x1H8luS/p/sC+BIO641Q/rEAAAAASUVORK5CYII=
""")

# Exclusive
imgBgExclusive = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAilBMVEUAAABSUlIzMzMXFxdCQkI7OzsgICBHR0dJSUlGRkY6Ojo+Pj48PDxFRUUhISEjIyM/Pz9EREQZGRkoKChBQUEuLi5DQ0MsLCwYGBg9PT0pKSkVFRUWFhY4ODg3NzcyMjI0NDQ1NTULCwsHBwcBAQEDAwNOTk4KCgoEBAQGBgYCAgJNTU1MTExPT0/E/focAAAAoklEQVR42u3SWQ6CQBCE4S4FcVdUcEFU1HFjvP/17BkJ73Q/kfCd4K+kqNNpq+RrS5uR2CcGm5LcewzWJ7GXLmFwDgFFwvMBpkgwBwuWBsCO7iRgIt+fATaNZ4IdpudGBBt4KxLYozYhgSMcRUCIWmSouSpA/gUfoPgCB+gSOECVwAG6hCpA/oR5Xngnd8flpcgXJJQAwxspXEusSWU7+gf8AC7GCF2B+TDuAAAAAElFTkSuQmCC
""")

# Feature
imgBgFeature = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAmVBMVEUAAABSUlIqKioWFhY8PDwhISFKSkoPDw85OTkHBwdNTU0LCwtGRkY3NzcjIyM4ODhLS0tERERHR0dFRUVMTEwODg42NjZAQEBCQkISEhIZGRk7Ozs+Pj4VFRUbGxs9PT0aGhoTExMfHx8dHR0UFBQ1NTUtLS00NDQyMjIzMzMsLCwxMTErKyspKSkCAgIJCQlOTk5ISEgGBgZjGZm0AAAAyUlEQVR42u3Tya6CQBCF4XO8VxBQBEQbnOfZFn3/h9PGGHXZxcrEb1nJX6sq/Px8K72K4qMHMd3gXeJCyPR+RHauEDF9mntDMoRE2c+AoOAAAs8eJzKDvfeec1j76Ouwt63Yjyr26JGLKj0SJpV6pBxqdyfv4bNw+OqDZW55zRmNyxiG2yhIZ221ottWqhV6MP58lpTwrU0f7w8pOYGd8/XZ9zTQbTKClb4f58D00d8FtSWs1MhCZSx7EW/C0kbYAzpUkfO/eJvcACoDDjszhrzTAAAAAElFTkSuQmCC
""")

# #ForTheGaymers
imgBgForTheGaymers = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAilBMVEUAAABSUlImJiY3NzcQEBBJSUkGBgYFBQUyMjIMDAwRERFISEhMTEwHBwcNDQ0SEhITExMxMTE+Pj4ODg4PDw9LS0szMzM0NDQ1NTU5OTlKSko6OjohISE8PDw7OzsiIiIjIyM4ODg2NjYwMDAvLy8pKSkkJCQlJSUoKCgnJycKCgpNTU1HR0dPT0/oQIisAAABAklEQVR42u2T0VLDIBREdwuEViWxNlqLTdNUTdTK//+ekCb6fHlzpuchw2TmwLLDxZUr/499YwH7tkQuBw6AC9TIRNNbYGD3+0O1EKFSBOupL/oz+QARcwSV1lvSfzrIUFwA1lBvsvQ5wp4mRL1ABrGFdPdZdxZCymCiHqgQKRZe/CY23+n00lDDDoYUblA/kTyvgJ67Y9RPFSTUW/JxsWMPfJ0Z9RuIeI36h0NNv+pvSSPUgfXdu0PkxEAqE0oIsW78ptO7Cj0VMhh1zzaufMZQjrrSf0Mpoxj1KrUwTYSwxmbUE/UlgrSF9uUeEx2HFCGjhQnN4FKEA3JZrgvANkfgBw+sDriJfBDFAAAAAElFTkSuQmCC
""")

# Latest (fallback)
imgBgLatest = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAtFBMVEUAAABSUlIqKipCQkIVFRVJSUkNDQ1MTEw7OztNTU0gICBAQEALCws3Nzc5OTk4ODgODg4PDw8iIiJLS0sSEhJKSko/Pz9FRUUTExM+Pj49PT0aGhocHBwdHR0XFxcWFhYeHh5EREQ6OjpBQUFDQ0MmJiYnJycvLy8uLi4oKCgyMjIzMzMrKyspKSkBAQEHBwcQEBAFBQUCAgIICAgEBAQJCQlRUVEDAwNQUFBOTk4GBgZPT08RCumxAAAA8UlEQVR42u3Ty07CABCF4fOLpVQuRaBWFKtVUBGpWqG05f3fy0VDUmQ17Ej4VrM6k5PM6OzsRD2+DFtNHS/aAmGpY0UF5NCTyv5GdrcFdEcuzJ+CLLyU1dqB543uqXjXMvJhvJK0BHBgamwRwXC9S1r8TmEmkzu4qqbS/0g1ynF+ZNDPCFPVdGEigxm8/q+0kEGP7Ft1Xx4NGcQE+5WTKYEMgoN9bVwZuLQPAjwZOITJfoUQRwZj8qbqmjk3MpjDm+reYSmDTkEe1c8gZ9uRxQV4D4kqycSDT5mkLSBuVGKglcpm5VPnm16pMojdnXggSX+o3xC+lgOC/AAAAABJRU5ErkJggg==
""")

# Live (animated)
imgBgLive = base64.decode("""
R0lGODlhQAAgAOYAAAICAkdHR0tLS05OTgUFBQgICA0NDTw8PBUVFUBAQAMDA0lJSRQUFDExMTQ0NENDQyAgICkpKQ8PDwoKCgYGBkxMTFFRUT4+Pjs7O1BQUD8/Pw4ODiwsLEhISAQEBDc3NxwcHCUlJURERBAQEAEBASYmJhISEhERERgYGDAwMCcnJ0ZGRhYWFiMjIy8vLyQkJAwMDBsbG0pKSjU1NSgoKEJCQgsLCy4uLkVFRQkJCRcXFwcHBzY2Nh8fHxoaGlJSUgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDkuMS1jMDAxIDc5LmE4ZDQ3NTM0OSwgMjAyMy8wMy8yMy0xMzowNTo0NSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDI0LjcgKFdpbmRvd3MpIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjY0MUJERUE0NDlFOTExRUU4NzgxRTFBMEFEMTJFNjgzIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjY0MUJERUE1NDlFOTExRUU4NzgxRTFBMEFEMTJFNjgzIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NjQxQkRFQTI0OUU5MTFFRTg3ODFFMUEwQUQxMkU2ODMiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NjQxQkRFQTM0OUU5MTFFRTg3ODFFMUEwQUQxMkU2ODMiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4B//79/Pv6+fj39vX08/Lx8O/u7ezr6uno5+bl5OPi4eDf3t3c29rZ2NfW1dTT0tHQz87NzMvKycjHxsXEw8LBwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGgn56dnJuamZiXlpWUk5KRkI+OjYyLiomIh4aFhIOCgYB/fn18e3p5eHd2dXRzcnFwb25tbGtqaWhnZmVkY2JhYF9eXVxbWllYV1ZVVFNSUVBPTk1MS0pJSEdGRURDQkFAPz49PDs6OTg3NjU0MzIxMC8uLSwrKikoJyYlJCMiISAfHh0cGxoZGBcWFRQTEhEQDw4NDAsKCQgHBgUEAwIBAAAh+QQE6AMAACwAAAAAQAAgAAAH/4BAgoOEhYaHiImKi4yNjo+QkZKTlJWWl5iZmpucnZ6foKGio6SRFBodI4wSHQk7pYcuPz8vjC2zKbCFNgM/AhOCEgaEMBKCOTI/AzC6gyGzEYIxyhuCG70ggjSzJc2CGD8ZwwQBswiCDLMBBEAGGT8Y3kArPzgAQD6zM4QOszFAJET8WCFPwI8LglTMQkEIxSwVgi74KvhDg6ASs7INAsFNkIaJ3gQGUAAEwawL94AAkPiDBRAF5UTI4zHLBMCPP3QIYjErAQkgJ2Z9kNdjVgNBIzo8KCCoQI1UglLMgiCPwoJwNl+SHKRg64l3CyjIA/KMViEAKQfd+hFirMobH2SYNm0QIEADuUAKfHCR1u0gAg9mzXog1q8iDrMWXP3BwXAiA70qTJhQQdkwx4b6/YgGJMIsB5gLpfuxThC5WQxCDzowlRCEWQdUA9lg4UeCvgAS/LBgLLQHDALOFUIg4IAHQoEAACH5BAToAwAALAAAAAABAAEAAAcDgECBACH5BAToAwAALAAAAAABAAEAAAcDgECBACH5BAToAwAALAAAAAABAAEAAAcDgECBACH5BAToAwAALAAAAAABAAEAAAcDgECBACH5BAToAwAALAAAAAABAAEAAAcDgECBACH5BAToAwAALAAAAAABAAEAAAcDgECBACH5BAToAwAALAAAAAABAAEAAAcDgECBACH5BAToAwAALC8ADAAMAAoAAAcRgECCg4SFhoeIiYqLjI2Oj4EAIfkEBOgDAAAsAAAAAAEAAQAABwOAQIEAIfkEBOgDAAAsAAAAAAEAAQAABwOAQIEAIfkEBOgDAAAsAAAAAAEAAQAABwOAQIEAIfkEBOgDAAAsAAAAAAEAAQAABwOAQIEAIfkEBOgDAAAsAAAAAAEAAQAABwOAQIEAIfkEBOgDAAAsAAAAAAEAAQAABwOAQIEAIfkEBOgDAAAsAAAAAAEAAQAABwOAQIEAIfkEBOgDAAAsKgAKABYADgAAByOAQIKDhIWGh4iJiouMjY6PkJGSk5SVlpUAAJIFDQEBDQWIgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwvAAwADAAKAAAHV4BAQBIGgoIwEoYxPwMbghsDPyBABAE/PwiCDJcBBD6XM4ZADpcxKpcooiiXKiWXk4YglyUIlxcAggAXlywkGpc6giyXCSRAIx0PBYIFNR0jhgoKotKCgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQAh+QQE6AMAACwAAAAAAQABAAAHA4BAgQA7
""")

# News
imgBgNews = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAllBMVEUAAABSUlIfHx85OTkODg5MTExRUVFDQ0MkJCRNTU1AQEATExMSEhIUFBQmJiYqKipCQkJBQUERERFERERKSkojIyNLS0s4ODg9PT03NzcuLi4vLy8NDQ07Ozs0NDQ1NTUZGRk8PDwxMTEPDw8lJSU6OjocHBwoKCgnJycpKSkeHh4CAgJPT08KCgpQUFAICAgBAQEFBQWBy39AAAAA70lEQVR42u3UzVKDMBiF4XMkpFC1VmqpP2CrQrTFIr3/mzOEDljGRZJx40yfXTbvJPkmwdnZ/6Juwx/SPIEbxZFYwMmEpBzo1SucxJTqbXBD3sNJSLk/PVEOJzogMLggF9vtu6pgywQOj0FZlkHR6EBn+gVLJjBj57IP8BmWTGBHoxZtIF2vc/IOlkwAm0hbXpk7eAH2NWNYGl+iGWNWM4SlPwpslq3EO7Cj8Sl8Ax/sXPsGDk9la9Z4BGLKDL3jGDP/MSpyCghpv4MJGSSip3dQR8mKXMBSxNGPclTAUvXA36zs33MTzdPwVDovKnwDVysRvBz4ur0AAAAASUVORK5CYII=
""")

# Nintendo Direct
imgBgNintendoDirect = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAilBMVEUAAABSUlIqKipJSUlMTEwYGBg7OztGRkZAQEBFRUUSEhI2NjY3Nzc5OTk4ODg6OjpBQUETExNEREQhISFKSkoeHh4fHx9LS0s1NTUkJCQyMjIzMzMnJyctLS0sLCwmJiYrKysGBgYICAgNDQ0DAwMCAgIMDAxNTU0JCQkEBAQRERFPT09QUFAFBQVD6XdUAAAAk0lEQVR42u3Utw6DQBRE0XmO2DjgiHPG5P//PQoaZrsRFRKn3OJKq9UOer2uCUYN4amEamFkBVU55cIZqk1BgTyD6mZkm0I14cIFqmTPhQNUYw7Ef6juXPAiiKKACwOodhwIoWobcK/wguhhxPtB4z7jF5rPkANHiNZGrhA9jczUTXG/8xya1oPiG1lCxaPqv+vTCjCNB52YkAPcAAAAAElFTkSuQmCC
""")

# Pokémon
imgBgPokemon = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAolBMVEUAAABSUlIqKioODg47OztJSUlMTExEREQiIiIvLy8JCQlNTU1ISEglJSVDQ0NFRUVGRkZKSkoKCgpHR0dLS0sgICALCwsSEhI6OjpBQUEUFBQTExM9PT0WFhYVFRU+Pj4jIyMMDAwXFxcNDQ0PDw8kJCQoKCgmJiYnJycuLi4tLS0sLCwQEBARERECAgIDAwNAQEAGBgYFBQVOTk4EBAQICAhm1cStAAABAUlEQVR42u3UXVeCQBAG4HdcXECkADVLMyXoQ7ewkP7/X8tl6ETndLGTV53jc7NnLnaA4d3F2dn/9LG5TrROvIcR/qIZRNQ5mBpixQX1+ApCxZh+SEuI1Pz8Hv8dEoZYdPOmiYUQyCIeXtwA+01X5HAX85YF5ma3xJw7PMKdR1aMgV0Mgra8hbv2F+h6Sa3VPrXLGO5UqVSZw3yNL7e1JAp5cZR9N8hsLRnixO6bNgtucF8NpZ/AQwz4FbaYiYf4xCl6xV0YrvDCWXqGu6uIOwQVUM20PEjYEZuu1ymxLSR+OUzCK0ENTzvOgPKp51KSok5tDiddaUej2Eu0nnhxxvUn/bQRDG8qU6oAAAAASUVORK5CYII=
""")

# Review
imgBgReview = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAilBMVEUAAABSUlIxMTFCQkIdHR0ODg4iIiJHR0c2NjYMDAw+Pj49PT0VFRU0NDQ1NTUjIyMkJCQsLCwNDQ0gICBGRkZEREQPDw8hISFDQ0MeHh5FRUVBQUEfHx84ODg3NzczMzMFBQVJSUlNTU1PT08REREUFBQQEBBRUVECAgJQUFBOTk5ISEgDAwMEBATHABZSAAAA4UlEQVR42u3UTU+DQBSF4fNaKFQFLWBpET9RYez0//89ZxpjWE6YlUmf3dmd3Nx7dXHxz9T7k2LYjDvFaOEYU8E2wFrL1TjZ8gq243sVU6GHYmPIrJaZHhi/VEIrfRZzWwXp4VlKDY3VgbmjQvgCH5JyqH3AmNEZ8DlEArmcdKCbfLquUicZ6YKGMu0ZD5WzuYHeVxhSOS8+hUiAwZxBd57Ck6SdoQkqoIa5XrbD7KQCWgXZ5uWfvLyVesiVRqyFbRirq5jFrOHxPeo0GiDqP7TEvocM7hVjzdurYpxWvxP4AbNDEPqkKvrdAAAAAElFTkSuQmCC
""")

# State of Play
imgBgStateOfPlay = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAAvVBMVEUAAABSUlIpKSkVFRU8PDxJSUkNDQ1NTU0eHh4sLCwHBwdAQEAFBQUGBgZHR0cQEBAJCQlMTEwLCwsgICAfHx82NjY4ODhDQ0NKSkpGRkZFRUUiIiIhISFLS0tEREQMDAwcHBwbGxs3NzcODg4aGho5OTkZGRk6Ojo9PT1CQkIPDw8YGBg7OzsSEhIUFBQTExMXFxc0NDQWFhYzMzMwMDAkJCQlJSUvLy8mJiYnJycoKCguLi4tLS0rKysqKipQpd6BAAABC0lEQVR42u3TTVeCQBTG8eeCvAoBpZkVpGBFBVqWJYp8/4/VzLiIdnB3nuNvAQcW/8Mwd3B2doqqofPugQ81Ed2MZz64HFKMAzehAoMLomkAFhmwvLX8CBccx4BJQgWOYyCTgRwcrcAUHK2AwZqHVuAWHK1ACo5WYIn+1nojA66nPY9X6CvbTWhfqQAQPI3u7GWPWQrvcxIcGYiyNCYlKmx04v5EJCRaKJcQ6/JIfs7Lrbhfo4tEbvu+BLyDCsSPM8Czc/kaXQzl6IfZ5qVR/+DSBxapRULxii58bUJKrQJu+WWoYa57nGlzsdltrx4cuYSVJa8fb2CYJ+ILdLKKUY8t/K9sBsG3+ff8CwzKEzaCXZKSAAAAAElFTkSuQmCC
""")

# Summer Game Fest
imgBgSummerGameFest = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAMAAACVQ462AAAA8FBMVEUAAABSUlIqKipCQkIWFhY0NDQ7OztLS0sMDAwGBgYeHh4RERElJSUvLy8FBQVMTExISEhAQEAJCQkfHx89PT08PDwcHBxHR0chISE5OTkHBwcPDw9KSkpNTU0ODg4NDQ0LCwsKCgo3Nzc2NjY6OjpJSUkgICAxMTE1NTU4ODgiIiIyMjIdHR0zMzNFRUUSEhIbGxsYGBgUFBQTExMaGhoZGRkXFxc/Pz9ERERDQ0MVFRU+Pj5BQUEwMDAkJCQmJiYnJycoKCguLi4tLS0sLCwrKyspKSlQUFBRUVFPT09OTk4ICAgQEBABAQEDAwMEBATbDXZqAAAB6ElEQVR42u3T2XLaQBAF0NsCzGKQgYhNRnHCThQWY8ACYxM2SUAg//83gdZoMEVS5Uc/cF5U09VcmtaAq6urc/XyH3yY3uPHfifOs6b9TDSyy8uzrt+3vnsVZ3oKDrZFGyxapLadzc4CtInIHjWxoZM7G5eiWt5rXRg/x4ubTGI4CIei8Ow1yoUM8oRXbQrhf2Zro7MiZn6tunOwOFELlgh4xRtRH9JUhQ50xdIalF2RYA5JA3sptr7A5hnCteVqHks24HtwYwjqGBwC9hFAscYu+fovLe7Z5Ur8OM5wgwFNUU/JgCUl0/Bsa8BEWZIUiudU75NOcoVCziEip2l2FmUnI3dXJToeIgM+mhSrkDTpU5MDRocwuQMT8eMgQp6/aYfeDyA9uAwo+AFG2xFV59k4BewmXCvxCp8a2AcufwIHsKpljcJ0JAMeRWvqQRQUK0hSl5coA+4iOIzqngUUSHASaf81yhFaQdLeB0z5kHgfcO/I22l+44rtGLdL/yIl3QRYgDcCpiePhwpEmqf9FpWvZW5kx/OM9jp8DId0UazTQVAcaqdptrwRVxP3Uv6ZLDvbnU5oHZG15jqclx22samLW0xE60YH5+yKkiKylOYc0k5XcaL6k/2iovId/2KWVHzA/knHJ/MXzG44Kh+XIGcAAAAASUVORK5CYII=
""")

# BRANDING

# CriticalChicken.com
imgBranding = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAEAAAAANAQMAAAAjYfovAAAABlBMVEUAAAD///+l2Z/dAAAAWElEQVR42mNI8GRgSVFQYGCYwMHAMoUByGiNlXjSqqxyiqHNU1WlbclKXYYWT0WVliWGLxmmAEWmLFnJyZCiMuNSymSVlwxowHAWlOEVCmU4haKJMBpOBQBg9xbvishOngAAAABJRU5ErkJggg==
""")

# MAIN

def main():
    # For linting
    excerpt_strip_bold_op = ""
    excerpt_strip_bold_ed = ""
    excerpt_strip_strong_op = ""
    excerpt_strip_strong_ed = ""
    excerpt_strip_italic_op = ""
    excerpt_strip_italic_ed = ""
    excerpt_strip_em_op = ""
    excerpt_strip_em_ed = ""
    finalheadline = ""
    finalcategory = ""
    finalexcerpt = ""

    get_feeds = http.get("https://www.criticalchicken.com/wp-json/wp/v2/posts?_fields=title,categories,excerpt&per_page=1", ttl_seconds = 900)
    if get_feeds.status_code != 200:
        return connectionError()
    get_headline = get_feeds.json()[0]["title"]["rendered"]
    get_category = get_feeds.json()[0]["categories"]
    get_excerpt = get_feeds.json()[0]["excerpt"]["rendered"]

    # Strip out HTML tags that might appear in the excerpts
    excerpt_strip_bold_op = get_excerpt.replace("<b>", "")
    excerpt_strip_bold_ed = excerpt_strip_bold_op.replace("</b>", "")
    excerpt_strip_strong_op = excerpt_strip_bold_ed.replace("<strong>", "")
    excerpt_strip_strong_ed = excerpt_strip_strong_op.replace("</strong>", "")
    excerpt_strip_italic_op = excerpt_strip_strong_ed.replace("<i>", "")
    excerpt_strip_italic_ed = excerpt_strip_italic_op.replace("</i>", "")
    excerpt_strip_em_op = excerpt_strip_italic_ed.replace("<em>", "")
    excerpt_strip_em_ed = excerpt_strip_em_op.replace("</em>", "")

    finalheadline = str(get_headline)
    finalcategory = str(get_category)
    finalexcerpt = str(excerpt_strip_em_ed)

    # Colour palette
    red = "#d20202"
    blue = "#1564dc"
    orange = "#f47614"
    yellow = "#ffdc17"

    # Decide which titleTag and backdrop to show

    # Set fallbacks
    txColour = red
    ttleTag1 = imgTagLatest
    ttleTag2 = imgTagNone
    backdrop = imgBgLatest

    # News
    if "[2.0" in finalcategory or " 2.0" in finalcategory:
        ttleTag1 = imgTagNews
        backdrop = imgBgNews

        # Video
        if "[31.0" in finalcategory or " 31.0" in finalcategory:
            ttleTag1 = imgTagVideo

        # Update
        if "[29.0" in finalcategory or " 29.0" in finalcategory:
            ttleTag1 = imgTagUpdate

        # Site update
        if "[27.0" in finalcategory or " 27.0" in finalcategory:
            ttleTag1 = imgTagSiteUpdate

        # Rumour
        if "[25.0" in finalcategory or " 25.0" in finalcategory:
            ttleTag1 = imgTagRumour

        # Live updates
        if "[18.0" in finalcategory or " 18.0" in finalcategory:
            ttleTag1 = imgTagLiveUpdates

        # Link
        if "[16.0" in finalcategory or " 16.0" in finalcategory:
            ttleTag1 = imgTagLink

        # Updated (News | Updated)
        if "[30.0" in finalcategory or " 30.0" in finalcategory:
            ttleTag1 = imgTagUpdated

    # Feature
    if "[10.0" in finalcategory or " 10.0" in finalcategory:
        txColour = blue
        ttleTag1 = imgTagFeature
        backdrop = imgBgFeature

        # Opinion
        if "[21.0" in finalcategory or " 21.0" in finalcategory:
            ttleTag1 = imgTagOpinion

        # Interview
        if "[15.0" in finalcategory or " 15.0" in finalcategory:
            ttleTag1 = imgTagInterview

        # Guide
        if "[12.0" in finalcategory or " 12.0" in finalcategory:
            ttleTag1 = imgTagGuide

        # Guest blog
        if "[11.0" in finalcategory or " 11.0" in finalcategory:
            ttleTag1 = imgTagGuestBlog

    # Review
    if "[13.0" in finalcategory or " 13.0" in finalcategory:
        txColour = orange
        ttleTag1 = imgTagReview
        backdrop = imgBgReview

        # Second look
        if "[26.0" in finalcategory or " 26.0" in finalcategory:
            ttleTag1 = imgTagSecondLook

        # Preview
        if "[23.0" in finalcategory or " 23.0" in finalcategory:
            ttleTag1 = imgTagPreview

        # Hands on
        if "[14.0" in finalcategory or " 14.0" in finalcategory:
            ttleTag1 = imgTagHandsOn

        # First impressions
        if "[24.0" in finalcategory or " 24.0" in finalcategory:
            ttleTag1 = imgTagFirstImpressions

    # #ForTheGaymers
    if "[34.0" in finalcategory or " 34.0" in finalcategory:
        ttleTag2 = imgTagForTheGaymers
        backdrop = imgBgForTheGaymers

    # #ForTheGaymers
    if "[452.0" in finalcategory or " 452.0" in finalcategory:
        ttleTag2 = imgTagDungeonsAndDragons
        backdrop = imgBgDungeonsAndDragons

    # Ace Attorney
    if "[4.0" in finalcategory or " 4.0" in finalcategory:
        ttleTag2 = imgTagAceAttorney
        backdrop = imgBgAceAttorney

    # State of Play
    if "[28.0" in finalcategory or " 28.0" in finalcategory:
        ttleTag2 = imgTagStateOfPlay
        backdrop = imgBgStateOfPlay

    # Pokémon
    if "[448.0" in finalcategory or " 448.0" in finalcategory:
        ttleTag2 = imgTagPokemon
        backdrop = imgBgPokemon

    # Pokémon Presents
    if "[22.0" in finalcategory or " 22.0" in finalcategory:
        ttleTag2 = imgTagPokemonPresents
        backdrop = imgBgPokemon

    # Nintendo Direct
    if "[20.0" in finalcategory or " 20.0" in finalcategory:
        ttleTag2 = imgTagNintendoDirect
        backdrop = imgBgNintendoDirect

    # Summer Game Fest 24
    if "[33.0" in finalcategory or " 33.0" in finalcategory:
        ttleTag2 = imgTagSummerGameFest24
        backdrop = imgBgSummerGameFest

    # E3's future
    if "[8.0" in finalcategory or " 8.0" in finalcategory:
        ttleTag2 = imgTagE3sFuture
        backdrop = imgBgE3

    # News alert
    if "[19.0" in finalcategory or " 19.0" in finalcategory:
        txColour = yellow
        ttleTag1 = imgTagNewsAlert

    # Breaking news
    if "[5.0" in finalcategory or " 5.0" in finalcategory:
        txColour = yellow
        ttleTag1 = imgTagBreakingNews

    # Live
    if "[17.0" in finalcategory or " 17.0" in finalcategory:
        txColour = yellow
        ttleTag1 = imgTagLive
        backdrop = imgBgLive

    # Exclusive
    if "[9.0" in finalcategory or " 9.0" in finalcategory:
        txColour = yellow
        ttleTag1 = imgTagExclusive
        backdrop = imgBgExclusive

    return render.Root(
        show_full_animation = True,
        delay = 50,
        child = render.Stack(
            children = [
                animation.Transformation(
                    child = render.Box(width = 64, height = 9, color = txColour),
                    duration = 9,
                    delay = 5,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 24)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 9, src = ttleTag1),
                    duration = 9,
                    delay = 5,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 24)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 13, src = imgBranding),
                    duration = 14,
                    delay = 0,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, -13)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Box(width = 64, height = 32, color = "#000000"),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 0.00000001,
                            transforms = [animation.Translate(0, 24)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 32, src = backdrop),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(64, 0)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                render.Box(
                    child = render.Marquee(
                        child = render.Column(
                            children = [
                                render.Box(
                                    width = 64,
                                    height = 1,
                                ),
                                render.WrappedText(
                                    content = finalheadline,
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = "#000000",
                                    linespacing = 1,
                                ),
                                render.Box(
                                    width = 64,
                                    height = 2,
                                ),
                                render.WrappedText(
                                    content = finalexcerpt,
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = "#000000",
                                    linespacing = 1,
                                ),
                            ],
                        ),
                        height = 32,
                        offset_start = 105,
                        offset_end = 32,
                        scroll_direction = "vertical",
                    ),
                ),
                render.Box(
                    child = render.Marquee(
                        child = render.Column(
                            children = [
                                render.WrappedText(
                                    content = finalheadline,
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = txColour,
                                    linespacing = 1,
                                ),
                                render.Box(
                                    width = 64,
                                    height = 2,
                                ),
                                render.WrappedText(
                                    content = finalexcerpt,
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = "#ffffff",
                                    linespacing = 1,
                                ),
                            ],
                        ),
                        height = 32,
                        offset_start = 105,
                        offset_end = 32,
                        scroll_direction = "vertical",
                    ),
                ),
                animation.Transformation(
                    child = render.Box(width = 64, height = 9, color = txColour),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 0.00000001,
                            transforms = [animation.Translate(0, 24)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 9, src = ttleTag1),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 0.00000001,
                            transforms = [animation.Translate(0, 24)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 9, src = ttleTag2),
                    duration = 10,
                    delay = 96,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, -9)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
            ],
        ),
    )

# ERROR MESSAGE

def connectionError():
    return render.Root(
        show_full_animation = True,
        delay = 50,
        child = render.Stack(
            children = [
                animation.Transformation(
                    child = render.Box(width = 64, height = 9, color = "#717070"),
                    duration = 9,
                    delay = 5,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 24)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 9, src = imgTagError),
                    duration = 9,
                    delay = 5,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 24)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 13, src = imgBranding),
                    duration = 14,
                    delay = 0,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, -13)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Box(width = 64, height = 32, color = "#000000"),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 0.00000001,
                            transforms = [animation.Translate(0, 24)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 32, src = imgBgError),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(64, 0)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                render.Box(
                    child = render.Marquee(
                        child = render.Column(
                            children = [
                                render.Box(
                                    width = 64,
                                    height = 1,
                                ),
                                render.WrappedText(
                                    content = "We couldn't get the latest post.",
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = "#000000",
                                    linespacing = 1,
                                ),
                                render.Box(
                                    width = 64,
                                    height = 2,
                                ),
                                render.WrappedText(
                                    content = "We'll try again in a few minutes.",
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = "#000000",
                                    linespacing = 1,
                                ),
                            ],
                        ),
                        height = 32,
                        offset_start = 105,
                        offset_end = 32,
                        scroll_direction = "vertical",
                    ),
                ),
                render.Box(
                    child = render.Marquee(
                        child = render.Column(
                            children = [
                                render.WrappedText(
                                    content = "We couldn't get the latest post.",
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = "#ffffff",
                                    linespacing = 1,
                                ),
                                render.Box(
                                    width = 64,
                                    height = 2,
                                ),
                                render.WrappedText(
                                    content = "We'll try again in a few minutes.",
                                    font = "tb-8",
                                    align = "left",
                                    width = 64,
                                    color = "#ffffff",
                                    linespacing = 1,
                                ),
                            ],
                        ),
                        height = 32,
                        offset_start = 105,
                        offset_end = 32,
                        scroll_direction = "vertical",
                    ),
                ),
                animation.Transformation(
                    child = render.Box(width = 64, height = 9, color = "#717070"),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 0.00000001,
                            transforms = [animation.Translate(0, 24)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 9, src = imgTagError),
                    duration = 25,
                    delay = 50,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, 32)],
                        ),
                        animation.Keyframe(
                            percentage = 0.00000001,
                            transforms = [animation.Translate(0, 24)],
                            curve = "ease_in_out",
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
                animation.Transformation(
                    child = render.Image(width = 64, height = 9, src = imgTagNone),
                    duration = 10,
                    delay = 96,
                    origin = animation.Origin(1, 1),
                    keyframes = [
                        animation.Keyframe(
                            percentage = 0.0,
                            transforms = [animation.Translate(0, -9)],
                        ),
                        animation.Keyframe(
                            percentage = 1.0,
                            transforms = [animation.Translate(0, 0)],
                        ),
                    ],
                ),
            ],
        ),
    )

# SCHEMA

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
        ],
    )
