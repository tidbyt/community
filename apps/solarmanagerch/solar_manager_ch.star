"""
Applet: Solar Manager Ch
Summary: Show solarmanager.ch status
Description: Multiple screen selections will disable animations. For animated screens, run separate instances of the app and select 1 screen per instance.  For API Key : authorize with your Solarmanager username and password at: https://external-web.solar-manager.ch/swagger and copy the long string that follows after '-H authorization: Basic'.  For Site ID : check the back of your solarmanager device for the SMID code.  If you have an aux sensor the ID can be found be executing the GET/v1/info/senors/(smid) command on the solarmanager API. Add your car's sensor ID by copying the value found in the "Data" section in the Solarmanager API. For multiple cars use a separate app instance.
Author: tavdog, marcbaier
"""

load("encoding/base64.star", "base64")
load("encoding/json.star", "json")
load("http.star", "http")
load("humanize.star", "humanize")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")

DEBUG = False
#DEBUG = True # set to True to skip api calls and use dummy data

GRAY = "#777777"
RED = "#AA0000"  # very bright at FF, dim a little to AA
GREEN = "#00FF00"
ORANGE = "#FFA500"
YELLOW = "#FFFF00"
WHITE = "#FFFFFF"

SOLAR_MANAGER_LOGO = base64.decode("""
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
""")

BATTERY_0_TO_25_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAitJREFUOBGlU81r1FAQn/eSzcduKGrBlRUseBJaRARBelDU3jwIQj146t/hKf4RXjx78qMHUTxYFQQpqFso2JNViwq7Lq1d2ybpJi9vnHnZtMlRnCUvk5n5/ebrrYCqIAj6IZve//h1UyKc/p0kuBntbdw+P/PEhFZiqlAgmGADIkp6yeXvPz9vZIgfh7v4oLv6Zf4hWCGG7DuIZXUMAiEo852lmbaV7b/yA3nEd84cleA7OeagcC9V6tt2sqv+WOhdC6+v9ZESMsZmlluPgJlziLK2HcjpRqMFO+lTuNx5aXK87c3ZfuNcU7nxySzO2mTslxhT0vR80bfTShRggiAj7XuAg3QFBmkXPJcbjLXWI2i0tCICKDGmArgbkimE3voU9aeF6ztCWqfgq7rPseDZc0LnSoyiBLQpeh1KjCEITRjAh8cdRE7gUEpq0BYd41GoqcEcYLhDQy7mWGIOCNgQTKagKU66fFAgDdAIkTFB7hIRmA6oXq4ZwBDQ20iaEo61nAAcWyyJFcPFxUljNyZzFPUcfv+z9t8EtRY4Pd8sZ3xLaGJFRXxjSNunh7qsSY3AIVdCwe8sazzEQwJGXSAfx1SlRrBG3tlE4b3tofCE4B1QQQgWCEy0Fi9onV1Jf7GK1Ai2nMCa2uqLq0uvsUmr0MVO6NQihiZ+unJRPD8W1DDcMgsPU8PCwokbg8HqpSg+7kqhNaLxS6pmpHL5xnU2n01MnIXFxV6J+Qsqw+boee0udAAAAABJRU5ErkJggg==
""")

BATTERY_25_TO_50_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAl1JREFUOBFlU01rE1EUPffN5GUSWqwiTS1ScaU0COrSVcH+g1JX7vpHxo3/QXeCq4wLEXRTRBAE0VoUCbqprY0ltbW0sfloJvPe9b6XNE3tDW/e5M49555z5w1hNBgkP3apj7XfC8S4utdqYbfT2bh/u/zMl47UjEIhMHKJSqUSYA7h+5+/1jZ6llf2D/np6uf1+A3CxcpiMCQZoD2IBUzSOX5ZnjKq+7o4FkxE+tqEQkEbNsi4mZps/aB1aBq2k7v7cOFbPY6hZNnQEd1LoGQzxvZKuUIwG+YKaKQvMDe9LGnC2/p8GOVuFnXUnj7irCTJenW2r9gBUV7s+w60cJgOoNq2GIF30lXspJ8Q5cFEbWttFzq02SjGK8CDWHIxat9LyGmCLmilghn8yB67WkThPFnBdZsdsFView3HGE8Q+zJg5fklVjIMaO1aIqRp/yRj6wwSDv460/4tHWOGBC4xdkEcKwOljdgQdzJAH47UyDjzlkSBT8VydcsTyD4MK41IFqSpG6AP2YSL2Lnv4/t5uZ4hcE96XuSwRm4cA/2P9QVnCQQ8HrA4kIPhidwhcYIYTSEaaBqynyJ419RYmtzH0vUaiiHBDpQoOdPtjPDo6xSebI4Pwe7mFIFLdA1ju2Hk1YnqAYFT0DXEqREf2lWdxCmCqSjjRpZHvXcFEcvAB9+Hc3OUWWqkhBnKePME31dQrVa9te1uGF4+38CdyQ9cCJmsNHShyFLH5PnLzg16VS/6pscY/ycplxlJAhSD3a1W7s9y7dZFreTQjShIRcFWM9jDObPrSJMk8Qb/AT5iBQQ1e0IyAAAAAElFTkSuQmCC
""")

BATTERY_50_TO_75_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAnFJREFUOBF9U8FOE1EUPXfmzXSKGkAMIAmG4AKl0RC+wERM/ABx5cfUjf+gexe2rkxcGKILF0oIYIRUFpBCY7TQQmkL7TAzb97zzkwH25h4J5OXd+ecc9+59w2hPzSIHx2lVivVJ4KMmZNOB3XXPXi2mHsbQ/sw/VQwjaJEoVAwkYf4WvlVPgiUXj8906+/fd9/uQ5rubBsXor02DEpn4fBr8q/z02G5H3KXjVHspm5YQNZO9QhQpz7gX/Qcs9lMzSshy8e71RTjoiESvNJdR/+pOOYdy07i5b/Dg+mVvgr4XN1STjWwpDldG+GrpzgZDXlGJFAbjnxbQsllXIBo6uGHOiav4mavwEnA02cU8qDiTDs58QnwPM85/I4LE9zQQk7a5Fh3KKyfBVh4YglUkrC67jQYVSzjJQTC+QjFMeXN6MQpgkzYxMMgqCpOM990DpUkI02pBEPicslEVtIN9fZXWYkRNtWumkpHIsgfk8tTW07hHNDYXQ8IaacxEKSw9EpMMOAR/OSLIsvRFIMxLPypcLaJqFy1AP3lgGBnYaNxdku5mbaiFwMCATA7p6NDxv/Ebg/4aPWNLG6dQWWGBQIAoV6Q+LeLGGbe5jGwAm22MJT7tvCHe5Fhi+nSmCGCe15hN+HhI97KTVZBwQmbBtSdtFqudoSINXrAQ+EAskTDC2MsjWucxkDAmMZqTuewMnZMNk2aaWSGxo30VfUcS8weY30PwKlUin+J350hFicvUDu9rnmJtLfJmp4Aen9ikUrWzoumnLiTTGX0ygWMZ2ler2Jk7VtZ0ywbxaIhfkEWkpFx42wMT1u137uguHF2OAfS78XoMc1c1kAAAAASUVORK5CYII=
""")

BATTERY_75_TO_100_MAIN_SCREEN = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABCgAwAEAAAAAQAAABAAAAAAx28c8QAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAmNJREFUOBF9U7tuE0EUPXf2bRwICClKEAglBQluUCroEKTgA0jBD/ARVKahpkW0VHZoaBEUNKRIIkRkIQVEHAkRlAjHsbO73tcMd2azlt1wrbVnjs8596G7hMlQIP4oDW0eHD22Sd38G4boxWn3yeryhqFOcCalYBlpoNVqWXgK5/PBr/1uJtXWyVC92fnSfbUFZ721bo1NztVG1GxC8COfvV2Zt4LsQ1C3ZmverUuEwC1UgQJnaZZ2T+NhflpYzoMXj74dVhpbG3Vul9nhiznHt1YcN0A/fYf7C+/5X8KnwzXbd+/UnCCaL+J8jsHDSiO0QWO97Nu1R7mUEWsiWfOgjpIdHCXb8F0oYkzKBBaKYlJjKsDzJmNN/N67RsJW8GZsEuIG7RevNRe+tUaFzJEMRlCF7vonKo0xaGoWx+bLeeXfzVB/yBeXONuqwXkOCqnC8GOG0YYpgNOVYVqoLvUlzubnwCAE9UPI/sA8dBISDSIEQY76vVJYacoWSoy/U6jEhjXyiBwulTdCLwXpYy4hRzHgmDUZK6YNzlzQYgxxPYLweKNkySOuU6WA2BOIt8dac5g2uJyi6DNp1wPZZQWGpY+ZQt7L4C4ywjOsYtrgBLAXgAvLAuRxWqnKFiwuJlEI/xDCH/9roe6iyGPEp4niCs7fCs7Fb4jK2aQQcN0qd/k7XQEPEYkFa3iRyCUFyUKt1y2kktI4As0YaOxiDDqdDlOAPHKt2mwCe+lMscFkBUBGMjsQIvoqpzTm0m40FNptOAEdZz3Vk7vOFd4iHoDOzaGtcil4iD37qn2M72B62wzjH1EjDPby6ailAAAAAElFTkSuQmCC
""")

BATTERY_CHARGE_ANIMATION_10x10 = base64.decode("""
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
""")

BATTERY_DISCHARGE_ANIMATION_10x10 = base64.decode("""
R0lGODdhCgAKAOYAAAAAAPMqHOoyLeA0L8Y1ReI4Ltg7Mys/UkBAQABBQQBBUShBUzdBTzlBT31DQchFOrBHPjRKWmdKWJBKSL9KQDlLWbFLRDtNTkNOTQBPUUtPSzhQXwBRYBZRX2xRSi9SYTdSYTpSTYVUUj5WYUBWVkFWYWpZWIpZVkRaWT9bWx1cXC5dXU5dXGJdXFBfXglgXQBhXRJhYRthYUZhXk5hXgBiYkNiYi9kYFNxRFZ8P1B9QS6ARECAQFyDVV6IWGCIWH+1M4G5MYC/AITEAIzGO5fHrYnJCI7LOKLPgq7Tz43UAKXUfZHYALrcwsTf3MTg3P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAkAAFEALAAAAAAKAAoAAAdHgFGCUU5Jg4NERkhIQ0CHR0xLS0pBhz0+Ojo9OIcjIBsHEQ2HMzYXISgYhzYoCQkkF4csMhMOKqqDKy0GJiu4gjYsKSqpgoEAIfkECQAAUQAsAgAAAAYACgAABzuAUVFOSYJERkhIQ0BHTEtLSkE9Pjo6PTgjIBsHEQ0zNhchKBg2KAkJJBcsMhMOKhgrLQYmK6QsKSqjgQAh+QQJAABRACwCAAAABgAKAAAHO4BRUU5JgkRGSEhDQEdMS0tKQT0+Ojo9OCMgGwcRDTM2FyEoGDYoCQkkFywyEw4qGCstBiYrpCwpKqOBACH5BAkAAFEALAIAAAAGAAoAAAc9gFFRTkmCREZISENAR0xLS0pBPT45Oj04JSAcCxUMNDcQHi8aNScBAiIZLDEWBSkXKy0GLCoYNi4oKygYgQAh+QQJAABRACwCAAAABgAKAAAHPYBRUU5JgkRGSEhDQEdMS0tKQT0+OTo9OCUgHAsVDDQ3EB4vGjUnAQIiGSwxFgUpFystBiwqGDYuKCsoGIEAIfkECQAAUQAsAgAAAAYACgAABz2AUVFOSYJERkhIQ0BHTEtLSkE9Pjk6PTglIBwLFQw0NxAeLxo1JwECIhksMRYFKRcrLQYsKhg2LigrKBiBACH5BAkAAFEALAIAAAAGAAoAAAc9gFFRT0mCREZISENAR0xLS0pBPT86Oz04JR8dBBIKNDUPFDAaNScBAyIZLDEWBSkXKy0GLCoYNi4oKygYgQAh+QQJAABRACwCAAAABgAKAAAHPYBRUU9JgkRGSEhDQEdMS0tKQT0/Ojs9OCUfHQQSCjQ1DxQwGjUnAQMiGSwxFgUpFystBiwqGDYuKCsoGIEAIfkECQAAUQAsAgAAAAYACgAABz2AUVFPSYJERkhIQ0BHTEtLSkE9Pzo7PTglHx0EEgo0NQ8UMBo1JwEDIhksMRYFKRcrLQYsKhg2LigrKBiBACH5BAkAAFEALAIAAAAGAAoAAAc9gFFRT0mCREZISENAR0xLS0pBPT86Oz04JR8dBBIKNDUPFDAaNScBAyIZLDEWBSkXKy0GLCoYNi4oKygYgQAh+QQJAABRACwCAAAABgAKAAAHPYBRUU9JgkRGSEhDQEdMS0tKQT0/Ojs9OCUfHQQSCjQ1DxQwGjUnAQMiGSwxFgUpFystBiwqGDYuKCsoGIEAIfkECQAAUQAsAgAAAAYACgAABz2AUVFPSYJERkhIQ0BHTEtLSkE9Pzo7PTglHx0EEgo0NQ8UMBo1JwEDIhksMRYFKRcrLQYsKhg2LigrKBiBACH5BAkAAFEALAIAAAAGAAoAAAc9gFFRT0mCREZISENAR0xLS0pBPT86Oz04JR8dBBIKNDUPFDAaNScBAyIZLDEWBSkXKy0GLCoYNi4oKygYgQAh+QQJAABRACwCAAAABgAKAAAHPYBRUU9JgkRGSEhDQEdMS0tKQT0/Ojs9OCUfHQQSCjQ1DxQwGjUnAQMiGSwxFgUpFystBiwqGDYuKCsoGIEAIfkECQAAUQAsAgAAAAYACgAABz2AUVFPSYJERkhIQ0BHTEtLSkE9Pzo7PTglHx0EEgo0NQ8UMBo1JwEDIhksMRYFKRcrLQYsKhg2LigrKBiBACH5BAkAAFEALAIAAAAGAAoAAAc9gFFRT0mCREZISENAR0xLS0pBPT86Oz04JR8dBBIKNDUPFDAaNScBAyIZLDEWBSkXKy0GLCoYNi4oKygYgQAh+QQJAABRACwCAAAABgAKAAAHPYBRUU9JgkRGSEhDQEdMS0tKQT0/Ojs9OCUfHQQSCjQ1DxQwGjUnAQMiGSwxFgUpFystBiwqGDYuKCsoGIEAIfkECQAAUQAsAgAAAAYACgAABz2AUVFPSYJERkhIQ0BHTEtLSkE9Pzo7PTglHx0EEgo0NQ8UMBo1JwEDIhksMRYFKRcrLQYsKhg2LigrKBiBACH5BAkAAFEALAIAAAAGAAoAAAc9gFFRT0mCREZISENAR0xLS0pBPT86Oz04JR8dBBIKNDUPFDAaNScBAyIZLDEWBSkXKy0GLCoYNi4oKygYgQAh+QQJAABRACwCAAAABgAKAAAHPYBRUU9JgkRGSEhDQEdMS0tKQT0/Ojs9OCUfHQQSCjQ1DxQwGjUnAQMiGSwxFgUpFystBiwqGDYuKCsoGIEAIfkECQAAUQAsAgAAAAYACgAABz2AUVFPSYJERkhIQ0BHTEtLSkE9Pzo7PTglHx0EEgo0NQ8UMBo1JwEDIhksMRYFKRcrLQYsKhg2LigrKBiBADs=
""")

BATTERY_NOFLOW_ANIMATION_10x10 = base64.decode("""
R0lGODdhCgAKANUAAAAAADlAT0BAQD5MTDdOXUJPTTdQXzZSYUBWYT1aWkFfXkVgYEJiX0piYlNxRFB+QUCAQFyDVF6IWH+1M4G5MYC/AITEAIzGO5fHrYjJCI7LOKLPgq7Tz47UAKXUfpHYALrcwsTf3P///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAkAACMALAAAAAAKAAoAAAY3wJFwFOIMh5fMZmOZHDUfj6dDOUYkj0fEcUQcCAZC4LhgJBKKAllxTgzW7fdQwT7LhY16Qj0KAgA7
""")

BATTERY_CHARGE_STATUS_0_25_10x10 = base64.decode("""
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
""")

BATTERY_CHARGE_STATUS_25_50_10x10 = base64.decode("""
R0lGODdhCgAKANUAAAAAAABAQDdAT0BAQD5FUjZMTj1NTjdOXTpOXEBPSzdQXzxRX0RRUTZSYDtTYEBWYR9ZW0VZZStaXD1bWylfYEBfXUZhYEJiXlRjXktkY1VkYFhkXXNoVXppU3htWY9uR5ZvQZdxQlVzRpV0TLN9O1B+QUCAQICAQL6BMsGCLVyDVLyDPl+EWl6IWH+1NIG6M4C/AITEAI3GPZfHrYjJCI7LOJDLPqLPgq7Tz43UAKXUfpHYALrawsTg3P///wAAACH5BAkAAD8ALAAAAAAKAAoAAAY2wJ/w18MNhzLa7RZzHW07nS73OrJapZJKdIw0DooD4Zi5TCYVBvl8Vg8zFbZbmGFP5j+4XBgEACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAYqwN+vhxPKaLdbzGXb6XS5F6tVKqlEkcZBcSBkLpNJhZEJh8kVM9k8QauDACH5BAkAAD8ALAIAAAAGAAoAAAY1wN+vhxPKaLdbzFXb6XS5l6pVKqlED8digRBYKBCIJJHxdDocw2aVSpEKmBUK9daMQKGPIQgAIfkECQAAPwAsAgAAAAYACgAABjXA36+HE8pot1vMVdvpdLmXqlUqqUQPx2KBEFgoEIgkkfF0OhzDZpVKkQqYFQr11oxAoY8hCAAh+QQJAAA/ACwCAAAABgAKAAAGNcDfr4cTymi3W8xV2+l0uZeqVSqpRA/HYoEQWCgQiCSR8XQ6HMNmlUqRCpgVCvXWjEChjyEIACH5BAkAAD8ALAIAAAAGAAoAAAY1wN+vhxPKaLdbzFXb6XS5l6pVKqlED8digRBYKBCIJJHxdDocw2aVSpEKmBUK9daMQKGPIQgAIfkECQAAPwAsAgAAAAYACgAABjXA36+HE8pot1vMVdvpdLmXqlUqqUQPx2KBEFgoEIgkkfF0OhzDZpVKkQqYFQr11oxAoY8hCAAh+QQJAAA/ACwCAAAABgAKAAAGNcDfr4cTymi3W8xV2+l0uZeqVSqpRA/HYoEQWCgQiCSR8XQ6HMNmlUqRCpgVCvXWjEChjyEIACH5BAkAAD8ALAIAAAAGAAoAAAY1wN+vhxPKaLdbzFXb6XS5l6pVKqlED8digRBYKBCIJJHxdDocw2aVSpEKmBUK9daMQKGPIQgAIfkECQAAPwAsAgAAAAYACgAABjXA36+HE8pot1vMVdvpdLmXqlUqqUQPx2KBEFgoEIgkkfF0OhzDZpVKkQqYFQr11oxAoY8hCAA7
""")

BATTERY_CHARGE_STATUS_50_75_10x10 = base64.decode("""
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
""")

BATTERY_CHARGE_STATUS_75_100_10x10 = base64.decode("""
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
""")

BATTERY_CHARGE_TEST_10x10 = base64.decode("""
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
""")

AUTARKY_16x16 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAbwAAAG8B8aLcQwAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAKGSURBVDiNfZJtaM1hGMZ/9/P/73TOzFvIZuMYJ8uStywjhSQhSxvLywdbJNl88V1a2VfJbKVEjVJn+TRqQlvxQfJW7GSRaENsM+Ts5f/y3L44pzPk+Xjd1+/qeu5uUVVy377+usWhyA6E9Sjrbg5OLylw7FDU2FS+obmv/MK9XL8BaKLJANT219cFIrcRiYvV6xHrrUrMoHi6GzQbw1j/hNu1oLfhhiAmEyC7Ph7Nj4bePUVfAittGFbdiF/9NKlWh8RI4Zftb0yMjMsdC5Hh5S1FilrjTHgRhUpBKsTRmr/gTqnUCX6wjIN9S1pefVl+fr4Bb37v8Q4AkzeaHhWkWyGt1tk+Ce6Rhfqd+yJ41NCekWdGdeuQl1dVlmrcIn8uMRe20GPeEWcaZ6jWU7njeKrxlrXEzP9gII6Lzw+a/7TkYbvGrSk3NR/qKydN7sucLAwQkIchTVJ66ZTSjC0WiyR/hma2MaodtYMNBdkAIQC6gKGsZjF4JPCxGelF6bnPJVHvmBGVZ+F4enXWvEFHzCY9ZqAI4e3vvh4FrKVa3+eWfb207ZJB9LERJn8DCJWdKIvUxSdKJbv1+b/WJXv7DyeU8K64UpEsvDz4WxbbwzNgivnGPnbrkwywMNV47bvvVIkQzHODBSZZcumNomc10NZsbA9rgajx2ZgLA+RH7IVQxR3xnZlWZJaoKoLInoG6TmBUXGlIXrwyDMBptbnwktTRlV/82IOYCQfGrFM8NzZemj0kQaRm4NAJQU6CtlnloROd8rTvqzcnHUYOj1mz7VvgrJgb8dvflrce2UyT283p4K9LrB04koDgACprVHTVrcEZhVNd+zHm2EdRR9telbV25/p/AZhtE/ThSw0TAAAAAElFTkSuQmCC
""")

EV_CHARGING_16x16 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAB2AAAAdgFOeyYIAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAArtJREFUOI11k0to1GcUxX/3+08SMxNFrNpYE9+C8RGliBupJmpiEIKBOMUHFhQXYoVSiKGiJt+oCx0GuhAR6mtVtZlIDBYSkhhEEBcWIRpHRR2Mxlh8YZsZJzaZ73ZjZRzt2V04nHPuS8hCmbW+L5JUApUGZqugCvckLV0vR2vnZWtHMvmSWQTrQxWqehQYVqEFx10DTmG+CjUCBpHvm8ONlz4RqK2320U5iLKzOWJ/AzQrnATr7AYVjoiwOxq2v3wQCNbZFSo0iTHl0cMNt7LbykRtnS0VoVuUb6MR2y3BYJPnpsdixhGKRuwZgAs337QhVH1kL7StnT92zXvDjc7QuMBPiY+pd6pEGYlG7Nmfu/pmeM4UI3yT7azK8iOdT8pGxD3+cdXUs7W77N7eQVntc6IVCC2ASpqZKW9wR0/iYeAz6f2jZOIPuQSOAnGgFaMVPgMzQKIAxn9q2cuhZ9UP/xpDIL+IcTkFALweTpBM9TPT+7u6eNSkXqDLwD2FGp+CoioAJXJj63f5f3iRd8uY++UKKguXAtDx51ViT69Rl3fFu87ircA+T+gYdvLKhxDHMQegXSv7Tw4VfZXSXHqfdPD7wBUA3qaHUC1ke6qGyXlz++Ei58J2ABjwiZMuFY0Ae3IfFbfmxf9ZMmnihAcFCwu2ZQ4g0ZM48fr5i1l5s4sufLSdMmt945PEEAktmvf15TfJ5LH8/MC5A1uqz2QS952+uDGVSq4vyMnZcft+b/k8v/5qrXUCsK4+tBLVaNqY8pbDDT3/d0T7r3csfTeY2Hu//VY4bbTv/CEbNwDN4cZLIvzkOde9rj60iawf+S8tpA/mjvFXTVk+Z7NxUks28X2SY4ADWhG5K6qqUAKsLSwt7ptQMrkUON64uKrhEwGAYLDJc9NiqwVWAdMADyGuSueCAO3WWpfJ/xczZBKg/h8O2gAAAABJRU5ErkJggg==
""")

CUSTOM_SENSOR_16_16 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAACXBIWXMAAAPvAAAD7wHnP/QUAAAAGXRFWHRTb2Z0d2FyZQB3d3cuaW5rc2NhcGUub3Jnm+48GgAAAohJREFUOI1tUl9I02EUPeeba9Bm/kuzQvPfQpTa1rQCDYR806iQoPAlQoKITKJe1ERKJEIpeqqE6qGXHhxEgVQKFQVK4ZYoUpugZoogKjibP92+24NO1+q83e+ce889l4/YwOeh0fNC+VV+oOhd9O2W31GsqI4ryOSqZe1ja9bIPOJAABgYHU0Lr0pAk5VKowKi+8pcxb62MXc5RF8kkQfATbBbU5qa87wTWwMEbB0ofZtjrprPTjjdYoH5iwlrRUcdjqlYp3a/K10UmwCp1VrO3LT73gMAr73Jz6JJ+yxWM7apxIXChLrXZ92XGuJXjaJtzFVDoCui9bEW+7cRFQlHrocNnbo8b6QGfy/uGIrcexXbsDS458ry1527o3VzvreblA6T4kMAUCCHQawAwFoofL/98I++qHjZm1lKyA1rydxM7FBbJNgJMKc94CxTGYVJ42m5SeMCXkgJ2jqiosWh7BQBX4AYjo9Rbw8YJDyarE4A1H6Thd8fVI0/jQpEwKBv9RnAXAgWgoOZd8QkzxMds5vDRHNEEZUKWhRElmIdQoO7jpDcC2AWxCGQp1YskYlYDaENEbEoAacA5saS292z/TbnTAmJTyBWSJ5LL5z7y0STeaD8VGGL8QGAuzVwMCM+qxa4CF62Oqe98RzIExT0qo3v6TEzoTGWX/DmJBPotzqnn8T3tvmdJymSapNgjwIAIRoBqW0bc9VERcmhsGENmerim2/73flU7KJIQ709YHCLcFYoRQ8pHbZIsLPeHjD+56wUH0PY2VgweHf9mDG45XcUm5R6BGAfCQ8gw6JpCJG/nllSRcvVZrvv5eYp/jkOgPaAs0yT1QQKAFgAmaSg1ybBnvjN/gABgQjIrnX3XQAAAABJRU5ErkJggg==
""")

# need 5 items because 100% is index 4
battery_level_icons = [BATTERY_CHARGE_STATUS_0_25_10x10, BATTERY_CHARGE_STATUS_25_50_10x10, BATTERY_CHARGE_STATUS_50_75_10x10, BATTERY_CHARGE_STATUS_75_100_10x10, BATTERY_CHARGE_STATUS_75_100_10x10]
battery_level_mains = [BATTERY_0_TO_25_MAIN_SCREEN, BATTERY_25_TO_50_MAIN_SCREEN, BATTERY_50_TO_75_MAIN_SCREEN, BATTERY_75_TO_100_MAIN_SCREEN, BATTERY_75_TO_100_MAIN_SCREEN]
soc_color = [RED, ORANGE, YELLOW, GREEN, GREEN]

BATTERY = base64.decode("""
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
""")

PLUG = base64.decode("""
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
""")

SUN = base64.decode("""
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
""")

SOLAR = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACeklEQVQ4jY2TT0hUQRzHvzPz3u7bfe6umroQuKwmhCQbLNIfyDCIkoiog9XJolsdOglBVOKlgrqI9xAvhUJEEIKXwjpFqJERmbCRGKbRqrv73vO9+RPz8BCxoj+YP78fzGe+850ZKKV218YORPQoJnI3/82J7naMyYO24OQiq8Sfcds9ZpDylCQ1V2gpGNkdQMfEkaSEtwCgEQpLboV32r1zyzsD3rRY0qvtU0CRKDWmS0FZgTBy14irDdL//PO7mRXeEWyUTcKoMuIx7q2uWlZTkwfga9dy7ujAACRe5eoE6CJ3lA0JGVWsGZenf9JrHVYKQMpM1sR5qWSDkBSzrKhwXF0/NJX+1Bd6QNkZ5iNPDPo4apOMSMrTGO+I0CjD4uFGNS1cDzQSgf+nCGpG4BeL0DXpOQ87Z54YjMkXuDA7b8TwDWdnl5ihxtA751MAt861WXsguaCmCe44kEEAFovBX1uH4iKdiMt+nPpY0een1tpo6M1WHppYKBRGJr8HLePz3nG56YNXKojU18Fb/gUr3QSlUJJK5F/fyC/877FWoB/KvZMZYx/1PVcKDu664BUHNBqFt/JbK0mIsvey2iWFgNbW1h+Ukqc9zcYXCAkzkQg9IIxBeB4U55CB3949/L6rKkAHY+z++Vx9uqExsWImE+Hu+omYtbWQnINZFiAwui0gk8kUCVFDV9vNBV6uAIQiWNcmcqggCJUIx812P3p7vSogdJSQ4f0N0b3gQRDmjEH6PphtQ5TLW5+OPdgWkM1mPZOSwUv5hoKWbCaToQI9p5YVAsFoqnvow+2qgC3IaE9bbDMeYQ4ICRdq+caWijCkvHNiEAYA/AVIsU5KC49FbgAAAABJRU5ErkJggg==
""")
HOUSE = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAACxUlEQVQ4jXWSbUhTYRTHz3nuXq66efNlmzXFzKb5mltjM6sPBZVBZvq1PvWlooImFEooWSASlWDoPkQfIihKkSilUkHKXnyh8qXSwlq+Tm2WuJpe3e4Td+S1tTxwuIff+f8fzvPcg5RSWC2s0THXkCDpmHaeWE0j+x9ERLREaW+WJhsPIQJYNDFct2vKlpyaXkXkjEAFIMNDn0o8Hs9o0ASIyFijtHfLkrIKGlhKRFbIAz3Z19lx0HbGnGE2yyfHx+DKhVKLy+nsJv+Y5dZo3YPy5M2FDWGEFNXWgpgNoQzaM7Ozv7Y2uwWfD8JUalBxnEv0kL/MbE50zONyQ+a++nAlnrXb4UX7M3+KdX24Ao8CG9FUWfF9YnQEZicnDX7jnyuodmjWPn+0dbdwLK+AfnaM0ObmNrol3eRPsRaZ2BM1lg2GOY7j9ohegogR2yO1LSUb03Oa9JFYXFMDqjA1xMbFgixE4U+xFpnYEzXndetVJjlbhogcpqm5zooUU+aT+Bi2+GoVKJVK6U0WF3n/V6FYYTzPQ2WRDfYOTy6cG3jbh4msauc8CqcuXb+RF6IgshHHkCQ2pGSAjwJ8HOgP+FNqLtp78bStMQRJtWxo3t2GiNNKlt3ffKca8nUOSdjyPgN+LCxBltArsfHZJXCZjsAE7ymnlPYsL9IXo9EoPK1jICqMkcTMPAHQbILx9MMSmx4bAZ3PHbSJyV1dnQE7sRyhag7Sdh1YGX+gD352NAUdEBBegULr4C8ALcCCew7ab9VI/ZkpJ6Tp1qwcoDcwlzXxmHC/8TajXYYEITdVBXUugG3WJHjd+1IyrAsH6B/8QDTxWKo3MA5ZollWmHtcmfDm3jsKroSgaV71PISE/PYApgcgVlAVPrbzDoxLIb2xKTJYmNbFK92hPqNeLr1F3xT18qwA+tTFgKtSoPTbzNjo2IAXfgP14QtOLPDWZgAAAABJRU5ErkJggg==
""")
GRID = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAAwAAAAQCAYAAAAiYZ4HAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGeGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDIgNzkuMTY0NDYwLCAyMDIwLzA1LzEyLTE2OjA0OjE3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxuczpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIiB4bWxuczpwaG90b3Nob3A9Imh0dHA6Ly9ucy5hZG9iZS5jb20vcGhvdG9zaG9wLzEuMC8iIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiIHhtcDpDcmVhdGVEYXRlPSIyMDIzLTAyLTEzVDE1OjM5OjQwKzAxOjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMi0xN1QwODozODoxNCswMTowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMy0wMi0xN1QwODozODoxNCswMTowMCIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoxMTQ4NjFkYi1mMDk2LTQ0ODUtYjMyNy1jN2Y3ZWNlYjRiYTMiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTY4NjlFRkFBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpBNjg2OUVGQUEzQzkxMUVEQjVGRkY3MjA5MjZFQjM3MSIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkE2ODY5RUY3QTNDOTExRURCNUZGRjcyMDkyNkVCMzcxIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkE2ODY5RUY4QTNDOTExRURCNUZGRjcyMDkyNkVCMzcxIi8+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249InNhdmVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjExNDg2MWRiLWYwOTYtNDQ4NS1iMzI3LWM3ZjdlY2ViNGJhMyIgc3RFdnQ6d2hlbj0iMjAyMy0wMi0xN1QwODozODoxNCswMTowMCIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDxwaG90b3Nob3A6RG9jdW1lbnRBbmNlc3RvcnM+IDxyZGY6QmFnPiA8cmRmOmxpPnhtcC5kaWQ6QTY4NjlFRkFBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzE8L3JkZjpsaT4gPC9yZGY6QmFnPiA8L3Bob3Rvc2hvcDpEb2N1bWVudEFuY2VzdG9ycz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz648dNvAAACH0lEQVQokZVRX0hTcRT+zu9uzt27u7nhZBKUexECZ+UQxYKyXrICCVkkZVAQ4V5Det2DIFG9VAzyoaA/oxgR9RCGUJrEnPYHC0REECUh0hzqbl7v3e7pYWzMvfU9nnO+73zfOcTM+B/YAICIUCSGBh7F13//WgYAX11g749bl6PlBGJmEBE674xf0jbM45nVxfCFK82vAeDZw+/dXn/wi+Kxv/9w/ehjZoYoqI4OBeqkc6dOq+uWZW2BqQZMNZZlbXWdcWfq/SISGhgdKlnyqKLh54qxPDu7vS67qCmZSE0BgOxyNr15tfHW5ZEcHlU0AACYGX3vVs8zM5gZjf3D6dh0ejA2nR5s7B9OF+vFGRsAbGadayduj90TEimGaelgqgEAw8xvd90du7+tWbJ7f/g5gEKGxfTk2aZmh9xxpHpGUSmUTKRyyUQqp6iiub3DuXAw7LSWUp+7SxncHlGb+vh3Td9BPSyaj1xszwJA8unM/MsX2UCVAztuj6gtEQItrePJk644AOzpS8fAVAsAmT+rIytPrsYAIDKSjZb+UI5DN+Jf82b+EwBIdunwt5vRlvK+2PVFImib+kRPb5vU09smaZv6BBGBiHYTyouy4vAyI8OMjKw4vOViuzYU7+3zq0EWPMeC53x+NVhp2YYK5I38pGDRCQCmbk5V9omZca31wBgA5ESVYlQr+5AztwpydrVK15ZslqEBwIPpmWP/AP8h6z0LPIXhAAAAAElFTkSuQmCC
""")
GREEN_ANIM = base64.decode("""
R0lGODlhBwAQAKIEAEhsBIXBDb/iQElsBP///wAAAAAAAAAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDYuMC1jMDAyIDc5LjE2NDQ2MCwgMjAyMC8wNS8xMi0xNjowNDoxNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2ZjcyNmRlMi05NTNmLTQwYmEtOTA3Yy0yNmVlMDg3ZTMxOWEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6MTAxQzdERTdBMjQ1MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MTAxQzdERTZBMjQ1MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpiZmU5YTI5MS02MjBhLTQ3NTItOWRhZS1lOWU2MGM1YWViOWUiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDo2ZWYxNzU1Zi0zYzE1LWY5NGMtODkzNC1jN2FjYjhjZTVhMDEiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4B//79/Pv6+fj39vX08/Lx8O/u7ezr6uno5+bl5OPi4eDf3t3c29rZ2NfW1dTT0tHQz87NzMvKycjHxsXEw8LBwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGgn56dnJuamZiXlpWUk5KRkI+OjYyLiomIh4aFhIOCgYB/fn18e3p5eHd2dXRzcnFwb25tbGtqaWhnZmVkY2JhYF9eXVxbWllYV1ZVVFNSUVBPTk1MS0pJSEdGRURDQkFAPz49PDs6OTg3NjU0MzIxMC8uLSwrKikoJyYlJCMiISAfHh0cGxoZGBcWFRQTEhEQDw4NDAsKCQgHBgUEAwIBAAAh+QQFAAAEACwAAAAABwAQAAADDki63P4wskEAoVTqzWMCACH5BAUAAAQALAAAAAABAAEAAAMCSAkAIfkEBQAABAAsAAAHAAEAAQAAAwIoCQAh+QQFAAAEACwAAAAAAQABAAADAkgJACH5BAUAAAQALAAABwABAAEAAAMCOAkAIfkEBQAABAAsAAAAAAEAAQAAAwJICQAh+QQFAAAEACwCAAcAAQABAAADAhgJACH5BAUAAAQALAAAAAABAAEAAAMCSAkAIfkEBQAABAAsAgAHAAEAAQAAAwIICQAh+QQFAAAEACwAAAAAAQABAAADAkgJACH5BAUAAAQALAIABwADAAEAAAMDOBQJACH5BAUAAAQALAAAAAABAAEAAAMCSAkAIfkEBQAABAAsAgAHAAMAAQAAAwMINAkAIfkEBQAABAAsAAAAAAEAAQAAAwJICQAh+QQFAAAEACwGAAcAAQABAAADAhgJACH5BAUAAAQALAAAAAABAAEAAAMCSAkAOw==
""")
RED_ANIM = base64.decode("""
R0lGODlhBwAQAJECAP8AAIUJCf///wAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDYuMC1jMDAyIDc5LjE2NDQ2MCwgMjAyMC8wNS8xMi0xNjowNDoxNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2ZjcyNmRlMi05NTNmLTQwYmEtOTA3Yy0yNmVlMDg3ZTMxOWEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTY4NjlFRjJBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QTY4NjlFRjFBM0M5MTFFREI1RkZGNzIwOTI2RUIzNzEiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDpiNDE5ZDEyZC1jYzY3LTQwYmQtODY5Mi0wMGY1MzMwZmI5N2YiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDplMGFkZGY2Zi1jZGMzLWI3NDQtYTRkNC02MGYyMTg4NjhjOGUiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4B//79/Pv6+fj39vX08/Lx8O/u7ezr6uno5+bl5OPi4eDf3t3c29rZ2NfW1dTT0tHQz87NzMvKycjHxsXEw8LBwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGgn56dnJuamZiXlpWUk5KRkI+OjYyLiomIh4aFhIOCgYB/fn18e3p5eHd2dXRzcnFwb25tbGtqaWhnZmVkY2JhYF9eXVxbWllYV1ZVVFNSUVBPTk1MS0pJSEdGRURDQkFAPz49PDs6OTg3NjU0MzIxMC8uLSwrKikoJyYlJCMiISAfHh0cGxoZGBcWFRQTEhEQDw4NDAsKCQgHBgUEAwIBAAAh+QQFAAACACwAAAAABwAQAAACDJSPqcuNIaB0tFpXAAAh+QQFAAACACwAAAAAAQABAAACAlQBACH5BAUAAAIALAYABwABAAEAAAICRAEAIfkEBQAAAgAsAAAAAAEAAQAAAgJUAQAh+QQFAAACACwGAAcAAQABAAACAkwBACH5BAUAAAIALAAAAAABAAEAAAICVAEAIfkEBQAAAgAsBAAHAAEAAQAAAgJEAQAh+QQFAAACACwAAAAAAQABAAACAlQBACH5BAUAAAIALAQABwABAAEAAAICTAEAIfkEBQAAAgAsAAAAAAEAAQAAAgJUAQAh+QQFAAACACwCAAcAAQABAAACAkQBACH5BAUAAAIALAAAAAABAAEAAAICVAEAIfkEBQAAAgAsAgAHAAEAAQAAAgJMAQAh+QQFAAACACwAAAAAAQABAAACAlQBACH5BAUAAAIALAAABwABAAEAAAICRAEAIfkEBQAAAgAsAAAAAAEAAQAAAgJUAQA7
""")

YELLOW_ANIM = base64.decode("""
R0lGODlhBwAQAKIGAKRrHKNqHKNrHKNqG///Vv//Vf///wAAACH/C05FVFNDQVBFMi4wAwEAAAAh/wtYTVAgRGF0YVhNUDw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDYuMC1jMDAyIDc5LjE2NDQ2MCwgMjAyMC8wNS8xMi0xNjowNDoxNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2ZjcyNmRlMi05NTNmLTQwYmEtOTA3Yy0yNmVlMDg3ZTMxOWEiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6QTRCODI4RkFBNkQ5MTFFRDhBMTNDN0FFMjJBREQxNEYiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6QTRCODI4RjlBNkQ5MTFFRDhBMTNDN0FFMjJBREQxNEYiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo0MWI3ODc4My01YjZiLTRmYjEtOWVhMC00Y2E1NTIxZjViZDUiIHN0UmVmOmRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDphMzU5MjQxZi02ZTQ5LWY1NDQtODRmMy1hZWYyNzIxZWE3MTciLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4B//79/Pv6+fj39vX08/Lx8O/u7ezr6uno5+bl5OPi4eDf3t3c29rZ2NfW1dTT0tHQz87NzMvKycjHxsXEw8LBwL++vby7urm4t7a1tLOysbCvrq2sq6qpqKempaSjoqGgn56dnJuamZiXlpWUk5KRkI+OjYyLiomIh4aFhIOCgYB/fn18e3p5eHd2dXRzcnFwb25tbGtqaWhnZmVkY2JhYF9eXVxbWllYV1ZVVFNSUVBPTk1MS0pJSEdGRURDQkFAPz49PDs6OTg3NjU0MzIxMC8uLSwrKikoJyYlJCMiISAfHh0cGxoZGBcWFRQTEhEQDw4NDAsKCQgHBgUEAwIBAAAh+QQFAAAGACwAAAAABwAQAAADDmi63P4wsmAoMEPqzWUCACH5BAUAAAYALAAABwAHAAEAAAMECKYaCQAh+QQFAAAGACwCAAcABQABAAADBCgWJgkAIfkEBQAABgAsAAAHAAcAAQAAAwUYNiYGCQAh+QQFAAAGACwAAAcABwABAAADBEi2YJIAIfkEBQAABgAsAAAAAAEAAQAAAwJoCQAh+QQFAAAGACwAAAcABwABAAADBAhW1pAAIfkEBQAABgAsAAAHAAcAAQAAAwQYRqaTACH5BAUAAAYALAIABwAFAAEAAAMECEYmCQAh+QQFAAAGACwAAAcABwABAAADBAi2CwkAIfkEBQAABgAsAgAHAAUAAQAAAwQYNlYJACH5BAUAAAYALAIABwADAAEAAAMDKAYJADs=
""")

SUN_SUM = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAAXNSR0IArs4c6QAAAJZlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgExAAIAAAARAAAAWodpAAQAAAABAAAAbAAAAAAAAABIAAAAAQAAAEgAAAABd3d3Lmlua3NjYXBlLm9yZwAAAAOgAQADAAAAAQABAACgAgAEAAAAAQAAAAqgAwAEAAAAAQAAAAoAAAAAFL8o+gAAAAlwSFlzAAALEwAACxMBAJqcGAAAAi1pVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyI+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+d3d3Lmlua3NjYXBlLm9yZzwveG1wOkNyZWF0b3JUb29sPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6T3JpZW50YXRpb24+MTwvdGlmZjpPcmllbnRhdGlvbj4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+NzI8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgp0/eNQAAABK0lEQVQYGU2QvUpDQRCFz+xujJCACKKgFoKdjyAEa30AYyX+pIqgtfaCT2CV2ElQe7E26WMj2JqAYKGF5N549+7uuJNIyIEtZvg45+yAGYQppe3qmbypFYQxRODhc7UWmD9KW/ePXumu4cACJp3qtgJWiO4aRhYCsaIl93p8FMcDjh72Zf8hDPLcMd6FmcQKpOdmmsg8IH5Fgu3/nBc3W1cjMG3vncb4bmG+dKlndcUPnQWRQpYbm9qeIlP3wa3FCiM+9v0XSQoT5z7yQPSPYp5E81vtEOXCDZIcfmChywb2K4vRt+No4ZPO7o4KarGwUDI+tRc+c0YTrtnztwP1ypXW0zg60DIp/jQbzYb7tSeKVF0+IZCmsCpmRo4pd5JBpKHX4f2osjjJTpg/YduKRIzK4+cAAAAASUVORK5CYII=
""")

PLUG_SUM = base64.decode("""
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
""")

EMPTY = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAAAcAAAAQCAYAAADagWXwAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKn2lUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNi4wLWMwMDIgNzkuMTY0NDYwLCAyMDIwLzA1LzEyLTE2OjA0OjE3ICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtbG5zOnRpZmY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vdGlmZi8xLjAvIiB4bWxuczpleGlmPSJodHRwOi8vbnMuYWRvYmUuY29tL2V4aWYvMS4wLyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDItMTNUMTQ6MTc6NTcrMDE6MDAiIHhtcDpNb2RpZnlEYXRlPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiB4bXA6TWV0YWRhdGFEYXRlPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgcGhvdG9zaG9wOklDQ1Byb2ZpbGU9InNSR0IgSUVDNjE5NjYtMi4xIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjQ1OWVjNDYzLThiMzYtNDc2ZC05YjY2LTQ2ZjM2NmIzNTZmMCIgeG1wTU06RG9jdW1lbnRJRD0iYWRvYmU6ZG9jaWQ6cGhvdG9zaG9wOmQ2ZGY2MGY5LWViZTItY2Y0OS1hMDI5LTkwZjE4YzQ4OGUyNyIgeG1wTU06T3JpZ2luYWxEb2N1bWVudElEPSJ4bXAuZGlkOjZmNzI2ZGUyLTk1M2YtNDBiYS05MDdjLTI2ZWUwODdlMzE5YSIgdGlmZjpPcmllbnRhdGlvbj0iMSIgdGlmZjpYUmVzb2x1dGlvbj0iNzIwMDAwLzEwMDAwIiB0aWZmOllSZXNvbHV0aW9uPSI3MjAwMDAvMTAwMDAiIHRpZmY6UmVzb2x1dGlvblVuaXQ9IjIiIGV4aWY6Q29sb3JTcGFjZT0iMSIgZXhpZjpQaXhlbFhEaW1lbnNpb249IjciIGV4aWY6UGl4ZWxZRGltZW5zaW9uPSIxNiI+IDx4bXBNTTpIaXN0b3J5PiA8cmRmOlNlcT4gPHJkZjpsaSBzdEV2dDphY3Rpb249ImNyZWF0ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NmY3MjZkZTItOTUzZi00MGJhLTkwN2MtMjZlZTA4N2UzMTlhIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTEzVDE0OjE3OjU3KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6Y2NhNWUzNTYtOGMwNC00NDdmLWI5M2EtYmI0NGQ4NjJmNTBlIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTEzVDE0OjQ0OjIzKzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6M2E4ODlkOTMtYzIzYi00OWE5LWFiMzAtZjExNzc1ODMyYTUxIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY29udmVydGVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJmcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3AgdG8gaW1hZ2UvcG5nIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJkZXJpdmVkIiBzdEV2dDpwYXJhbWV0ZXJzPSJjb252ZXJ0ZWQgZnJvbSBhcHBsaWNhdGlvbi92bmQuYWRvYmUucGhvdG9zaG9wIHRvIGltYWdlL3BuZyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6NDU5ZWM0NjMtOGIzNi00NzZkLTliNjYtNDZmMzY2YjM1NmYwIiBzdEV2dDp3aGVuPSIyMDIzLTAyLTE2VDE2OjM3OjM5KzAxOjAwIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6M2E4ODlkOTMtYzIzYi00OWE5LWFiMzAtZjExNzc1ODMyYTUxIiBzdFJlZjpkb2N1bWVudElEPSJhZG9iZTpkb2NpZDpwaG90b3Nob3A6ZTBhZGRmNmYtY2RjMy1iNzQ0LWE0ZDQtNjBmMjE4ODY4YzhlIiBzdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NmY3MjZkZTItOTUzZi00MGJhLTkwN2MtMjZlZTA4N2UzMTlhIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+55hYNAAAABdJREFUGJVj/P//PwMuwIRTZlRykEoCAIOxAx1aidCyAAAAAElFTkSuQmCC
""")

VW_LOGO_18x18 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAAXNSR0IArs4c6QAAAOZlWElmTU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgExAAIAAAAhAAAAZgEyAAIAAAAUAAAAiIdpAAQAAAABAAAAnAAAAAAAAABcAAAAAQAAAFwAAAABQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkAADIwMjM6MTI6MTIgMTk6Mzg6MTQAAASQBAACAAAAFAAAANKgAQADAAAAAQABAACgAgAEAAAAAQAAABKgAwAEAAAAAQAAABIAAAAAMjAyMzoxMjoxMiAxOTozNzoxMQDDLpyLAAAACXBIWXMAAA4mAAAOJgGi7yX8AAAHvGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgICAgICAgICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICAgICAgICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAyMy0xMi0xMlQxOTozODoxNCswMTowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+QWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjMtMTItMTJUMTk6Mzc6MTErMDE6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDIzLTEyLTEyVDE5OjM4OjE0KzAxOjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAyMy0xMi0xMlQxOTozNzoxMSswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpiYWYyMGY2My1lNDQ4LTQ2ZTgtODZiYi03Yzc5ODk5MmUyYzI8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y3JlYXRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAgIDx4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+eG1wLmRpZDpiYWYyMGY2My1lNDQ4LTQ2ZTgtODZiYi03Yzc5ODk5MmUyYzI8L3htcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD4KICAgICAgICAg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
""")

TESLA_LOGO_18x18 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABKgAwAEAAAAAQAAABIAAAAAaZPfVgAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAAAp9JREFUOBF9U89PE1EQnnm7rZAYesC0BRNDsbFKTTysXrV69OZBb544+A+gHtSEiwf/Bv0DDCcPmHjw5METewLEQqURBGmJChLI1u6+8ZttF2ioTrLvzY9vvpk37y1TV5rny0Ur4XUR8kiowEQZhHLENNiB8AGJNKHvCHMdum+i6ENuvfZF49wYu/hAWCYFiYZ4S0jWSHibjfwhkvfQm0gUa2nUMXJTLKeJJYtC55CfsyBmkpcuSCbgqBqheegXwH0ZebfQ1agQn83Xq/e14lah9BS+eyDZRIE1xBbQ/SwIrwibS9gBGiu9zaXc220r9MtGOyCro7ORnJvKN8L2c4DSWTf1sNlubwjTNlLGhx1nyGWmRhS+ya9W77hK5IqdaoRhFuo7dPBMfc1CabJl7StD9ETtwEZoSKby9eXXan8fL71g4RuGzSO13Wkic+bryhL0a/iOiSwHYgkzCOHkfRHHccxKAhhZrT5OdMzXmGkiK5VK3JkGpFxO6+44th5Y2cexXAdmKPIz5HBNY4tdjOqaC4yNZxQ7UFV3FSiYIxnc6Hza0ASORy1cd65evapxxHqw6lNMLJqsnxpKAt2SkWUXOTpUyGddZtCd7sfxah8SqaGiAN/zYjAYFx04lAbX/UnjdysVpY0Lqp3I4WwSh+6DQaC5gMsCXgRaE4pEFmPf3l4nFhtHS1+iiYGBuCJKLwWYFi7eniKpapp/lNuj9WUHi54o+lEsDoWRsw47sK3ThdFN/yCJ9bDAODGjLgDPh2i4VvuNxA0W+tYl0cJxrIs73PoSAS1znpfqolZwnbVY9zx9M+A+KX1npDAvGTjJAjpqqa+2u9u3sMb+SeQnA7c0J8bob0LFTKbvsf5LNOv7kQLItD/iT+ocJ/HFgd7lL0EZGcp+HLlVAAAAAElFTkSuQmCC
""")

AUDI_LOGO_24x9 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAJCAYAAAAo/ezGAAAAAXNSR0IArs4c6QAAAOZlWElmTU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgExAAIAAAAhAAAAZgEyAAIAAAAUAAAAiIdpAAQAAAABAAAAnAAAAAAAAABIAAAAAQAAAEgAAAABQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkAADIwMjM6MTI6MTIgMTk6NDQ6MTQAAASQBAACAAAAFAAAANKgAQADAAAAAQABAACgAgAEAAAAAQAAABigAwAEAAAAAQAAAAkAAAAAMjAyMzoxMjoxMiAxOTo0MjozOADcND1IAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHvGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgICAgICAgICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICAgICAgICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAyMy0xMi0xMlQxOTo0NDoxNCswMTowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+QWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjMtMTItMTJUMTk6NDI6MzgrMDE6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDIzLTEyLTEyVDE5OjQ0OjE0KzAxOjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAyMy0xMi0xMlQxOTo0MjozOCswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDo1Zjg3NjBjMC1lZTMzLTRkMTItODEzNC0wYjgyOTRhNDVlZTA8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y3JlYXRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAgIDx4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+eG1wLmRpZDo1Zjg3NjBjMC1lZTMzLTRkMTItODEzNC0wYjgyOTRhNDVlZTA8L3htcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD4KICAgICAgICAgPHhtcE1NOkRvY3VtZW50SUQ+eG1wLmRpZDo1Zjg3NjBjMC1lZTMzLTRkMTItODEzNC0wYjgyOTRhNDVlZTA8L3htcE1NOkRvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpJbnN0YW5jZUlEPnhtcC5paWQ6NWY4NzYwYzAtZWUzMy00ZDEyLTgxMzQtMGI4Mjk0YTQ1ZWUwPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8cGhvdG9zaG9wOklDQ1Byb2ZpbGU+c1JHQiBJRUM2MTk2Ni0yLjE8L3Bob3Rvc2hvcDpJQ0NQcm9maWxlPgogICAgICAgICA8cGhvdG9zaG9wOkNvbG9yTW9kZT4zPC9waG90b3Nob3A6Q29sb3JNb2RlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpYUmVzb2x1dGlvbj43MjwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+NzI8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgq0VnHwAAAC8klEQVQoFTVSa0iaURjuk6kVrtKS1EVQUpNJLlnT8EfrMgJpwYr1L/LHkFqQ/RDnQljOMegythbFBoNdfhSNwWIoBINqZaPCIsM27UJ2N53XoA231D0n5guH9/uec97nPe9zHioFkUgkaBsbGy9WV1dvHxwc0I+Pjw+npqa0ExMTxfPz8107Ozupfr//dHR09JHdbvctLCz0b25ucgOBQGx2dvb1yMiIeXt7u9/hcIh9Pl8My7q0tHRvbm4uRIGc2tvbcywvL8dBoC8sLAwcHR0pm5qajHQ6PWw2mzvS09PX3W63RKlUDhUVFaWCVI8zX9GAJ5fL+ysrK4sXFxdfTU5Ovs/Ly0uj0Wj6eDx+HZcQpaDbgMVisZNJkoGmCqvV+quxsdEJUibBgbGdTqe7tbU1UlNTI0me9Xg8k0ajMVFRUaFKYiR3d3d/0Gq1X4g0DWNjYx0EHB4eZpFss9l6INeD6urqdalU2kUw/BuxrCKRqK+qqqqPYC6X6w4mzz47O2uoq6t7SLDBwcHzC9XW1nbk5ubKaPv7+/Stra19ssnlcn+TDMk4GHlRKBQ6MzIyBATb3d0VQKbvkGSJzWZzkxjqD1Uq1becnBwGMKZGo4kiUwqFIsDn8/006HhWWlp66X9BKsmhUCjM4XCuCQSC4lgsdkywSCTiwUOLcCspk8kMEOzk5MQDifkMBkOemZn5F1AUUpJGCSx2NoIGMgs2nwNI0el0pySr1WqDRCLpAcEVg8HQS7CWlpbHmPAGHHYfLjqXDUb4GEZguk/geULOURT1h2S48VkwGLRT+L7Q2dn5Axvh/Px8XVlZ2c+CgoJbsF3v+Ph4OCsr665MJnNdRUDKtzMzM0xMosGjTpWXl/O8Xu/QysqKCE0HoPsbsVicBtd1ra2t3ayvr79MGpBgtLe3vwSZEjajWCxWEEVa3KCYx+PpoSUFyWKwpml6etpXUlLSh2kuAqdhyncmk+lzc3PzU7yNEPWJaDRqa2trU4PX+w+XaYFJmUb6mwAAAABJRU5ErkJggg==
""")

BMW_LOGO_18x18 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABIAAAASCAYAAABWzo5XAAAAAXNSR0IArs4c6QAAAIRlWElmTU0AKgAAAAgABQESAAMAAAABAAEAAAEaAAUAAAABAAAASgEbAAUAAAABAAAAUgEoAAMAAAABAAIAAIdpAAQAAAABAAAAWgAAAAAAAABIAAAAAQAAAEgAAAABAAOgAQADAAAAAQABAACgAgAEAAAAAQAAABKgAwAEAAAAAQAAABIAAAAAaZPfVgAAAAlwSFlzAAALEwAACxMBAJqcGAAAAVlpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IlhNUCBDb3JlIDYuMC4wIj4KICAgPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAgPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KGV7hBwAABHhJREFUOBFlVFtsFGUU/ua69+12dwsVClnpllJouZU+GARaKNH4gBTbxltiYjQNCfpCvD2ITYgEDb6QYAwSH+SmS0IqiYiKUJaLtZaLbbVIL9vtdne71263OzszO7sz/rMYXzzJlzn/yX++/zvn/89QIKZpGnXy5Em2p6dHIT7tvz2wN5nKPGO1mJtKxaI3HIlSNNRHwdDsn8uWVl3p6Xmjj6IolaSyvb29qg5KJ/L5fEx3d3fJ5/t+I2fmPlUUdbcglbCxaTWWuOwIzYSQTKVw+nwfli1xQJbEn11O5zuHDx/6g6TThAgMUcA0NjaWrvn9u6qq3FeygrJ2KjSHdCwicUpWMfIMlctL6s07A/Ld+6OlWDzBcjxba7UYX2pr2zXo9/dPtba2UmVF09PTDdFY4p6jwmGMJ9NC/9VfDLzZypaq68AbeLRUGyCLAs75vsPXX/Up/Te+kTiOs505ez5bWeHceuRI7yijl7Z1e9vFOq+3lmGYXDQUsCY1C13c0I6gsxZGayU6Nq7EunUNaNmyGfX1yxmO5QxNTY0LDMtWjI2NeX8fHDjHDA//9dzg0IMPHgyPylVOm3l0NoNYfSvypkpML0hwKSKeXmGGkSiz221YU78aAwO/ITgT4kZHhtVH44/q5rO5QXZicvzV8YkAwuEoFQuHsOKFA5B4C9REEumkhEVWglJ06MIhiBKsVit27tqpvfjKa8zQwE2huXkLO59M7KXnYvHNs+EInCYwKunJnL0GoXQOI5kifo3LCGRkMOVOAkaeKxPWrnqS6t63R/fp6cAEcoKwiRVF0RMMhUG7TXRdlRuctABNmsdSTYbDLMPDFxAIRbCYz0MUC6BpgON4WOwVOpEhlc6Qsg1rWKVQUNPpeSxms3jdzWFPixOCYABFMzByDMLxND7+MYDxooxqSOQ9JWBXZfDRIJq8bm1kIgmWZVRWVbUgT2PN7NSUmpiLMjxJ5h02ctjjehx2M6YKPG6JLOrUEsZTBbhLeaxPJTE3kVTIRnJ53Dhts1uGXE4rWZrUM99eRCQ6VybJSzL5ArJSQiUKsKg5LC9kYGNUbDOJwPwkEkCpueUpuNzOIfqJpcvO13k9JBRX7/iv4tSpU1pmIQtNVSHkFglyULIpCLEIRjM5tHAyCjP3MDN2VZ81Q8uWTfCsXHWJ7uzce9nj8dzSg1ZbhfjRoQ+po0c/wcOHf2MxJ0AkyiiFqCuI2GkQYAz4tbH+LzERQc5eUcmubWj4affuth/KL/vttw7cpmh2/4P7dw1Wi0W8fv0ad63/JsR8DrPhKNKREKrjY0gPX8bI9UtUOIscOdh28OBB4fmuzq4lLlccZHLJhQLHj3++rWNfp948jUBvUIGgSKC6CIyPfT1GGgTt3ffel+4MDu4gvm5ljv+c06d93jd79vu372jTyNzphP9DR8c+7dixz25MTk6u1hOJ0fr/7N83i7Iyok5vIE6c+OLZQHD65YXMfDNZ1hBSymQyhmqW19zbsGH92fb29iv6vq6uLubChQsl3f8HGgITdxFBGMsAAAAASUVORK5CYII=
""")

SEAT_LOGO_18x16 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABIAAAAQCAYAAAAbBi9cAAAAAXNSR0IArs4c6QAAAOZlWElmTU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgExAAIAAAAhAAAAZgEyAAIAAAAUAAAAiIdpAAQAAAABAAAAnAAAAAAAAABIAAAAAQAAAEgAAAABQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkAADIwMjM6MTI6MTIgMTk6NTQ6MDkAAASQBAACAAAAFAAAANKgAQADAAAAAQABAACgAgAEAAAAAQAAABKgAwAEAAAAAQAAABAAAAAAMjAyMzoxMjoxMiAxOTo1MzoxOQBJF6fYAAAACXBIWXMAAAsTAAALEwEAmpwYAAAHvGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgICAgICAgICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICAgICAgICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAyMy0xMi0xMlQxOTo1NDowOSswMTowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+QWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjMtMTItMTJUMTk6NTM6MTkrMDE6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDIzLTEyLTEyVDE5OjU0OjA5KzAxOjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAyMy0xMi0xMlQxOTo1MzoxOSswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDo1YWE4NzE5ZC03NzVlLTQwOGItYmRiNS1lZDJlYmNlYzdlYjU8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y3JlYXRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAgIDx4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+eG1wLmRpZDo1YWE4NzE5ZC03NzVlLTQwOGItYmRiNS1lZDJlYmNlYzdlYjU8L3htcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD4KICAgICAgICAgPHhtcE1NOkRvY3VtZW50SUQ+eG1wLmRpZDo1YWE4NzE5ZC03NzVlLTQwOGItYmRiNS1lZDJlYmNlYzdlYjU8L3htcE1NOkRvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpJbnN0YW5jZUlEPnhtcC5paWQ6NWFhODcxOWQtNzc1ZS00MDhiLWJkYjUtZWQyZWJjZWM3ZWI1PC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8cGhvdG9zaG9wOklDQ1Byb2ZpbGU+c1JHQiBJRUM2MTk2Ni0yLjE8L3Bob3Rvc2hvcDpJQ0NQcm9maWxlPgogICAgICAgICA8cGhvdG9zaG9wOkNvbG9yTW9kZT4zPC9waG90b3Nob3A6Q29sb3JNb2RlPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlvbj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpYUmVzb2x1dGlvbj43MjwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+NzI8L3RpZmY6WVJlc29sdXRpb24+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9uPgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgp9no1nAAADQElEQVQ4EY1US0/jVhQ+1484IXZskgwkgoBQNZl2ItRlu5iRpotqFv0HVdU/0g0sK1VCqoQQ8A+oukPq7NiNZjFqWYzEopkwNAkBbGzy8DN+9Lsu2fdIR8e+Pvc7r++YEZFycHDwU7vd/poxQcuybIkxKiRJKidJIqZpQnEcE56zMAzjKIrmnu9F7sz1ZrOZf3NzE/X7/d/o8PDw5zCMcP//SZqmHDCbTCaZbTuZaZrZ3t7eW2l7e/u7QkFGYhRBRWjGXx4lgV1oys8YT7dQYFz5tyAIjbW1tUTSNI0f8NQlAcIdEZUsyyIJIooiLRQ+hMpoPp/DRoQaOCjd3d21+GWDA8EGHGQ4HLLd3V35+Pg4wPFfgkCfqtXqbdUwZvX6CtN0vViBlEolQ1GUMu61XNftsQ+QDoSDLeTh4YFGoxHZjnPr2Pb1eDzuo7E9nHd7vd7fR0dHH+E7gIaLO2x/f/9HwzDKqFNtNBrrtVrtM13Xn8qyvAWnvHkL58lkyktOUZ4Zx9EI07yC9m3bfsfev//zQ6u1LmOMPUxhaJq3QzhbqN0HeKFerz9R1cqWLIvPUHobJVUrFZ0QKKcFH9Tp6aklzWbTzvLyMhWLxfbGxgahXugsxDTM6XR6Y1n3/3S73StE/d3zPAd9SVZWVlQEWldVdRP0etnvDxy2s7PzPabwlV7Rvyir5c/xsbW62iAOXi6X+RAoiRMCCQlAcJ3zAIMg8C+DIPiIZ8SwP+WjX/Tg0Wqwm9Bnr19/29nc3HoO0Ke6brQqmvZEN3Sq1eqcLqBASIpSpMGgfy6dnJz8IQhifTx+GCNCCH64vu970BAZxK47nV5dXnbNeyt89eqb0vNOR0Xp6f29LYC76HUseZ6vSJjYly9evGxalokoKcgWPRLuP+LF8Tw/x1qAgCmFYUAcJElijsL3Ck2f+2i2O3Icp4lkAnwQkRFDH7jm7OUs5wIghizRJxfAccafoQl6KgMslhSlIDQaq3R9PSoCKG8uCJ5Hj2MhXwO+frzpfORLS0v52DFlajabIp/y+fn5WwApv1xcXPwAVAmBddgytIg1K5RKgkSMGF9ADT8YmATKlzuQJNlFs8dnZ2dv8Af59V8oYzWYuMfgqgAAAABJRU5ErkJggg==
""")

SKODA_LOGO_18x18 = base64.decode("""
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
""")

OPEL_LOGO_23x18 = base64.decode("""
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
""")

RENAULT_LOGO_18x18 = base64.decode("""
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
""")

HYUNDAI_LOGO_24x12 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAMCAYAAAB4MH11AAAAAXNSR0IArs4c6QAAAOhlWElmTU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgExAAIAAAAkAAAAZgEyAAIAAAAUAAAAiodpAAQAAAABAAAAngAAAAAAAABIAAAAAQAAAEgAAAABQWRvYmUgUGhvdG9zaG9wIENDIDIwMTQgKE1hY2ludG9zaCkAMjAyMzoxMjoxOSAxNDoyODowNAAABJAEAAIAAAAUAAAA1KABAAMAAAABAAEAAKACAAQAAAABAAAAGKADAAQAAAABAAAADAAAAAAyMDIzOjEyOjE5IDE0OjI2OjI3ABXJjoMAAAAJcEhZcwAACxMAAAsTAQCanBgAAAlFaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJYTVAgQ29yZSA2LjAuMCI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAyMy0xMi0xOVQxNDoyODowNCswMTowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+QWRvYmUgUGhvdG9zaG9wIENDIDIwMTQgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjMtMTItMTlUMTQ6MjY6MjcrMDE6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDIzLTEyLTE5VDE0OjI4OjA0KzAxOjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAyMy0xMi0xOVQxNDoyODowNCswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpkZGFiYmExZi03YzI3LTRiNmUtYmE5MS04NDRkZjA5OWU2YzU8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgIDwvcmRmOlNlcT4KICAgICAgICAgPC94bXBNTTpIaXN0b3J5PgogICAgICAgICA8eG1wTU06T3JpZ2luYWxEb2N1bWVudElEPnhtcC5kaWQ6MTU1NGE0ZTAtMzFkYS00NDM1LWExMTQtY2JlYTIyZTgyMGM3PC94bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpEb2N1bWVudElEPnhtcC5kaWQ6NTQ3RTY2QkM2ODU3MTFFNEFFMjRFQkJDREVCMzhBRDA8L3htcE1NOkRvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpEZXJpdmVkRnJvbSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgIDxzdFJlZjppbnN0YW5jZUlEPnhtcC5paWQ6YzJlY2M1M2YtMjc2YS00YWIyLWJhOTMtZmY3ZmQ0ZTBiMGRmPC9zdFJlZjppbnN0YW5jZUlEPgogICAgICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD54bXAuZGlkOjE1NTRhNGUwLTMxZGEtNDQzNS1hMTE0LWNiZWEyMmU4MjBjNzwvc3RSZWY6ZG9jdW1lbnRJRD4KICAgICAgICAgPC94bXBNTTpEZXJpdmVkRnJvbT4KICAgICAgICAgPHhtcE1NOkluc3RhbmNlSUQ+eG1wLmlpZDpkZGFiYmExZi03YzI3LTRiNmUtYmE5MS04NDRkZjA5OWU2YzU8L3htcE1NOkluc3RhbmNlSUQ+CiAgICAgICAgIDxwaG90b3Nob3A6SUNDUHJvZmlsZT5zUkdCIElFQzYxOTY2LTIuMTwvcGhvdG9zaG9wOklDQ1Byb2ZpbGU+CiAgICAgICAgIDxwaG90b3Nob3A6Q29sb3JNb2RlPjM8L3Bob3Rvc2hvcDpDb2xvck1vZGU+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlhSZXNvbHV0aW9uPjcyPC90aWZmOlhSZXNvbHV0aW9uPgogICAgICAgICA8dGlmZjpZUmVzb2x1dGlvbj43MjwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+Ch7OungAAAPASURBVDgRbVQNSFtXFH7v5e/VHwo11ehgG2VsddOCJUYLA38GtmxlJEwzXRboWhpq1nSNBIIEk8DQLTI3l7DQ/dnWShxusw2atFOWZG21aeti09hGslmIrsFA1Ca6RF+a3J2rE+zYgcM595zvfPfe8+55JLElpNvtZtXV1T3Fy5GRkZzFxcXaVCp1GPRFoVBYkEgknkun03vC4fkMRZFpgCVAFyiK8rPZ7N+KiorcUqk0juuNRiPbYDBkSJJEJCwo0CxOWCyWciDRp1JJSTKZZMViMd/8/PwBleojdv+l/tDhhobT/TYb5/mSot00nVsIxK9yOJzXwO7j8Xh0fn6efWXlSa/JZPL/uxFFYgchRJrNveey2aziceRxcCkW+7yv7+IFOMHrQ0NDvwYe/kF9bNRVAfQOxv+PnDhx/Ph35RWVRPhRiBAIBOe1Wu1JwGUwlqXX6++YTJ1ILped2lGcazJ9Gpt58BARJQfHcRxuSu/IY7fy5VdKnU6nA/nvz6BPzP2+t4688b5KpULAeU+hUHCgLWbLVecoOnRIJMEVKrOKhy3Ij8vLy+jKFTsi6D2DWyGC6Orq2iuRSJqB4Nrw8DBKJFahASjz8+VR5r1WXRPGHT0qrlUqlaitTWMhhoZHVyZu+27hBLRjF7YgR2w2Gy5Mj42NoV00d72xsfEXuIF3cnISeTweNDc3h/NZ0NTS0hJ6Wyz9DBdqNJpcbL/5ttd9aaAvQ3xh+Trcerbdg4Mgmy2YmJi4u7q6ebJ1IMjMzs4ih8OBXC4XslqtUzU1NbhlG4ODg3gT5iurFcG6GRNsH9Ln+93jcDrT7Fjk0QVOZk3/Umlp9Z/BoBcwUi6XK8zLy2Pi8TgPiAmv13vD5/NdHBgYcNTX1y9iIpA+kiQ+iEQinA+VShesf2hqMnLhqaaOtbZVX7/prYn8tXAOA9labfs09BTJZLKGqupKN74yfDlE07xrkBdh0A7ZbuNPfr8fdXZ2MpB7YTsvFovfadcZkOrM2QDEeJvPFByqp6fn+42NjWNlZWXE9PQ9wmDQqyHeu134H7tfrVY/EIlEVEtLy5uQu9rULHtXsJevKeAXCJN/r53v7u5WQPzpM4PW0dFRXlFRoQ6HwxLYbB1uEoSXFIThmwWNhkKhJ3K5nBsIBL6Ej77PbrdnCwsFbhaLqqJBKIplZ5h1o06nm8EHgkexNWjgP/OrGB8f3x2NRusZhqmFjQ7AAJYAJh8si8/nc4qLi+PwjRampqaiwLsAOU9OTo4L+r8GPiZmg+IhQ/8ALM/byHrZM+sAAAAASUVORK5CYII=
""")

CUPRA_LOGO_18x18 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAASCAYAAABB7B6eAAAAAXNSR0IArs4c6QAAAOZlWElmTU0AKgAAAAgABgESAAMAAAABAAEAAAEaAAUAAAABAAAAVgEbAAUAAAABAAAAXgExAAIAAAAhAAAAZgEyAAIAAAAUAAAAiIdpAAQAAAABAAAAnAAAAAAAAABgAAAAAQAAAGAAAAABQWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCkAADIwMjM6MTI6MTkgMTQ6Mzk6MzAAAASQBAACAAAAFAAAANKgAQADAAAAAQABAACgAgAEAAAAAQAAABigAwAEAAAAAQAAABIAAAAAMjAyMzoxMjoxOSAxNDozOTowMAD2l2vlAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAHtmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNi4wLjAiPgogICA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxuczpkYz0iaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS8iCiAgICAgICAgICAgIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIKICAgICAgICAgICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICAgICAgICAgIHhtbG5zOnN0RXZ0PSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VFdmVudCMiCiAgICAgICAgICAgIHhtbG5zOnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyIKICAgICAgICAgICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAgICA8eG1wOk1vZGlmeURhdGU+MjAyMy0xMi0xOVQxNDozOTozMCswMTowMDwveG1wOk1vZGlmeURhdGU+CiAgICAgICAgIDx4bXA6Q3JlYXRvclRvb2w+QWRvYmUgUGhvdG9zaG9wIDIxLjIgKE1hY2ludG9zaCk8L3htcDpDcmVhdG9yVG9vbD4KICAgICAgICAgPHhtcDpDcmVhdGVEYXRlPjIwMjMtMTItMTlUMTQ6MzkrMDE6MDA8L3htcDpDcmVhdGVEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDIzLTEyLTE5VDE0OjM5OjMwKzAxOjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgMjEuMiAoTWFjaW50b3NoKTwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAyMy0xMi0xOVQxNDozOSswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDo0MjBjYTFmZS02ZmRkLTRjMGEtYTlhNS1jZjViMDAzNDU3YWE8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y3JlYXRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcE1NOkhpc3Rvcnk+CiAgICAgICAgIDx4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+eG1wLmRpZDo0MjBjYTFmZS02ZmRkLTRjMGEtYTlhNS1jZjViMDAzNDU3YWE8L3htcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD4KICAgICAgICAgPHhtcE1N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
""")

URL_CUR = "https://cloud.solar-manager.ch/v1/stream/gateway/{}"
URL_SUM = "https://cloud.solar-manager.ch/v1/consumption/gateway/{}?period=day"
URL_AUT = "https://cloud.solar-manager.ch/v1/statistics/gateways/{}?accuracy=low&from={}&to={}"
URL_AUX = "https://cloud.solar-manager.ch/v1/consumption/sensor/{}?period={}"

# 5 minutes cache time
CACHE_TTL = 300

# combined summary and current dummy data
DUMMY_DATA = {
    "currentBatteryChargeDischarge": 50.0,
    "currentPowerConsumption": 1950.0,
    "currentPvGeneration": 0.0,
    "soc": 10,
    "consumption": 1000.96,
    "production": 3000.11,
    "has_battery": True,
    "autarky_day": 100,
    "autarky_24h": 75,
    "autarky_month": 50,
    "autarky_year": 25,
    "aux_sensor_day": 10000,
    "aux_sensor_week": 10000,
    "aux_sensor_month": 10000,
    "123456": 25,  # dummy item for EV battery soc
}

def w2kwstr(w, dec = None):  # rounds off decimal, removes completey if over 100kw
    if w == None:
        return "0"
    if w < 10000 and dec == None:
        if w < 0:  # CURRENTLY DISABLED
            return str(int(w / 1000 * 100) / 100.0)  # show two decimal places
        else:
            return str(int(w / 1000 * 10) / 10.0)  # show 1 decimal place
    elif dec == 2:
        return humanize.float("###.##", int(w / 1000 * 100) / 100.0)  # show two decimal places
    elif dec == 1:
        return str(int(w / 1000 * 10) / 10.0)  # show 1 decimal place
    else:
        return str(int(w / 1000))  # show 0 decimal places

def render_fail(rep):
    content = json.decode(rep.body())
    return render.Root(render.Box(render.WrappedText(content["error"] + " " + str(rep.status_code) + " : " + content["message"], color = RED)))

def get_aux_sensor_data(sensor_id, api_key, period):
    # 'https://cloud.solar-manager.ch/v1/consumption/sensor/62a7324c7ffb2aabdaf96b8d?period=day'
    # user 1 hour for http cache TTL
    print(URL_AUX.format(sensor_id, period))
    res = http.get(
        URL_AUX.format(sensor_id, period),
        headers = {
            "Accept": "application/json",
            "Authorization": "Basic " + api_key,
        },
        ttl_seconds = 60 * 60,  # 1 hour http cache ttl
    )
    if res.status_code != 200:
        print(res.body())
        return 0
    print(res.headers.get("Tidbyt-Cache-Status"))
    return res.json().get("totalConsumption")

def get_autarky_percent(site_id, api_key, tz, interval):
    now = time.now().in_location(tz)
    start_string = ""
    now_string = humanize.time_format("yyyy-MM-ddTHH:00", now)
    if interval == "day":  # from the start of today to now, just set time to 00:00
        start_string = humanize.time_format("yyyy-MM-ddT00:00", now)
        now_string = humanize.time_format("2006-01-02T15:04", now)
    elif interval == "24h":  # the last 24hr from now, use a now-duration
        duration = time.parse_duration("24h")
        start_time = now - duration
        start_string = humanize.time_format("yyyy-MM-ddTHH:00", start_time)
    elif interval == "month":  # from the start of the month to now, just set day to 01 and time to 00:00
        month = now.month
        if now.month < 10:  # pad a zero if less then 10
            month = "0" + str(month)
        start_string = "{}-{}-01T00:00".format(now.year, month)
    elif interval == "year":  # from the start of the year to now, set month/day to 01/01 and time to 00:00
        start_string = "{}-01-01T00:00".format(now.year)
    url = URL_AUT.format(site_id, start_string, now_string)
    print(url)
    rep = http.get(
        url,
        headers = {
            "Accept": "application/json",
            "Authorization": "Basic " + api_key,
        },
        ttl_seconds = 60 * 60,  # 1 hour cache
    )

    if rep.status_code != 200:
        print(rep.status_code)
        return 0
    print(rep.headers.get("Tidbyt-Cache-Status"))
    autarky = rep.json().get("autarchyDegree", 0)
    return int(autarky)

#######################################

def main(config):
    api_key = config.str("api_key")
    site_id = config.str("site_id")
    tz = config.get("$tz", "Europe/Zurich")
    has_battery = False  #  assume no battery until we have data

    # verify api key doesn't have non key characters in there eg. "Basic"
    if api_key and "Basic" in api_key:
        b_index = api_key.find("Basic")
        api_key = api_key[b_index + 6:]
        print("corrected api_key : " + api_key)

    if not DEBUG and api_key and site_id:
        url = URL_CUR.format(site_id)
        print(url)
        data = dict()
        rep = http.get(
            url,
            headers = {
                "Accept": "application/json",
                "Authorization": "Basic " + api_key,
            },
            ttl_seconds = 300,  # 5 minutes
        )
        if rep.status_code != 200:
            print(rep.body())
            return render_fail(rep)

        cur_data = json.decode(rep.body())
        data["currentPowerConsumption"] = float(cur_data["currentPowerConsumption"])
        data["currentPvGeneration"] = float(cur_data["currentPvGeneration"])
        data["currentBatteryChargeDischarge"] = 0.0  # set to zero just to be safe
        data["soc"] = 0  # set to zero just to be safe

        if "currentBatteryChargeDischarge" in cur_data and "soc" in cur_data:
            data["currentBatteryChargeDischarge"] = float(cur_data["currentBatteryChargeDischarge"])
            data["soc"] = cur_data["soc"]
            data["has_battery"] = True
            has_battery = True

        url = URL_SUM.format(site_id)
        rep = http.get(
            url,
            headers = {
                "Accept": "application/json",
                "Authorization": "Basic " + api_key,
            },
            ttl_seconds = 60 * 60,
        )
        if rep.status_code != 200:
            return render_fail(rep)

        sum_data = json.decode(rep.body())
        data["consumption"] = sum_data["data"][0]["consumption"]
        data["production"] = sum_data["data"][0]["production"]

        if config.bool("show_autarky", False) == True:
            data["autarky_day"] = get_autarky_percent(site_id, api_key, tz, "day")
            data["autarky_24h"] = get_autarky_percent(site_id, api_key, tz, "24h")
            data["autarky_month"] = get_autarky_percent(site_id, api_key, tz, "month")
            data["autarky_year"] = get_autarky_percent(site_id, api_key, tz, "year")
        else:
            data["autarky_day"] = None  #get_autarky_percent(site_id, api_key, tz, "day")
            data["autarky_24h"] = None  #get_autarky_percent(site_id, api_key, tz, "24h")
            data["autarky_month"] = None  #= get_autarky_percent(site_id, api_key, tz, "month")
            data["autarky_year"] = None  #data["autarky_month"] #get_autarky_percent(site_id, api_key, tz, "year")

        data["aux_sensor_day"] = -1
        data["aux_sensor_week"] = -1
        data["aux_sensor_month"] = -1

        if config.get("aux_sensor_id", "") != "":
            data["aux_sensor_day"] = get_aux_sensor_data(config.get("aux_sensor_id"), api_key, "day")
            data["aux_sensor_week"] = get_aux_sensor_data(config.get("aux_sensor_id"), api_key, "week")
            data["aux_sensor_month"] = get_aux_sensor_data(config.get("aux_sensor_id"), api_key, "month")

        # look for any items in cur_data with an id and an soc value and store it for later use. eg. if we decide later to turn on ev battery frame
        for device in cur_data["devices"]:
            if "soc" in device:
                print(device)
                data[str(device["_id"])] = device["soc"]
                print(str(device["_id"]) + " " + str(device["soc"]))

    else:
        print("using dummy data")
        data = DUMMY_DATA
    print(data)
    frames = []

    if data["currentPvGeneration"] > 0:
        solar_anim = GREEN_ANIM
        solar_icon = SOLAR
        solar_value = data["currentPvGeneration"]
        solar_color = GREEN
    elif has_battery:  # only do this if we have battery data
        # change to battery data even though it's still called solar
        solar_icon = battery_level_mains[int(data["soc"] / 25)]  # will be integer 0 - 3
        solar_value = data["currentBatteryChargeDischarge"]
        if solar_value == 0:
            solar_anim = EMPTY
            solar_color = GRAY
        elif solar_value > 0:
            solar_anim = RED_ANIM
            solar_color = WHITE
        else:
            solar_anim = YELLOW_ANIM
            solar_color = WHITE
    else:
        solar_anim = EMPTY
        solar_icon = SOLAR
        solar_value = data["currentPvGeneration"]  # should be zero
        solar_color = GRAY

    # assuming negative chargerate means battery is discharging, and negative grid rate means pulling from grid.
    grid_rate = data["currentPvGeneration"] - (data["currentPowerConsumption"] + data["currentBatteryChargeDischarge"])
    if data["currentPvGeneration"] < 1 and grid_rate > 0:  # not possible to send energy to grid if no solar production
        grid_rate = 0.0
    if grid_rate > 9:
        grid_anim = GREEN_ANIM
        grid_color = GREEN
    elif grid_rate < -9:
        grid_anim = RED_ANIM
        grid_color = RED
    else:
        grid_anim = EMPTY
        grid_color = GRAY

    # LOGO FRAME
    #######################################
    logo_frame = render.Box(render.Image(src = SOLAR_MANAGER_LOGO))

    # MAIN FRAME
    #######################################
    main_frame = render.Row(
        children = [
            render.Box(
                height = 32,
                width = 15,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "space_evenly",
                    children = [
                        render.Image(src = solar_icon, height = 15),
                        render.Padding(
                            pad = (1, 0, 0, 0),
                            child = render.Column(
                                cross_align = "center",
                                children = [
                                    render.Text(w2kwstr(abs(solar_value)), color = solar_color),
                                    render.Text("kW", color = GRAY),
                                ],
                            ),
                        ),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 10,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "start",
                    children = [
                        render.Image(src = solar_anim),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 15,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "space_evenly",
                    children = [
                        render.Image(src = HOUSE, height = 15),
                        render.Padding(
                            pad = (0, 0, 0, 0),
                            child =
                                render.Column(
                                    cross_align = "center",
                                    children = [
                                        render.Text(w2kwstr(data["currentPowerConsumption"])),
                                        render.Text("kW", color = GRAY),
                                    ],
                                ),
                        ),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 10,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "start",
                    children = [
                        render.Image(src = grid_anim),
                    ],
                ),
            ),
            render.Box(
                height = 32,
                width = 14,
                child = render.Column(
                    expanded = True,
                    cross_align = "center",
                    main_align = "space_evenly",
                    children = [
                        render.Image(src = GRID),
                        render.Padding(
                            pad = (0, 0, 0, 0),
                            child = render.Column(
                                cross_align = "center",
                                children = [
                                    render.Text(w2kwstr(abs(grid_rate)), color = grid_color),
                                    render.Text("kW", color = GRAY),
                                ],
                            ),
                        ),
                    ],
                ),
            ),
        ],
    )

    # summary page for daily accumulated generation and consumption
    ###############################################
    summary_frame = render.Stack(
        children = [
            render.Column(
                main_align = "space_evenly",  # this controls position of children, start = top
                expanded = True,
                cross_align = "center",
                children = [
                    render.Row(
                        expanded = True,
                        main_align = "space_evenly",
                        cross_align = "center",
                        children = [
                            render.Text("Energy Today"),
                        ],
                    ),
                    render.Row(
                        #expanded = True,
                        children = [
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "center",
                                children = [
                                    render.Image(src = SUN_SUM),
                                    render.Image(src = PLUG_SUM),
                                ],
                            ),
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "end",
                                children = [
                                    render.Text(
                                        content = " " + w2kwstr(data["production"], dec = 0) + " kWh",
                                        font = "5x8",
                                        color = GREEN,
                                    ),
                                    render.Text(
                                        content = " " + w2kwstr(data["consumption"], dec = 0) + " kWh",
                                        font = "5x8",
                                        color = RED,
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )

    # CHARGE FRAME shows charge/discharge rate and state of charge percent
    #########################################################
    if data["currentBatteryChargeDischarge"] < 0:
        BATTERY_FLOW_ICON = BATTERY_DISCHARGE_ANIMATION_10x10
        flow_color = RED
    elif data["currentBatteryChargeDischarge"] > 0:
        BATTERY_FLOW_ICON = BATTERY_CHARGE_ANIMATION_10x10
        flow_color = GREEN
    else:
        BATTERY_FLOW_ICON = BATTERY_NOFLOW_ANIMATION_10x10
        flow_color = GRAY
    charge_frame = render.Stack(
        children = [
            render.Column(
                main_align = "space_evenly",  # this controls position of children, start = top
                expanded = True,
                cross_align = "center",
                children = [
                    render.Row(
                        expanded = True,
                        main_align = "space_evenly",
                        cross_align = "center",
                        children = [
                            render.Text(" ", height = 1),
                        ],
                    ),
                    render.Row(
                        #expanded = True,
                        children = [
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "center",
                                children = [
                                    render.Image(src = battery_level_icons[int(data["soc"] / 25)]),
                                    render.Image(src = BATTERY_FLOW_ICON),
                                ],
                            ),
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "end",
                                children = [
                                    render.Text(
                                        content = " " + str(data["soc"]) + " %",
                                        font = "5x8",
                                        #font = "6x13",
                                        color = soc_color[int(data["soc"] / 25)],
                                    ),
                                    render.Text(
                                        content = " " + humanize.float("#,###.", float(abs(data["currentBatteryChargeDischarge"]))) + " W",
                                        font = "5x8",
                                        #font = "6x13",
                                        #min = a if a < b else b
                                        color = flow_color,
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )

    # CONSUMPTION FRAME
    verbrauch_frame = render.Box(
        render.Row(
            expanded = True,
            cross_align = "center",
            main_align = "space_evenly",
            children = [
                render.Image(src = PLUG),
                render.Text(
                    #content = w2kwstr(data["currentPowerConsumption"], dec = 2) + " kW",
                    content = humanize.float("#,###.", float(data["currentPowerConsumption"])) + " W",
                    #font = "6x13",
                    font = "5x8",
                    color = RED,
                ),
            ],
        ),
    )

    # SOLAR PRODUCTION FRAME
    production_frame = render.Box(
        render.Row(
            expanded = True,
            cross_align = "center",
            main_align = "space_evenly",
            children = [
                render.Image(src = SUN),
                render.Text(
                    #content = w2kwstr(data["currentPvGeneration"], dec = 2) + " kW",
                    content = humanize.float("#,###.", float(data["currentPvGeneration"])) + " W",
                    #font = "6x13",
                    font = "5x8",
                    color = GREEN,
                ),
            ],
        ),
    )

    # AUTARKY FRAME
    autarky_frame = render.Stack(
        children = [
            render.Box(
                height = 32,
                width = 64,
                child = render.Image(src = AUTARKY_16x16),
            ),
            render.Column(
                # column for the top
                main_align = "start",
                expanded = True,
                children = [
                    # top row
                    render.Row(
                        expanded = True,
                        main_align = "space_between",
                        children = [
                            render.Row([render.Text("24hr:", font = "tom-thumb", color = GRAY)]),
                            render.Row([render.Text("Month:", font = "tom-thumb", color = GRAY)]),
                        ],
                    ),

                    # second row
                    render.Row(
                        expanded = True,
                        main_align = "space_between",
                        cross_align = "end",
                        children = [
                            render.Row([render.Text(" {}%".format(data["autarky_24h"]), color = GREEN)]),
                            render.Row([render.Text("{}%".format(data["autarky_month"]), color = GREEN)]),
                        ],
                    ),
                ],
            ),
            render.Column(
                main_align = "end",
                expanded = True,
                children = [
                    # third row
                    render.Row(
                        expanded = True,
                        main_align = "space_between",
                        children = [
                            render.Row([render.Text("Today:", font = "tom-thumb", color = GRAY)]),
                            render.Row([render.Text("Year:", font = "tom-thumb", color = GRAY)]),
                        ],
                    ),

                    # fourth row
                    render.Row(
                        expanded = True,
                        main_align = "space_between",
                        cross_align = "end",
                        children = [
                            render.Row([render.Text(" {}%".format(data["autarky_day"]), color = GREEN)]),
                            render.Row([render.Text("{}%".format(data["autarky_year"]), color = GREEN)]),
                        ],
                    ),
                ],
            ),
        ],
    )

    # AUX SENSOR FRAME
    aux_icon = CUSTOM_SENSOR_16_16
    if config.get("aux_icon") == "EV":
        aux_icon = EV_CHARGING_16x16
    sensor_frame = render.Stack(
        children = [
            render.Column(
                main_align = "space_evenly",  # this controls position of children, start = top
                expanded = True,
                cross_align = "center",
                children = [
                    render.Text(config.get("aux_sensor_label", "Aux Load"), font = "tom-thumb"),
                    render.Row(
                        expanded = True,
                        main_align = "space_between",
                        children = [
                            render.Column(
                                expanded = True,
                                main_align = "center",
                                #cross_align = "center",
                                children = [
                                    render.Image(src = aux_icon),
                                ],
                            ),
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "start",
                                children = [
                                    render.Text(
                                        content = "D",
                                        font = "5x8",
                                        color = GRAY,
                                    ),
                                    render.Text(
                                        content = "W",
                                        font = "5x8",
                                        color = GRAY,
                                    ),
                                    render.Text(
                                        content = "M",
                                        font = "5x8",
                                        color = GRAY,
                                    ),
                                ],
                            ),
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "end",
                                children = [
                                    render.Text(
                                        content = w2kwstr(data["aux_sensor_day"], dec = 0),
                                        font = "5x8",
                                        color = GREEN,
                                    ),
                                    render.Text(
                                        content = w2kwstr(data["aux_sensor_week"], dec = 0),
                                        font = "5x8",
                                        color = GREEN,
                                    ),
                                    render.Text(
                                        content = w2kwstr(data["aux_sensor_month"], dec = 0),
                                        font = "5x8",
                                        color = GREEN,
                                    ),
                                ],
                            ),
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "start",
                                children = [
                                    render.Text(
                                        content = " kWh",
                                        font = "5x8",
                                        color = GRAY,
                                    ),
                                    render.Text(
                                        content = " kWh",
                                        font = "5x8",
                                        color = GRAY,
                                    ),
                                    render.Text(
                                        content = " kWh",
                                        font = "5x8",
                                        color = GRAY,
                                    ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )

    # EV battery soc frame
    ###############################################
    ev_id = config.get("ev_id", "")
    if ev_id != "" and ev_id in data:
        ev_soc = " " + str(data[ev_id]) + " %"
    else:
        ev_soc = " Not Found"
    ev_frame = render.Stack(
        children = [
            render.Column(
                main_align = "space_evenly",  # this controls position of children, start = top
                expanded = True,
                cross_align = "center",
                children = [
                    render.Row(
                        expanded = True,
                        main_align = "space_evenly",
                        cross_align = "center",
                        children = [
                            render.Text(config.get("ev_name", "EV")),
                        ],
                    ),
                    render.Row(
                        #expanded = True,
                        children = [
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "center",
                                children = [
                                    render.Image(src = get_ev_logo(config.get("ev_icon"))),
                                    # render.Image(src = PLUG_SUM),
                                ],
                            ),
                            render.Column(
                                expanded = True,
                                main_align = "space_around",
                                cross_align = "end",
                                children = [
                                    render.Text(
                                        content = ev_soc,
                                        font = "5x8",
                                        color = GREEN,
                                    ),
                                    # render.Text(
                                    #     content = " " + w2kwstr(data["consumption"], dec = 0) + " kWh",
                                    #     font = "5x8",
                                    #     color = RED,
                                    # ),
                                ],
                            ),
                        ],
                    ),
                ],
            ),
        ],
    )

    if config.bool("show_logo", False):
        frames.append(logo_frame)
    if config.bool("show_main", True):
        frames.append(main_frame)
    if config.bool("show_char", False) and has_battery:
        frames.append(charge_frame)
    if config.bool("show_prod", False):
        frames.append(production_frame)
    if config.bool("show_cons", False):
        frames.append(verbrauch_frame)
    if config.bool("show_summary", False):
        frames.append(summary_frame)
    if config.bool("show_autarky", False):
        frames.append(autarky_frame)
    if config.get("aux_sensor_id", "") != "":
        frames.append(sensor_frame)
    if config.get("ev_id", "") != "":
        frames.append(ev_frame)

    if len(frames) == 1:
        return render.Root(frames[0])
    elif len(frames) == 0:
        return render.Root(main_frame)
    else:
        return render.Root(
            #show_full_animation = True,
            delay = int(config.get("frame_delay", "3")) * 1000,
            child = render.Animation(children = frames),
        )

def get_ev_logo(name):
    if name == "TESLA":
        return TESLA_LOGO_18x18
    elif name == "AUDI":
        return AUDI_LOGO_24x9
    elif name == "VW":
        return VW_LOGO_18x18
    elif name == "BMW":
        return BMW_LOGO_18x18
    elif name == "SEAT":
        return SEAT_LOGO_18x16
    elif name == "SKODA":
        return SKODA_LOGO_18x18
    elif name == "OPEL":
        return OPEL_LOGO_23x18
    elif name == "RENAULT":
        return RENAULT_LOGO_18x18
    elif name == "HYUNDAI":
        return HYUNDAI_LOGO_24x12
    elif name == "CUPRA":
        return CUPRA_LOGO_18x18
    else:
        return BMW_LOGO_18x18

def format_power(p):
    if p:
        return humanize.float("#,###.##", p)
    else:
        return "0"

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "api_key",
                name = "API key",
                desc = "API key for the SolarManager monitoring API. Authorize with your solarmanager username and password on: https://external-web.solar-manager.ch/swagger and copy the long string that follows after '-H authorization: Basic'",
                icon = "key",
            ),
            schema.Text(
                id = "site_id",
                name = "Site ID",
                desc = "Your site ID. Check the back of your solarmanager device for the SMID code.",
                icon = "hashtag",
            ),
            schema.Toggle(
                id = "show_main",
                name = "Show Main Stats",
                desc = "Realtime solar production, home consumption and grid usage. Note : Multiple screen selections will disable animations. If you prefer animated screens, run separate instances of the app and select a screen per instance.",
                icon = "solarPanel",
                default = True,
            ),
            schema.Toggle(
                id = "show_char",
                name = "Show Battery",
                desc = "State of charge of the battery and battery flow.",
                icon = "carBattery",
                default = False,
            ),
            schema.Toggle(
                id = "show_prod",
                name = "Show Current Production",
                desc = "Realtime solar energy production.",
                icon = "sun",
                default = False,
            ),
            schema.Toggle(
                id = "show_cons",
                name = "Show Current Consumption",
                desc = "Realtime energy consumption.",
                icon = "plugCircleBolt",
                default = False,
            ),
            schema.Toggle(
                id = "show_summary",
                name = "Show Daily Summary",
                desc = "Accumulated daily energy production and consumption.",
                icon = "chartLine",
                default = True,
            ),
            schema.Toggle(
                id = "show_logo",
                name = "Show Logo Frame",
                desc = "Solar Manager Logo",
                icon = "compress",
                default = False,
            ),
            schema.Toggle(
                id = "show_autarky",
                name = "Show Autarky Frame",
                desc = "Display the 4 Autarky values for day,week,month,year",
                icon = "compress",
                default = False,
            ),
            schema.Text(
                id = "aux_sensor_id",
                name = "Aux Sensor ID",
                desc = "Aux Senso ID",
                icon = "hashtag",
                default = "",
            ),
            schema.Text(
                id = "aux_sensor_label",
                name = "Aux Sensor Label",
                desc = "Aux Senso Label",
                icon = "hashtag",
                default = "",
            ),
            schema.Dropdown(
                id = "aux_icon",
                name = "Aux Icon",
                desc = "Icon Selection",
                icon = "hashtag",
                default = "EV",
                options = [
                    schema.Option(
                        display = "EV",
                        value = "EV",
                    ),
                    schema.Option(
                        display = "Generic",
                        value = "Generic",
                    ),
                ],
            ),
            schema.Text(
                id = "ev_id",
                name = "EV Battery ID",
                desc = "EV Battery ID",
                icon = "hashtag",
                default = "",
            ),
            schema.Text(
                id = "ev_name",
                name = "EV Name",
                desc = "EV Name",
                icon = "hashtag",
                default = "",
            ),
            schema.Dropdown(
                id = "ev_icon",
                name = "EV Brand",
                desc = "Logo Selection",
                icon = "hashtag",
                default = TESLA_LOGO_18x18,
                options = [
                    schema.Option(
                        display = "VW",
                        value = "VW",
                    ),
                    schema.Option(
                        display = "Tesla",
                        value = "TESLA",
                    ),
                    schema.Option(
                        display = "Audi",
                        value = "AUDI",
                    ),
                    schema.Option(
                        display = "BMW",
                        value = "BMW",
                    ),
                    schema.Option(
                        display = "Seat",
                        value = "SEAT",
                    ),
                    schema.Option(
                        display = "Skoda",
                        value = "SKODA",
                    ),
                    schema.Option(
                        display = "Opel",
                        value = "OPEL",
                    ),
                    schema.Option(
                        display = "Renault",
                        value = "RENAULT",
                    ),
                    schema.Option(
                        display = "Hyundai",
                        value = "HYUNDAI",
                    ),
                    schema.Option(
                        display = "Cupra",
                        value = "CUPRA",
                    ),
                ],
            ),
            schema.Dropdown(
                id = "frame_delay",
                name = "Seconds per frame",
                desc = "This option is only used if multiple screens are selected.  (Multiple screens will disable animations.)",
                icon = "clock",
                default = "3",
                options = [
                    schema.Option(
                        display = "1 sec",
                        value = "1",
                    ),
                    schema.Option(
                        display = "2 sec",
                        value = "2",
                    ),
                    schema.Option(
                        display = "3 sec",
                        value = "3",
                    ),
                    schema.Option(
                        display = "4 sec",
                        value = "4",
                    ),
                    schema.Option(
                        display = "5 sec",
                        value = "5",
                    ),
                ],
            ),
        ],
    )
