"""
Applet: Splatoon 3 Stages
Summary: Splatoon 3 map rotations
Description: Fetches and shows the current Splatoon 3 map rotations. Data provided by splatoon3.ink.
Author: MarkGamed7794
"""

load("cache.star", "cache")
load("encoding/base64.star", "base64")
load("encoding/json.star", "json")
load("http.star", "http")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")

# thanks s3.ink!
STAGE_URL = "https://splatoon3.ink/data/schedules.json"

STAGE_IMG = {
    "no_stage": base64.decode("iVBORw0KGgoAAAANSUhEUgAAAB8AAAARCAMAAAASeod7AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJUExURYCAgP///wAAAM6+7BYAAAADdFJOU///ANfKDUEAAAAJcEhZcwAADsIAAA7CARUoSoAAAAArSURBVChTY2BiwAfwy1IdMAIBlIkNgCTxKgACCuUpk6YY0Np8TIA3hhmYACC/ABvvPO+kAAAAAElFTkSuQmCC"),
    "Brinewater Springs": base64.decode("iVBORw0KGgoAAAANSUhEUgAAAB8AAAARCAYAAAAlpHdJAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsIAAA7CARUoSoAAAAbBSURBVEhLHZV9bFXlHcc/5+2+v/be2/bSFmhrC9giUF4cUghS42QEdbrFBdSQqFkCRslMxuL+wcxkW2BLyLYsTP3DZC9umcwxt0nUOZhTUBiWFhj0BUtbWtrb2/a+n3vOPWc/lpOc8+Q8T57n9/u+PYrruvzwtdOu4thUVA+u4zJ47n261vZi6z6s8iKaA4ZhoAIuirxqd94omib/XGqqxvj0Fcz8JNOzGag5VL8coyrfvKPi2DUMXaWnq4tazaI5FeVHx44qytbdT7lf3bUPrbCAo6hUFY2u8CSvv32ae/u+RX7gXS5mC7St7KUx0YDiC4JV4fLQx2AWmcuVCMW9mKUqXp9NrFBh+laWcg1yZo3GuiivvvgEDfVJxsYmOPGr3zPr96LNzKGsfeAxV1d1fJrKzh2PoQbCVPJ5HMNHRB9nab2X1375B2YKZWI+A297K5ZlSyGywWKOiZHbmLZAIwhkTBe/10urXWRU9eO1S3hqNQ4dfJJ3fvMXsqYU6vPw2eQCHo8XZfW6XjcQD2ApflxFR69W0GWR7ULBctGkKE1VMStlVBn7NYWYV+VmoUYioJEvV2WtwC88rFu1UtZrOI6DsMmSmat8MLVIVfNLcRBQHKHLFTpsnn3iYZTeLX3CoIoqB1iVElbQjye/SEUJ0N3Zwb6HewlH/Bw99iaTRYtsrsC6uztZFCQSIYVsxKBcttnhDRBOp8iVKmiy+cz1Uf42Mi7ycHj52cdZ0pJmdPQmD/bdJyAJSpksyn3re92+B3rRFIWqwPnevz7DV5jhOweeQxpncWyMdz65wNRCEW8wLJDX8HkNSvksIRGh6zq0J8NMyLynuZ7CXImWgEIuEaXxyihDAuFL395D/4dn2PLoTgKGTaKlnfbuDSgber7ihnSFSDAiglMIxuNcu/AxlUCK3VvXs6KjndUrl/L9Hx8nKypasXYpY+cGKaNxcFuLwG7y18vzxAMePh2ZIBH0oQsHt3JltrY0cPrGBK64aOzSGdyqiSJcO9WS2MeH6lMsipZFySyQyS1yfXhYuqvSFI3x+cVrRGU+Ggpxe3YWvbLI+X9cYHv3MvkXZufep/nGyz/gled2c3WuTEdbE5FknRymkg4aXM/MUhf0EjSEaaECXcMVp5w8+R7nzpwWztf3uJaINSyb2VJZuVrDzIxTjTVJESbpsNioWKRUtVA9fpl36OvrY2hgkLjfQ2MoQlzU3baujY8GrjA0XaNSKlATOmZnp1mSbsKWZi6c+h2ubeL6wuLBDG4kibZl/drDqWQDPo/Ggq2TTiXJTI3LQUHscpF5sZMpvEXCYUKRhISQQ3Ncw3S8rKqL478Do+TDRK7GpcFLhFMtYiOP6KdKqZgnFAyx/3v7JGQiLBhZIokgpqHz239+hDoiVriVlbAoudRH47Q7SzDEUoZuSKrpd+yLI13ceWpOTeCzxP8hGTt8Op3h/NwClysK01WFzEKeqGTBG0f2cvLN73K9/wQ94pg18WbqYxHSxlKmp4bwB2M8uXsvepPdKZIWL/scblsZUkro/4GBiE/RDI4c2k+qs5sDL7wkXi5L6KSoCE9B6di4Y14pzK862Pl5kiEfZqFAc/dmFOF9YTDJqhVpbox8ycTNcWzT4vhbJ8jOZYR+HbXQ+R+MqoqdsygUCzRtS2NJvidjUeriMVb3+Lnw/p9Z0pgS2MUREjJrViSoa9E48Mg9PPPoJn62yaaro45992/i1SNH+CITwqoJVSun2bVrDUt612C1iDbaWiiWS8RT9Ti6jvLN3V9zYyHhzZOj2R/j3Q+/IFMw2btjM+clBi27wGRtno3peyhVqizmC8SiCleGp9hwd4yeRA8j5x28AYuh1gzPvPgIR/f/XEJLIRwIioVDPNTVyvY9e6hPHmPbQ/2ktqRpXJ8UJEUIuYqXQi7J4KTwu6GTSGsLZyeLArtH1O2VIHHJfu5Q7jc4+MJT5BY9NDU3oi6/zaXYKZ7/6YN8/flO/DN5/juwSN22OoI9ES7OjDLVAP50A6/94nVxSJCKabKso4HSjIm2bHnrYVN8rriKQFJmQbxZk4vCXzdK9PIK/JkwPcUu6hy5zaSIu7ak6N3czcXBYeYLY2xqeppf/+nvTEzOkIgaDJztR2/Wedz1cfVGkYPbN8GtcfYf+QmerMHbH5xlQJIvn6miXR+69srxtw4dLirjGMEC44PzqCKMRHgdE0wR60hTFEGFY17S2xu4NjlM2/ImTn9yUe7xWYan+7G9c2SqGe5quR/dH+bqv29y78aNzE1P0W/nONWossdTITg3SVIuoLDY9I8nzyj/A0E3C22J+bVeAAAAAElFTkSuQmCC"),
    "Eeltail Alley": base64.decode("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"),
    "Flounder Heights": base64.decode("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"),
    "Hagglefish Market": base64.decode("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"),
    "Hammerhead Bridge": base64.decode("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"),
    "Inkblot Art Academy": base64.decode("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"),
    "Mahi-Mahi Resort": base64.decode("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"),
    "MakoMart": base64.decode("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"),
    "Mincemeat Metalworks": base64.decode("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"),
    "Museum d'Alfonsino": base64.decode("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"),
    "Scorch Gorge": base64.decode("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"),
    "Sturgeon Shipyard": base64.decode("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"),
    "Undertow Spillway": base64.decode("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"),
    "Wahoo World": base64.decode("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"),
}

def generateErrorFrame(message):
    return render.Root(
        render.Column(
            children = [
                render.Box(
                    width = 64,
                    height = 17,
                    child = render.WrappedText(
                        message,
                        width = 64,
                        align = "center",
                        font = "tom-thumb",
                    ),
                ),
                render.Box(
                    width = 64,
                    height = 3,
                    color = "#000",
                    child = render.Box(
                        width = 64,
                        height = 1,
                        color = "#444",
                    ),
                ),
                render.Box(
                    width = 64,
                    height = 12,
                    child = render.WrappedText(
                        "Report this immediately!",
                        width = 64,
                        align = "center",
                        font = "tom-thumb",
                    ),
                ),
            ],
        ),
    )

def generateFrame(title, colour, battle):
    # Takes a specified title, header colour, and battle and returns the prettified frame.

    # Fallback if no active battle is taking place. This most likely means there's a Splatfest active.
    if (battle == None):
        return render.Column(
            children = [
                render.Box(height = 1, color = colour),
                render.Box(
                    height = 6,
                    color = colour,
                    child = render.Text(title, font = "tom-thumb", color = "#fff"),
                ),
                render.Box(height = 1, color = "#000"),
                render.Row(
                    children = [
                        render.Image(STAGE_IMG["no_stage"]),
                        render.Box(width = 2, height = 1, color = "#000"),
                        render.Image(STAGE_IMG["no_stage"]),
                    ],
                ),
                render.Box(height = 1, color = "#000"),
                render.Box(
                    color = "#000",
                    height = 6,
                    child =
                        render.Text(
                            "No battle data!",
                            font = "tom-thumb",
                        ),
                ),
            ],
        )

    # Base case.
    return render.Column(
        children = [
            render.Box(height = 1, color = colour),
            render.Box(
                height = 6,
                color = colour,
                child = render.Text(title, font = "tom-thumb", color = "#fff"),
            ),
            render.Box(height = 1, color = "#000"),
            render.Row(
                children = [
                    render.Image(STAGE_IMG[battle["stage_a"]] or STAGE_IMG["no_stage"]),
                    render.Box(width = 2, height = 1, color = "#000"),
                    render.Image(STAGE_IMG[battle["stage_b"]] or STAGE_IMG["no_stage"]),
                ],
            ),
            render.Box(height = 1, color = "#000"),
            render.Box(
                color = "#000",
                height = 6,
                child =
                    render.Text(
                        battle["mode"],
                        font = "tom-thumb",
                    ),
            ),
        ],
    )

def main(config):
    stage_cache = cache.get("stages")
    stages = None
    failed = None
    if (stage_cache != None):
        # Data is cached, just use that
        stages = json.decode(stage_cache)
    else:
        # Oh, we need new data
        rep = http.get(STAGE_URL)
        if (rep.status_code != 200):
            failed = 404
        else:
            stages = rep.json()  # Will it just let me do this?
            cache.set("stages", json.encode(stages), 3600)

    if (failed):
        return generateErrorFrame("API error!\nError code %d" % (failed or -1))

    # Make the data better
    regular_battle = []
    ranked_battle = []
    x_battle = []
    for battle in stages["data"]["regularSchedules"]["nodes"]:
        regular_battle.append(
            {
                "start_time": battle["startTime"],
                "end_time": battle["endTime"],
                "mode": "Turf War",
                "stage_a": battle["regularMatchSetting"]["vsStages"][0]["name"],
                "stage_b": battle["regularMatchSetting"]["vsStages"][1]["name"],
            },
        )

    for battle in stages["data"]["bankaraSchedules"]["nodes"]:
        ranked_battle.append({
            "start_time": battle["startTime"],
            "end_time": battle["endTime"],
            "series": {
                "mode": battle["bankaraMatchSettings"][0]["vsRule"]["name"],
                "stage_a": battle["bankaraMatchSettings"][0]["vsStages"][0]["name"],
                "stage_b": battle["bankaraMatchSettings"][0]["vsStages"][1]["name"],
            },
            "open": {
                "mode": battle["bankaraMatchSettings"][1]["vsRule"]["name"],
                "stage_a": battle["bankaraMatchSettings"][1]["vsStages"][0]["name"],
                "stage_b": battle["bankaraMatchSettings"][1]["vsStages"][1]["name"],
            },
        })

    for battle in stages["data"]["xSchedules"]["nodes"]:
        x_battle.append({
            "start_time": battle["startTime"],
            "end_time": battle["endTime"],
            "mode": battle["xMatchSetting"]["vsRule"]["name"],
            "stage_a": battle["xMatchSetting"]["vsStages"][0]["name"],
            "stage_b": battle["xMatchSetting"]["vsStages"][1]["name"],
        })

    # get current battle
    current_battles = {
        "regular": None,
        "series": None,
        "open": None,
        "x": None,
    }

    now = time.now()
    for battle in regular_battle:
        if (now >= time.parse_time(battle["start_time"]) and now < time.parse_time(battle["end_time"])):
            current_battles["regular"] = battle
    for battle in ranked_battle:
        if (now >= time.parse_time(battle["start_time"]) and now < time.parse_time(battle["end_time"])):
            current_battles["series"] = battle["series"]
            current_battles["open"] = battle["open"]
    for battle in x_battle:
        if (now >= time.parse_time(battle["start_time"]) and now < time.parse_time(battle["end_time"])):
            current_battles["x"] = battle

    frames = {
        "regular": generateFrame(
            "Regular Battle",
            "#080",
            current_battles["regular"],
        ),
        "series": generateFrame(
            "Anarchy Series",
            "#850",
            current_battles["series"],
        ),
        "open": generateFrame(
            "Anarchy Open",
            "#820",
            current_battles["open"],
        ),
        "x": generateFrame(
            "X Battle",
            "#086",
            current_battles["x"],
        ),
    }

    final_render = []
    if (config.bool("show_regular")):
        final_render.append(frames["regular"])
    if (config.bool("show_series")):
        final_render.append(frames["series"])
    if (config.bool("show_open")):
        final_render.append(frames["open"])
    if (config.bool("show_x")):
        final_render.append(frames["x"])

    if (len(final_render) == 0):
        final_render.append(frames["regular"])

    delay = int(config.str("speed") or 15000)

    return render.Root(
        delay = int(delay / len(final_render)),  # <- replace with 1/4 of tidbyt delay
        child = render.Animation(
            children = final_render,
        ),
    )

def get_schema():
    speed_options = [
        schema.Option(
            display = "Normal",
            value = "15000",
        ),
        schema.Option(
            display = "Quick",
            value = "10000",
        ),
        schema.Option(
            display = "Turbo",
            value = "7500",
        ),
        schema.Option(
            display = "Plaid",
            value = "5000",
        ),
    ]
    return schema.Schema(
        version = "1",
        fields = [
            schema.Dropdown(
                id = "speed",
                name = "Animation Speed",
                desc = "Match this with the Tidbyt app cycle speed to ensure that the stage rotations take the whole length of time the app is shown.",
                icon = "stopwatch",
                default = speed_options[0].value,
                options = speed_options,
            ),
            schema.Toggle(
                id = "show_regular",
                name = "Regular Battle",
                desc = "Whether or not to include Regular Battles in the rotation.",
                icon = "paintRoller",
                default = True,
            ),
            schema.Toggle(
                id = "show_series",
                name = "Anarchy (Series)",
                desc = "Whether or not to include Series Anarchy Battles in the rotation.",
                icon = "signal",
                default = True,
            ),
            schema.Toggle(
                id = "show_open",
                name = "Anarchy (Open)",
                desc = "Whether or not to include Open Anarchy Battles in the rotation.",
                icon = "tableTennisPaddleBall",
                default = True,
            ),
            schema.Toggle(
                id = "show_x",
                name = "X Battle",
                desc = "Whether or not to include X Battles in the rotation.",
                icon = "x",
                default = False,
            ),
        ],
    )
