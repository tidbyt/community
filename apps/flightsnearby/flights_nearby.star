"""
Applet: Flights Nearby
Summary: Flights nearby
Description: Find the closest flight to your location.
Author: eddichen
"""

load("cache.star", "cache")
load("encoding/base64.star", "base64")
load("encoding/json.star", "json")
load("http.star", "http")
load("humanize.star", "humanize")  #for easy reading numbers and times
load("math.star", "math")
load("render.star", "render")
load("schema.star", "schema")

DEFAULT_LOCATION = json.encode({
    "lat": "51.4395598",
    "lng": "-0.1013327",
    "description": "London Bridge, London, UK",
    "locality": "London",
    "place_id": "",
    "timezone": "",
})
DEFAULT_DISTANCE = "10"
DEFAULT_CACHE = 180
FLIGHT_RADAR_URL = "https://flight-radar1.p.rapidapi.com/flights/list-in-boundary"
TAILS = {
    "AA": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAACTFBMVEUAAAC5IBizHxi7yc3Qcm+3HBcLZrDV7fHYubaoKiu1AgD78Oa7HBIAZrW+BAC6UUwVYaPVBwDANzHZ//+9DQNtm73EHhMhdLPBOzUHc7nH3+O4KCADWqUmS4b////QHAzezMsAXqponMU7fLO+hIHFKyITY6azBgC0HBTBHRTAKyNqfqEFUJa2KyfTSUBIg7bJl5nEYVvKvr4AVJ+tqr3CHBBUeqYNa7B3pM3FIBW8vcXp3tNejLXB3eSuo62okZ0LX6TCIBfLeHa5AADe9vnI5Oj46uL///+9AADH5enDWlLaBADK8vnJ8PYAUqnqa2LaOzHX/v59rtPhzM10ocVcksFGjr8terYteLQAVq0ARZi/Fw3DDgK4BQDG5utxostfm8t+pMpglsbKwcNqmcIjgsIAX8I9fbfit7UHarEAWq0zcqoASZ0API6+jIoAPojHHxL6///X+v/o//zH8fdkt+xvxOtxvOnE4eb16+R1uOHe3duDtNhQmdOfv9FeoNEAetFzps5Xms7w0c3hy8t3ochnocg1jshFjMdgnsZynMYegsZ6oMFjlb1BibzqvLrXvLpqlbgAXbXgvLQPZ7PotbIldrL4t61dhq0FY6wmbqoRY6dJd6ZDdaY5caUVYqIoZqFZd50sYZuYgZgqW5ZQa5UdVJLEjYnSi4QAOITMhIFUVXznbWTua2H/XkfkUT1lHDmNKzbZNy70PyzeNiviNiV2DyXCKR++Fgu4FAu3FAuXAwnmFQLVDQDICwC8BwD6AADmAADOAADBAAD3XlVqAAAAQnRSTlMA85F1PjgwFQgE+fj19PLw7enh3tvY0svFwL+5tLOvq6WjoZ6ampmZlJKNhH5+eHRxa2BbWFdWRDgvKB8fHBUSERAsRGa4AAABXUlEQVQoz2IYAGCuJiMrr6plil1WcWZmw8a9u3ZqYpXVXjSve/WeggIxR2yyZp0Te9smT0hONsImyxbpl5VWVhgYWMSORdZmxtw56UtXLM/LU8GmWSA7Ozx1+6HY2P2sWGTFM2fPz9pwMCZmnwgWWaWQkJCUnulTMzL6DTBldXLz81fm1hWX+Pr62mLImqSHhoZ2pDQHBwe3KGB6KSgxKKi8amtMdHT0Dkt0WcAceP0iIyelbTvgDQSCGJpF+8LCwtoXrvcCAUN0WcnUabMWLFtSHegDBL7oIaYcHhERHjGlxh0M5NBk9RO74uMbS1s3bwoAgi0sqLLGUVFROTl+fru9PYDgMB8niqxFU31CQlJS7eJ1a/yBYK0eiqw1txsEVLpAAAeyLIdwhSsEeMZ5AkGcFLIsp8QqJ1SA7DArIQ9nFODBhZC0Z+aPZUQFPLoIaTtmaXUmVKDBykAdAACNkHIoMAgDegAAAABJRU5ErkJggg=="""),
    "AY": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAAA/1BMVEUAAAD////////////////////////////////8/P3////////////////////////////////////////////7+/z////////////////////////////29vl5ga/////////8/P0OG2////8ACWX///////////////9qcqb///8AB2MpMn0PG28BC2QAAFsAAFL19fdNUpE2QIcSInTm6PDh4+2BhbF0eqppcqZiY5stOoM0O38nLXkNF2wCEWkKDWMAAV8AAE7q6/LT1eXDxtyXmr58gK5eZ59ZX5lISoo9Roo8Q4cfKXchKXYVHm0FCF8AAE0AAEEAAD4AADwcvL0xAAAAKnRSTlMA9JGas3YVEAf928+6o5R/X1c+Oicb8Oni18S+q6SXjYVxbGtTRDYwLy83HWtDAAAA80lEQVQoz8XR147CMBBAUbxJCG0pC2zvfSfGqfTOdnr7/28hEkmQnXlE4r4ejWTPRA7QiyTL19JdDtdj2JZG9d7TpIppFryymObBL4poIVAJ0RgJOI9wMtAE+iW/z4ewZsoWbVNKm835bzGkuXLP0NxYf0VvQvoWb+vdkltn1oB3UVViGawGbhUTzkLDF7WF0/mr1/8tE+BJ1NSP4XSZMViuq8jGbqt6iU3Gdmv47aos6GNfd/SpCV4nvD5rTBv0Kr4SXj9atj1qfIGfwmmRAF+Mu1JC0Ctu+JIz4WGFc1HjO1SVUyBCmR1HlZR0xJd+jeynDaSfM5/gDT8BAAAAAElFTkSuQmCC"""),
    "B6": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAYCAMAAADat72NAAAC01BMVEUAAABQisgqTq6cyuoqueUTHVo+n9Uij9udy+sAt+UAc9EFMqgmu+YFsOELqt4KGlUSzfcMuOcOlem15PcqzPApq+NLeMMqUq8qRKsZNqBM1P0b1forueUXsuAKcMAUrd8AFmGY3PMfod1LrOcWPqJ7r9ABieEeMGwoSIMqVa8jrN8XNpgaXqIcjtcfJ2Y5dK4FuO82WLAzOHUptuMsf9E3aKAdKm8iNpMvktcwrN6QweU8mNNEsd4dmuI7tuk3y/5Ugb9arNlemNE9N3NRpNU0RI6JxegAtOUAgdUBfdMADkoAzfpXrOIAkuIAjd0AdNMAZMcANaICMJ4AIJYAD44AA4gAF1UEBkYDAUAECD8AnvYAxvQAyvCQze+JzO6m1+2f0OsAuegAsOEAruAAh90Akdt1qNkBh9kAe9cAqtUAkdVMjM5yjsuBksgAP60PQ6gAJagAPacAM6cALZ0AKZoAJJoAGZRucZICFJIAE44AQYBGSnMALWsCJmggM2YEJmAFHlwHH1kAATwAADUAAC2t8/+i5P8A5P8A2P+v7fu35fcky/Wh3/Sf3fOf3PKy3fEAzvEBkvHT2vAAzPB5zO+s0+4AuutBr+tkwOoAwOoAlOovpemLyugAvuZUvORstuQAs+Jmr+C7wt/h4N55s95Tq9wZkdsAftsAd9oeh9mPotjDxtaZq9NknNNhmdIAhNKMntAHg9AAis8AqswAccxinMsAlssAessAc8tDhMqJkMlxiMgAf8dvmcMAcsMAYcIAbb8AWruBkrpLb7pLZ7oAdLkBariXo7cAXrYCf7Vzh7MAh7FIe7BPVK0AX6ygmaoCW6oAdahPd6WAh6QbYqILPqEDaJ8AK58AZJ4BNJ0RM516fpwfLJtpdpoAGJoCU5gBMJU5Y5MAHZMACIwAUItLXIgAUIcAFoUACH8QMXQoPnFBSGsAAFgzHU8FGE8HE08AAB2qRTlBAAAARnRSTlMACdTV1MA6MvX18O/r6+np5t/a1NTU1NTU1NPQz8/Mw8PCv762tbSomJaUkpGNiIN7enVzaGhjYF9dWVdUS0g0Mi4gFREGsaDXUQAAAZpJREFUKM9iwA6MZQWkldSETLDLys303lZVW3POFqusSuj6zPCI95GsWGU1K0KK6lsa6sPMsMkaPg7KTtv70MuL3xWLrM2+siWdfW2tl5p1sMiyJbov7XJzc4uNv8KOKevEOdl93tQeN7eEfmVMWUbBmD2FQflrexPmL7PAlGY9nRoSXFwWkjbFn4sRQ1b9Q+P14MDAoNA7K/11MWT1vO5fOJhXUlJ64kBWOobDADON2B41y9ev8FHWhJi58uiydpuPRnl4ePquSG1fkORuiSbrmLwpYL+nf0bKsZOZ3om8aA5z4csPrbi1c/rsl03NTTe8tdA0S+WdPZyzYdea49V1T8vfXrRHlVU983zVpEW5Obnnb99dvbhaAVVWwyui7tDuI9kLfXy2Xi4/ddMcRdaoJSzs1es3Ab7pHhkTq8ILuFEcZv2sJrzxXWTtFj8/D8/lG6/e00aJQ/fo6GuRDQ+KigN3pHj6xMWuc0CSNXBPSp7W8eRFQWlwZWXAjPg5cYoISWf9bh4ZFhYRUQkmJiZxSTFhZmYOK7gsANZPkh84Lw3tAAAAAElFTkSuQmCC"""),
    "BA": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAACVVBMVEUAAAD///+7Ghr+/f3//////////v7//////v7///+3BwX///+yHh7vmpnuk5Bkd6jaBgDo6/P////xf27th3v///++EA76yMf////4u7XiiIXug3TqRDmVODeJMzS9NjOiLSvjLCv////KRUB8h7H////64eDldmr//v7bSz+dnbpqf7DUMij//////v752tf//////v7//v7OQDdzYor////plo7ql5T+/f3+/f3IhYlPdK7+/v7JJhv+/f2nMjbnoJ7OEghsPmP++/vl6fH/////////9vTugnP+/v7p8ff0n5Xxj4HpQDXiBwPQAgL86eX94t+2wNi+xNT4ysb5vrhui6/2sqr1rqUeUJTwlIYHJmHsa17qX1AAEU7sS0WNODi9NDLqLizeLizmLivqKyDrIRyFGBh6FxfYAQDx9Pfl6fL+8O7T4e3p7Oz+6+jO2ejDzua6yOO50OGgveC1yt26x9mxutijtNaqtdSlvNOjtdKbss6Usc340cv7x8PVvr7qvr14kbxmgrSKkqv/qaf0qqH0q6D4r58wXZv6q5r8opdCaZf4opYKT4oSRorLg4H9i36yfH29fHsAMXoLNnnuhHgAJ3e0dXXwgnHVcHAAH3DuemwRL2r2bWkAD1zuYVnNXFn4XlXnUlIFHFLrV1GgTU2sSEf0UkbsU0XnVkOCOzzmSTmZOjmHNzmiOTaxOTWZNDWzNzShNTTkRDDOMC/oPi3qKSmEKCjmNCXRKCV2IyS/Ih/MIB+dIB3lIxfFFBN0ExPrFRLjFA+1DQvgEQemCAfOULi3AAAARnRSTlMAzv7737y0r6ZcQDQI/v769vPx7erk4tjVzs7Ozs7Ozs7OysXEwbm0oZOSjY2Miod8dnBqaWdiWVBHQ0E7Ni0jIR0YFhAIP1QXlAAAAWlJREFUKM9iGABgw8HKysbBxoldVs8NAgyxyhpBZVmwylpAJN3z9bHJ2nmCJPNmLfCxxSLrLATSOTndf6I6Ns0SQNnWPQeZFnUZY5FlB8rO89+xMbVbhAdTVtfNLSDeb/PqvSs6NDFlTT0DQn0PJe4+ltbrwYUhaxUaExWbdiBjGV+gmxqGrD3Tfp85fv7LG0A+wwhQwHjEUmd6+C5udHPzKsgWdEGXVl7qXRfi7uaWFdbfXK6NLqsBCUuvlrmzO4MqrNFkDdy8qkqLa3ui46ZGNhWqoMmau7kxh/VNmR+3JHp6ZGWJCaosV6Y3yOTcsuDgoJrqIn4nFFkHgZUeESE5blDgqYUi6yq+MypizeGUhTMmTeCtBzqeG0Va1S3cJyZl+659GelH/LZ5BzJixNK0o0nJGxISNiX7eoSvMkOS5GYBJ534zMS169ZvTYpta9/iiJC1FGVWYgQBKQU5WXlFGWlJYR0GugAAmitxBXcxQl8AAAAASUVORK5CYII="""),
    "CX": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAAB/lBMVEUAAAClpaWgoKCampqRkZGLi4tYWFg6OjoLDhCfn58FFyMEFiErLCwBBgkTExMZGRkCHjQABh7t7e4BNEvy8vIKMEW/v78QDyXp5+cHIzUAFCby7uy4PEfNyskEJTfAwMAdKDXGxsa/v7+JkZUGHyy4uLgFHCsADhyxsbGQkJCurq6jo6PIyMiRkZHJyclsbGyVlZVXWlx+fn5ra2sEExt2dnZkY2IEERlcXFwEDxdoaGgBDBNERERRUVEDDBFISEgCCQ1FRUUAAAD////4+Pj19PTz8vIJLkL9/v7v7u4KM0kAGjD//vvr6+vn5+fk5ebIzM8JMEYJFiwADyfv8PDo6erc3t7T1tfP0tXK0NSzub4tQ1QLN08AL0QAK0EAHDMACiIAAxsAABb5+/r2+fj19/fy9fT49fPi4+Pc3+Lg4OHBx8u+v8Kdqa9pfYhdcn5NZHJNXm0ySlsMOlQMMUXWN0MGLEIAIjgKHTIIGjAAFy0AEysABh4AAAv5/v3r8vbr7e3W2NjEzNDOzs/DyMystryVoauQnKTKl5yDkpuKkZm1kpiejJPMiY9oeIXLeoJWbHlUbHjNbHXOYWs7V2dKWGZBU2PQV2EZRFzRTVgqRVgMOlPSRFDsPU0BNk3UPkspOUoOMkcLMEQLKj4DKD0AJTsAGzgNIzcAGzQJEykQ9hn9AAAAQ3RSTlMAeXh4eHhIMBqdiX4pIBYT/vv39e3s5uPh3NbT0tHNy7a1tLCurKunpp+empiSjYZ4dnRuZmFbWVNTTEpEQT40LyAMLEdO3wAAAY1JREFUKM+10FN3A2EQgOHGtW3btia7m82GjY3adlPbtt1/2T0nFw22d+17+3xzvjnj8S81sNl1HF//X5SdnZSc5pVXTa2ZYK+MUnOAx0XkOC+BUotJbUdxIZRQaSWpXBTFkeAACuUAkMoVKyGLQgNCSUUQuVYNtRQcY9+5dwviKDRlQa3RaFZ7+/u7i9zVe9REECbZ3KHoNMj9ZKWj2AT2OkMMiiUTGW5ar+djY2+TLwMKweBnjav68UmdnB1aQ0D7FO02HKbHpLPmARXSiR7N+LhqvJEwW3TLgIgEqo9ATxdNv7we2dcCCLs6BTpZqov6vA8BGSoSgeDMyq9y1oobKTEsAVAIe/p0VizKWRv1/GepbO6cfCCx2DCpt5N6htwbDAaj0Swb2YDWYZvJz1GbI6a+Wsimp6Yt1sft7vVEp+HYu/Hxh9uri5Pjg73Nnd0+KHdA30iwx5tv68CF4i483OFbL4DWtvYO+aJC3KNULqnUK2jBDzfl59JoNDqdzmAwCplMJovFonE8/qZv7LNuV6UxZiYAAAAASUVORK5CYII="""),
    "DL": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6MjRaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToyODoxMloiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6Mjg6MTJaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpmM2ZlYjM0YS01YTNiLTQ0ZDItOGYyNC0wMDRkMzI5OWNhNTIiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "EK": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6MjhaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToyOToyMFoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6Mjk6MjBaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDplOWI1Y2VjNi1kZTU0LTQ4MjAtOTg0ZS1mNDdlOWUzNmVmZWUiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "EY": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAACwVBMVEUAAADXnEXKy8/c29jU1de4sajbz6/Vki3ZzrPXzLHWki7XkiuSb0zO0NHg1LnW0MHc3NjS0dHU09TPxrHWhg/+/PXLyMbe07a1oIPWlzvYjiPbihLbjyBaOi+/u7TCtp+8ubTJwrRyUDXTnlHAurLjrlnd1tHLycPWy7DYq2nPzMSdf2FsW12NeXCjiG/VrnObfWjs6eaNeG/c0baniW/Xki7///7p4Mu1vcjf1Lrbz7HMs4/Zmj2sl4Kji3XIxMHXt4WompPUuZHUuI+noJ7HxcbawpzXvpmYjI7bvI7Nxbuzq6nUxrC7raHIxsTVw6jW2NvT19r////XyakvAwC6tq61sKfUjSXZhw1mLQAzCwDV1tG8uLPLw7HAu7G1s7G8t7C+uK64squuqaHCr5HafQBeJgD9//79+/r/+/bz7dTR0c6zusTm38Pe2MHJycHAwcHIx77f1bu1t7nk2Lfb0LTYzK7Nw66xrq7e0Ky9sqKllozGrIaUcEzwoyrlmieNWSBSMB95SBp0RRrWihlkORZpPBV8SBTWhAvnjwgyDwXXfABIFQBCFQAqAAANAAD59vP18/P08/HV3+359Or28erw7eLp4+Dh5t7F0t7289m6x9jw6dXX1dDS083KyM3578rV0sXa0sO7vsOvtb63ur3Fw7zGwbre07jEwbfLxbXm1q/Uya+rq6vGuqmgoai8tKbNwKXIuaGuqJ+xp57Bs529spuxppujnJqmmI3KsomSgneijnXBonSukGmehGjCnWXOoGCEbmBrXWCee1bYoUyVbkTMkThbPjTqozNjQi/5qirpnShJLCfakibDgybMhyS5eSKwciGmayFdNx+eZB6CUhzShhdrPRVfNRVyQA8/Gg86FA48FAcqCwfXgQZwOAEjAwHtjgDHbAB7OwBqMwBjLwBuLQBeIQAhAAAdAAAYyyQDAAAAUnRSTlMAlCIcBf79/fX19fXBlZSBOioX+Pj19fX19fX19Ozn5eTh4NXU0MnBvbeysrGnpqSkoqGcm5eUlJSUlJSUkomEgHh3cWlmZV5dV1FQSkpBNQ8HoRKO5AAAAa1JREFUKM9iGADga8DDo61r4oldVi8y7emznieP3bDK2r641dTadqlTFausS0978832C3X3nbHJ+kX13mi9Wl9/nV0IiyxTSH9XQ/iZc+Hd+lhkA2XPVs8/0lEXHt7hg0VabXpQ0IzDLy+ejlDGImsYFDQ3edn2rnsNjxwwZe2DgpZvDo3JPxX1sJkZQ9a1cMvO/KSE0OhDUX06GLICqypu97FGJyXM2x0S4o0uCxgzW96VkKg7MdnFM9eHKKHLsiiGLdwb2dbbWLWp5uhzO3Rp9eTQsln7Iq+l1Z5M7bzMhCZrVF0QW1madSztwY7YiG5NNFnH/hOFwcHBRblNkYmzU1LdUWU9Xt1tXJdVVBqcu6u2IGmJPJqX9u8JLpkSlDEhM3PayvI1G3lRY4k1b0FJ2dSM9KCJ2THxcWyrBZFlA+TC4mMrVwQFTYqOX7t0cU6OFoqHVcISQiu2zUmfXJxctTUlpeaAF5KsoEJYYmLchrhFB88fZ29piYhIlWGBSwrxC5dzcnBwiouKSUhKS3Fzc3GJOCEFNL+GsSUfn5W5Ga+FtQ0jCJj6M1AHAABl9JSD0rbEogAAAABJRU5ErkJggg=="""),
    "FZ": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAAC/VBMVEUAAABOfpccQlUTFhkHEhk0gKk6gKQ4dpadUgyVmJZJc4iCUgsjTGQfSmEVM0MdOEU9KxwfKS0SFRRBMSVSptNEpNao4PNMpN43qeW0Zhl4w+Kx1eHXgBJXjadBj8KYx9RfpchAjLSOYBA9hqyjqaepf0phk6w0aIM/g6QpZILNxbkwa4qPi4YJR3XDv7dmNg9tPQBiZGBCZ31bh5tBdZADV5AjZYdDYXiFe2IhUWpPLws5TVcYNUhfLAAxPEAfQFBHPzsOHykBCA9Nrd1CotM/k8x5wehJp9dBoNB9w+houeJLq9wxodxFpNWOv9Rrrs4aicw7jsg3j8We9v9q3/9TtvhNvfdVv/aEy/GBxelktelyvehVteVSseJhteFdtODU395Prt7N2d1Kp9tGqdoqndkzndY3mc9Ans4ki80BesxcnstBnMs6lco2jspwqck7kck5jMY2i8VyqcM1icN6psEziL8wg7sugLs1hbkfeLgufbcccrDfhQD9///V///O+f+Z8v+98P+T7f+f6v973/+U2/9n2P9X1v9h0P9PzP9Pw/9Iw//0//1Ut/3y/fi36Ph8z/hZwvfz+Pb///NqwfNlwvJPu/JMuPFMt+9Es+1+xuxnveyExuuv1+qTzupOq+own+ptvelZuelAq+mQyOhvtufl6eRyveRJr+N6vuFBrOE0p+EjmuDf5N+hy9/Z4N6Fwd5IoN6/1t1Xr9x6vduEt9tttduszdq90dkhltmAvdiQu9jA0debxdcalNdGptZHpdZwtdVksNRGn9M9n9OyyNJ2tNFYqdEYjtBAmM6ivc1AlM1FoMyRs8pNoMoeg8pZoslEnckmjckjhcl2qMgrh8iIrsc+l8cfkMczlMVuo8RupMO9ycIvk8IqhcI9kcGSr8AXe8BamL8xhb8ffr+cuL0zjb2Epbwberw6h7t3nblll7ljlrgse7RYi7IVb7Luz5foqlnnplDwqk7xp0PpnTL/ui7jfR/umxnckRfCfxX4kwDXfgDSfQAwE0NzAAAAQ3RSTlMAeEsYFM6pnHl4eHh1akEzMCchHf339e3s5uLh3NfT0s22trSvr62pn5+ZkpKKiIiIfn14eHh4eHhiXVtTUkpHPy8LoryyhAAAAbdJREFUKM9ioAngZ2Li4xdkwSFrr6GozMauzYRdli2kc1J4+PQOS6yy7CGxic7JB2eyYpXlaY9JdPZ2d+nmxSZr05ccA5T1TRHF5jLH0E2u3s7uvh5hmlhkWcQXuAYecfZ1yZjBh0VaLtTVtfBUiovHSmwOU2m7dqagKPeAR04YD6asbsPOC66BJQUuGUdFmDFkeXv2JF0JLHwS5JIzSx1D1qF1SfbevKKSiiCP3MV26LKACfVP8Mk7ln2/rCLorI8shmaJpoQ1mafzn5aX37g1zRBdVqFrY8LqzHNXX1aXXdr1TBhNVq3ROXZzfMD121XVD27OVkWTNQqOiPfZsTWg9HFV5b2FH21RZa2DI+Z6pe7bfbn01bvna+/KoMoK1E10i/RK9Tt88eGHyv3bvhugyDKLTXZz8/RK80u/86bm5LKvtULIsk5SLRsioz23nPA7/6ImIOrzHyUUzfLNS9e5rViVdty/+H1W1Ke/P62QJAWl66fOWz7HM879kP/rrOgvtb8kkazVmdI7f1HS+rjt6f75bx8Vf/v3+4c+QlpYT4vTmJGTkdHEjIvL3NSCg5ubQ4CBOgAAcvScwtkGincAAAAASUVORK5CYII="""),
    "IB": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAYCAMAAADat72NAAABPlBMVEUAAAC2AC6yACuoACrEigm9hQudASeaBym2fQGOAiSKASKRPAuACya6AC/feZXnngDAADDajgC2FTy0ASXbiADJACiwACi6AC/XjQCVETbp6+vQkALRkQG1AC6qACvbr1CzgA/OjgGpexi2ACXSvpOWABXh5OfJiwHd6euYASa/hACSASXQ09O1fQDOigCSACRjJUaFZyWSASXZ//ZgJD/Fz+O8rbCueQC3AC7////knQDAADC8AC+5AC7vpQDCADGyACCqAAfypwC4ADC+AC+uABXdiwDcg5nRW3jvyHHquEW9ET/IACvAACu7ASLuowDpnQDlkQDfjwCnAAD/+fz67vH//eT78+HwydLsvMf45sD45b7/5qjabIr5yVrFNFjEGkS6AC62ACvmpxjlpBK0ABD6qwD3qQDhlgDfkwAyPlSgAAAAOHRSTlMAsuO7qqCUiEs3KQwK/vz65+fm4+HPzMXFvbm5rqyrqKKbj4mHhYSEaWdmXFpZWFdOTk1BLCkoJ3gBe44AAADzSURBVCjPbc/VcsMwEIXhQqDMzMyMcmPL0NhhbsPMef8XiJzJKJG0/+03O3N2Am7G6XA4z05eYT3ABo4Z7c4TqKfGjx3eB/WaqF3sEdI7TKibtBKr4Coc71nJZjBQvAD0ezlhNQJ5ifQp6vxGPFiQBu0BxzvljDTsQdTjtA1Zn79SXRP1iljOHzJ13YxeCnoj/ftCuq7VEVKUOV7f/0paykS/iOSZ5vVrKZrSbBvwPf/Seosikqf4460IGqW6OT1SqQHDXFShYbeqwvAzo28emZI4bNbLKAq7GV30MlqLfIxwwSWzisK7Y3q+sn04ybT5QrUPtsRFfnho7hEAAAAASUVORK5CYII="""),
    "IX": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAADAFBMVEUAAACJBCUcEQ/JAziKMxfJ3tarqqxoPAyJAAFfXV09AgpBSkgpNTIRFRP/mK3QIDL37/H5//+hADTmnq/o7eupMCLfb4qeADCmKSKmESnLub/GmKKsPUCTZwuyaXyHOBeYABl/EB+njJd7ACSOCSWyS2LIjpyhvreBByOPiYteAB1yTgmEfn+YMxt4ACh1ACN5Ch+QAB2CKBiDPROAACd7mJFgJBJyhX9mBBtPKApMNgZjdnVbAxlFKghRMS9LRkdSkoJCCRFDbWM0AQ4zOzlUT1ArCAwcAA4TAAkXLin////MADrZXyDVZh7NAEDlAD/IAD/bBT7AAD7RAz3WRijWTiXdYyHOUiHkaB7RZRzTbhvbdxrnlhbXEAn/g6XxuZfmOn/vpX3jUXL/DEG1AD3pfDuvADvSCTniFTjCATfODzbPATbUHzPQIDHJGjHKADHNLi3SMiu9ICvXOSrCJSrNACrWQiniaSfPTSPbXiLVVyLKSSLZZx7ZLB3PAB3kexzXbRzeehrXcxrfSRrmgxnWeBnagRfWgRfNABfWoA3/3ef/zOP/5OL/ydrywNL/uc/9+Mvxs8P/ocDuo7f21rXurrL/lLL7nLH21qXphqX/iqT/fp/0yJT/a5T/pZLrk43/Y43ia4nmdoj/UYT0vIDmY3ziWXvnd3jzx3fvL3fiMW72Jm3ePmjtl2fwiGbeO1//OF/wsFraMlL/EU/rGEr/BEnXFEW9AEXrj0PsBUP5AELUAEHfEEDqBj/lbz7sBj7XHD3mEDziHDrFADnSGzjVDTi5ADfhJTbmZTTLFDT/RDPXITG9GC/bPi7eOC3LIi22Ey3EACzFKiq5KSfbUibcUCbZTCbKPybiWSXNRiXRTiTMRyTRACTDQSPeaCHpASHVFyD/kh/YZR/OXx7JWB73iR3NXx3JAB3GXhzNaRvnjxrWABr/nBnSdBnqnRfLdxfeiRbcixXPgBXXiBT5qxPrphPjZRLonhHUlBHkpxDppBDYpQzoswvPAAniVQLeQQG/PWQyAAAASnRSTlMAeBj+eLipenhRQjgiC/f38e7m4uHe3dbQy8S/tbSvr6ynoZ+elZSSkomHhnx7eHh4eHh4d29uaGJaUk5MS0pGQzQyLykoJx8SEE3Uq4kAAAG5SURBVCjPYqAJ4La243J0Y8Ihy8nGKqOgomGDXZbVy2ve/f17t1pglZXr9or/m+3tL4lVVjN51YTYbL+Tp8ywyZpPC5zRnO8XEsHvgUXWYXbglB0Xj8TU7FTGIsvDt3L+xuflv0KC/LkwZXmFdy1aERvznXl7hgQWzVKbFyb+/3ovoKDpITumrNLcmUubI640/vxYxowZZDob9kxMrw0L8ynIPKiIGZRxhyYfKM2pDPFt//zUFl0WMKe4LX2b6oKzfKJ9bx8VR5f19OpfltSR7p1b49v64w2Gw8Qmea3pCPbO8rnV+jYvD91h0slJc2JP5+SG+kZdf/lFHk1WffG2xH8tV8t8oiPDf585boUqa7ogYUn5t5bK0LaqqMiSP6Kosva9CWv31b661tjQ1H6psyhDG0XWZZZ/fGrpu+KwRw0VUdVFnYfdkWWZBFYvT80/GxPw4Xx4dcmntAhZlFgS8Zp64o5ffTFzW2b4s2PvLwRaIqdZQa+eda93n6sPKIwOqohMeVIlhBT9bF3T1z+oC/YOLQy6+Tjl7ou0yze0ENKuaqqGHByMjIwsjCYsLHpGxvoGus4M1AEA98yi22ZR0AcAAAAASUVORK5CYII="""),
    "JL": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAAA8FBMVEUAAAD////////////////////////////////////////////////////////////////////////////////////////////////////////////////++fn////////////////////////////////////////////TAAH86evPAADfOUPeND3ZFiL++Pj99PX97+/63uD3zM7voqXkWWLLAAD//Pz41tj2ycr1xcb0wMHzu73rg4nqfoXhSVLgREzeKTjbJi3ZISnYBxnvrq/xpqzvmZ7tm53umZ3ofn/lZGnkXmTiTVLYEBzVCw8hCjVgAAAAKHRSTlMA8pGkmXY9LxQQB9fPurSUf2xfVycZ+fTp4tvEvrCrm5eNhXFTRDg2rqsJ+wAAAPxJREFUKM/F0cVyw0AQRVErlmLLjGHGNxoxmdlh+v+/SSVWpBpYpsp3e6oX3Z3bQrdqrXamXrblmsemulSvEq3oMm0hqSXTO/xVlGgn1XOJlpSUdyVcSfVIupLrJnwtamP07CMc/3JX0PZ03vce+tEEQF7QQkA8Y0hmIAZQ4FVXTBPwP0ZYRM6BMFzu2RY82wdWttvktQrDJMEjAV6IZfAXuwB6Jl1bdDmnxDrltAkAU0rW0exzEU+4i93gJ8eOnwbB+H2lcCthk/G2pPHXq6Mx2s3+MAzDAVBivlQG2wkzfJyB+MrOIa97GeqaAoVtv5FxUauqO2z1+9z/9A0YDzGljkBzHgAAAABJRU5ErkJggg=="""),
    "KM": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAaCAMAAACXfxyGAAACRlBMVEUAAADYJi/SJi/TFTHwqau0HC3AHi7bJy/UJS/HICzMEC3KAADVeH3IIC3bKjDPDhzBAADOIy6+AAyxGi23Hi3ZJi/WGiPUKDHHIS7ZJi+9IC7RISrTvL/oPkLZHSHnOwyrAADjrK/eZnDpbG/aUU/CPEe9Mz+2IjHcAAPjpKi8cIC/KjPYJi/RFiCRAADjoZ7PHSzQSUnDGSfCCRbKAAnGIS7RGS2+HSfKAADMAAW6HC3NFy/FGS3MOkPZKDHZLTazGy3WJS7TEQC8GimhAA3UGS3HBRHWJzDeJTHUIyvNKifFQzzBFTDaMCq7Hi6+Hy3XJi/48fDNICzaHyv15+WrHC7NJTDGIS3cHwC+Hy7PdX3RDhe1ITHSJjDLIy3aNj29Hi3kW1e8QF7AJjLFKzXhdFL3xMXQKDG6HCv///+5HS3YJi/cJy+8Hi6uGi33//+3HC3RAATriIrjW2LgKC/AHy6zGi7eJi3aJC27HS21HS3LAw/w///++vnrnaDfKjPYKDHMIi2+Hi3YJCy5GSq1GCnZGyW7FSO2EyHNByHUDRXdCxPUAAjEAACyAADy8/X09/Pw9PP58fD/7uzl5OX64+L4ztHpztH2z9D4urzUtLrx0bn9sbHQoaTvoaPgkpnki5jefozliIvZeoLQeoL1mmHJVV3WP1LbQE/iQ0rdQEewNUfkN0PePUKtLEDOLTjAJDTRJDHXHi7BGi6bFi7GFSy7GiuyFym6LijODSfNGSTWFiCYBxzWDRnKABjDBBHOAADDAACgUx4iAAAAaXRSTlMAxgf+/fz7+nQa/v79/fz8/Pr66M/HxppjU0Y4/v7+/v79/f39/f39/fz8/Pz8/Pv7+vr6+vn4+Pj39vXu7Ojm4tzc2tnY1M3GxsXExMG/v7y7tbSuqaCfhoR7d3VuaVxcWFRILCgkIhPq+CtAAAABjklEQVQoz2IgC8SJ2LiKBjjGYpcNqszdvCknO0cSq6x4QW4uG3t2hTtWWY5tWbkFguXZFRzYZCVLK0tz2XRystk5schKt2eV5lbxlufkhGGR5bTtaGrKbdGtL+eVwpRlclvC07ehRUh55S4RLJqD27SnLOtT0JzZ3RiDxUvN9QJza9oXZ67ttsJ0WHRFQ061as3EzHkauaEYsvHFXYXZOcYymZmy+7ckY3gJsL1FU4sLe7h5MueY7HFBl0233mnJkjmtuFAu01BvXRS6l5y3MnMJ1GVm1hYpac2alIYm7ZfHxlzNPz0zv3+Bin5+CJpseGuWutCK/Pz5y3vXT5bfkYQqG5mXldWhpriwk7u6ty5zqROqrMT2gqys1tXmFp3M+zbWZs6OQJGVqirLyipgNWrmM+M6uCgzc0IqsmxKVmVWVh6rYElONh+/QSbLqkBk2QyHMqCkKXtJdnZ2Qw/LjMIDiUiyCblZVWV5jUCtQNC2pqhrtz0TIjQkhIX9fbx8PUQZQcDTW0zMjoPY9A4AxA56guBfVN4AAAAASUVORK5CYII="""),
    "LA": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAYCAMAAADat72NAAAB4FBMVEUAAAD///////////8AE4cCE4oAHWIEFIv///8BF4b+9/z9//8DD326vMsAEYgAA32jJXD///8EE1kAAHMAEokCE4n///8AE4juK2EDFYf//f4CFIj//v/29/nO1N2dqrpAWHsAGk7X2OwAHVYAGHPtGVUDFYcEGIkWJ3UAA4DrD04CF4nW2N4ADIH/bYoHGIYGGIb////BmMAACHna/v8AA2IHGIYBAHMHGYX/+/wKGoYFF4P///8AE4j///8AEY8AEooAEokAEowAE5MAEZEACIQAA3D/FlEAE4YAAoEAGHoAAlz/FEsAAEb/DET/AC7+3eQACooADIYBDoMAFIEAAn0kDXwAAHUAHW0AHV7/K1cDI1fYFVMAAFAAC0z/FUb8Azz6///a6/mw3vn/+vXK4/Xz9fR8qN3/3durstjHz9a8w9L/t8F2f7+Vo7L2jqr5i6hFUqh7kaOJW5//jJ5FPJf/dJUYKpRcco3WZIcaFIJAWXzPP3lFFHgYBngyUndNFXcAAHYAGnT/QXDvPG+FQm5xFG1PCG1/FGoAHmiiFGGsFF8LKloAFljJFFjtF1FPH1AlH1CsGVCDHE/0FU/9FEvzCkcjDkVPD0TrCkLqAT/FADoAADbyAC3oACr/ACTGLSgNAAAAPXRSTlMAts/CsbS0hGdcUScG+fHs6Ofn4t/Z1MnFwb6+vba1tbW1tLSzq6OWko6MiIZ4cF1aWVlXT0A/MzAuKxsPK7pS+AAAAVdJREFUKM9t0tVWw1AURVGqFFrc3d1dkxutK6WuuLu7u7vDr9LQwWiaZL/Ot3VOBPckAr4gm8eXcGv6jBGmFs2pJW/f74ezRpjHqZU3j1q94ce/2ciltU79k/vidNeaxKXNQwsnVgjgOKji0DazyoQDBAqsk61dsWQPRE2JiNgqS0Ghv6E42cTmLEoRDOAmTSJbSxEEEADtlXt0O9UsjSQwpXrf7vBero7DUqZGqe1nDtfd69FEHwxnMrXl8+X24d6t0CoOlicHGxgqjVlTGAx6hdbn8399xDO0OyFwodFF5/P1+fHWOlbBYH5A+wdGlrYRgBMY0h6uhWNTcysqm5wM9swI1zLSJt+zBHNSYerCtEZFQqFhRJyMrvXov6AYIAiLp5yurUFBAACYWa7RXc130FNS50NBILVao/O6NqaHBfSUyWlCoUhYLBYXFeTn5ebweKmhB/0FtJlb+EuRrFwAAAAASUVORK5CYII="""),
    "MH": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAABUFBMVEUAAAD//////////////////////////////////v7////////////////////////////////////////////////////////////t3OD////////////////////////////////////79vf////////////////////52NjWAAD0+Pzx8PT87e3v5enO1+e8zOL629qqu9f3zMrgvsTcs7oNP44DOIkAJHwAHXnlXVwAAFq1IizwDQHd5O/W3uvT2en86ej75eTr4OTo3ePGzuK4w9uxvth/p9P/3dL40tH3z8+Zrs7/0MuPo8j1xcWFm8OSmsH1wcA+ebr0url9ibN2f7FQcaoAR5oARprti4kAJYjsiIcAKIf/iX21Y3YAE3HnbGy4OEGmIjLdLizcJiSyFiDaHBqfAhfbGRKvAA30FwbqAADmAADRAADQAADsTBCqAAAAKHRSTlMA85GadbOjMB0UEfn169y/lH5aVj41CPDi2NDKxLmrnY2EcWtfRDkokqFBFwAAAQpJREFUKM/F0EWTwkAQhmHYJBAcloV1ty/B3dfd3d0F+f83oICQmQw3qnivT3VVd+t60DwnCBPclJutBjRyMnW6qSNmlrrRbI6lRrQyMVRUlGMN2xReYOioovYOJ0UkaW8NmNGqC8fZj7tYJLYKiBrtx6tckQFJ2g8YGCdly7/yAz6/L84CRlrN1qfif6GA3dIhYNMMDz//5fNf74m3n0Q8Pkurw3/5eHtzvxPMnAfXN+iPTQLhdDKVRDQX9kGglAewkkmlr7F1FT1YGqBPqnf0kjvxoZaeVA8abZ5uL4dCfvCEihaQedXqtVPqIIbHQKVebHGIVovqk/wg9GRWV5tN/DjXR+b06LpTFTPFN3zipfMzAAAAAElFTkSuQmCC"""),
    "MS": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAACrFBMVEUAAAAeKlwkMWMBBg0BAwgFCQ4CKVgAIkcBIEQCIUUAGzcBHkAKEiUAEicAECIOGCUBDh4ECRaStdE3T5gCMWkyRpsALFuqtLsCLmECLV+orrSBiZctQYpKZ5ApNHWbmpkSKWswOlKjnpgAIEQlN2ABJlAAGjQCJlItPWhYYWgAABRvbm4BGDJgfJJQantIYHcwRmosQGhHW2YsQGYNI0wAHDwAFSsWIEI0OksIGTZlX1kBESRAPz8ZJTUrMTYBCRMAChEGCREAAgX///8BM2wALWBCYqEzQpY1TJQCOHcDLmI/YKY2T5ozPpM2TZIzSZEwRo4tPI4rPYoZN3oNMGwALFwAKln///fo7ezt6+nf4ePB0d+bwt6Is9XHys+yvMl0p8mCqsZtoMauuMRjjsKmrr1jjb1li7qcp7mWpbdih7OPnrA8Vq9dga5FaKpFaadrhKU7W6RDZKE6V6E4RqF5iaA+W548V54/X505Up01TZg+XJc2TpdleJQyRJRhc5IwPpIwRZFkb4xZbotRaIkoOogiOYJJXoANNnkCN3QnRnEBNXACL2UCLWEELF8AKVUAAjzU9P+v0v/n9f7R7/3z+vmb0vj39vfq8Pb//fL39fDl5+my0eSgyOGatt16p9yPudmUvth1mNbOztOCrM5Dcc5umM2pvMx3qcxnmsyUsMZWgMWns8N6psNzpMN+p8KFp8Bbh8B+ob5zmb5AYr55oLpLbLpvl7dLdbVWerGaobBmirBPdLA5Tq6MlqyHlqtMcKlXfKh0iKcuSKdIa6Y5T6ZIaaNJa6Bad5w4Q5s3S5ofRpo2RJo3RZk1RZk7VphnfZd0f5YmO5MYQI8vRIkoPIgaPIYoOYQ+XYMWO4EEOnw3U3sWNHY7UHUxS3UGMHUSNHIhLlkAKFQAFkq7Ev+CAAAAQ3RSTlMAeHggGhXPta2em3hSTEhAMy/7+PXt7OXj4NzX09DLtbCvp6afmZGNiIeHfnx7eHh4eHh4eHhzbmZiWllLRS8qJxIL+9p4YQAAAbNJREFUKM9ioAkQ4OXjF3BgxSHLx8nOzsGlxotdVrnbxaXj5rXTllhluW4FtwU2+JbIYZU1u9xw8lxdY0COOTZZnsMlp3x8qjx8hB2xyAruPVpVWVleVrZNBYssq2hOobd3Xl5+/mpbLNIyWwp3bExJS0tfJotFVmFpSmzM3JiFsQnTjDBlNSZNnhoRFensPDtaCDPILObV363PzNjXdHGxsxKGLP/Bx1037rXEr0nd1XTIBl0WMOaORRsutN/uq63NSHaWxtAsdv/S/CmlEybEJ2enFmijy7K5hLgXr5yY+bA5qnR/BAuaLIdnGFB6T9KcWXHt4QWKaLI6nl5hd86We6eviHZuaXbmQZW19uxxdW2tq3HbmZAYGdclhRYPnT1e/SG+jR5uRzYnLQ8/oYUiyyLi0hsaejXQ38OtKGvdqpnZzMiyThLdva6Pgn2DPPyL3HLXbpouj+qlTlfX/gfurQF+fscqctdvn2GFJGkv6enlGhZ8JjCoxv/8gYqsxCXiSNZyurj0hXq1uQddD/C7Un28evfWBZpIAa2uys1tasLEyMjIxMRoaGCsr6drR6W8BADRfI+rAjEiogAAAABJRU5ErkJggg=="""),
    "OZ": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAAB+1BMVEUAAAAXFEsYFEt2bWp6aGIhGkqbBymaEivhOAyZFSx2b2x2bmt2cG2ZFC3bNQ7sOQd2a2h4cGqEXFVzeHDEjCV3bWikhUgQD0qcaikAAFhKOj+TEC+gFynaMwzpQQDhKQCESVJ1b27JjyOMO0a2hzSOK0AsI0qTHjePLz/LkCLKjyKEPUaOMUCiABwSEEp1Z2YAAFILF1CODTGzICDRRBQnIE2VEyogGFdvfHZvdnKGR0/clxS2hC51cW1/UlyIMUF2bmvLkiJeRUluanEkHUzSkxx4b2h6bmR0e3CGaTp2bmvLkCKYFS2bFCugASB1b23NkSDJjyOhAB3hmQ9iZnxva3EAAFYPD0ySDi+dByR3b2x4b2kLDEsVEkqRKTzIjSPVlh7YlRZkZ3pqaXVze3RxenSAcmIaFkqJCzONDTGPBTCYEiycDSjHnibamx7Rkx71rxjdoBfvJwGupdWuutRZeItsfHl4b2rOZ2hxSGPfeGCQeVSTelKCPFADBU/7fk2plkaigEX1jERTT0GOMkGthDzGRTtrTDlpSzm1hzV/WTSVFDS/fCvZUiqreinIoyaMAyaXACbBiSWnGiWJAiPPeyHcPx7ioR3xqhn6sRfUWRenABfyOBbQkBXRPBTOLhTUIQ/2gQ3lVw3dMgrpPAjoowPcHgPQFQCzCABD49fRAAAASnRSTlMA85GaEP328/PbzbSnkZGRilc0KxkVBPX08/Pz8/Pz8/Ds6+HcxcG/ubSloZ6alJORkZGRkYB/e3V1dXJtYFtYREJAOzcwHx8JCST7F84AAAFuSURBVCjPxc9VT8MAFIZhYMPd3d3d3WHtKuvcfcB8uLu7u+vPpOuyTNpLEt7bJ19yjs8/1EULDQ2jRUVTaxjDHgxXUmqUkEEUQqfSaJjhqJ1KY53KiKfQASfCNKpxtgOnVapeCg0hzhJx2No8Ci1VE1s2Z1PRStYGqYaYLiAYEkfSznupRihScnYxOVpC0hgIkqphthbAABTp91Z6gAHamFLOKxQogOSQxsECkLU4uYqZUQAwt3lrIQQyT2dXMATAIx1WxgKZ/LEDK0BU7KUtLD2uT1YUN5n8uttTOyADkz/68mbE0WQBkhI8XxIIcH223R3L5Ldn25JGDx0MEID7J9+2r0vjjWmHxxUPu+tQMATqL7bmZg4fLUf+XJ64wF0T8vGjR36WJ8bXPve4SzqJuMdNY3Ptev7xfvXwus7l6SQ8fxfSm7OgwMDUtKCg9MyMlGRfvMR6F8c3FZWHh9fURkZERNZVV/nhVfT5/E2/eZxsIzXVkSAAAAAASUVORK5CYII="""),
    "PR": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAACK1BMVEUAAAC9AAq8AQwSHWqMMTu3Cw9GNWBVRFUyMV8dJWcZI2cqLmG9AgykIi0+MmJKSFe7BA53YUa7AQwhJmZFPVljT1DJnjfybBW8AAywAAY5N1u9Bg2gb0A4M1+7AxAkJ2a4DBFrVVA/P1mJaEG7BA4xMV////////+8AQz///+8Aww7Oma4AwscJWb////s5OW8GR5XXlvGMBf1//8tJkt7XEm8BQyNaEPDCAqvAAAfHWYvLV/+9vi4bTzt7fK7AAuoYDu8BAyCTlAoKWa+DA0zMGO9CA28AAz///+9AQyuAAJaSVO7AAodJGY0Ml9QQlexAAa0AAAEFG4JGW0/OVxiTVCodTsAAHsADnIiKGQvLmE5N1xpUU52WUqBYEeFZUWNZkSabECUcD+MaT+ZcT6reDqyfDivfDgtHzXLhjLkpjD/xSj/wif/vSfxoSb4oSP/rhy4AAq1AAm5AAKw3v/7/Pz39/n78fLq6/K3wOj34OHNz97/2NP30NKbnrvoqaxtdqZma5ffhopGSoLad3wABHhER3YzNWsRHWoYImdKPllIQFiJelfPUVdURVVLOlDpuksxKEqHYEd2W0KQakGccD/HOD7dsjqgeDrWqjmQZDmEWze5gTa/gjXAgzSZEDK8ijFmSTDHiS9FKC/8uS3ajy33pyrrlSpRMSrcmSnwjCL2pSHkcSC+GR/tbhrXTxn/uBfXQhLIKBLUFBLAFQ67CgvtTgrAAQe+AABK1xf7AAAAR3RSTlMAkfORBhMS8/KgkXV0PB/4+PX18/Pz8/Pz8+zp4t7b2dDKxb+/ubSzsaujopuamZmSkZGNhH9/dWpfW1pXV0RAODYzLy8nHJf0ClsAAAF6SURBVCjPxdHDcgRRGIbh2LZt29ZpjRGbY8W2bdt2cnnpnspieqaXqcq7fepbnPPr/UM5MSGh4bGJWdQa2QkRDcRRatKkWrv8jKk0u21EzZvpVFpY2zZI6DhCNbahN6704TqERFGNPSp26d0Q1MtSWVOoP0rfm+qAoAeWD4Wa81DuyRgELSCwla4mc6p43OthaBTBQImOZtbSqnj0s/Z+RAUidLSAXYMuVi/N97yxYFCkrSb2KGODwW9cPvqGMU+dsS/KLztcFWx9sgDA0rQ1cL20ubr+7vyRCQAMjLWfRGthcOUC0S1TAQMQpqWpdWXlsqYLyeWHEleQS9aMytYW9uyzVPLKJNTAiKR5a5yJGmnzlfgJAXiYFflKtg3bTWyGXHSPYATDpLGRN40z13BzKpQpFTChQSQNqKwony6lCcXvTLV+aZ6y2Ov4oJVfV7+/84LgirOdxk9ams04mjmZmjq7uLq7GRA5pGhycLQhnoVFfIL+b/l6f9MPGudvhVfRq8cAAAAASUVORK5CYII="""),
    "QF": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6NDRaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToyMzozOFoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6MjM6MzhaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2Njg3MTdkYy02YWU4LTQ2NWUtOWFhYS1kMDA0M2YwZTg2ZGMiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "QR": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6MjZaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToyNToxNVoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6MjU6MTVaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDplNmI0YjdiNy0wMjlkLTQwYTQtYTAxYy1iMTkzOTVjY2NiYTciIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "Q4": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6MTZaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToyMjoyNFoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6MjI6MjRaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo4ZGYwZDRhYi1hMjQwLTRhZWUtYWJkZC0wNjQwOTM0MjRmY2IiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDpiODNmNTQ5OS1hYWM0LTRlNDgtODhmYi03OGQyZjA2YTMzY2QiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDo2MTAzM2Y5ZS1jZjY1LTQ2ZTQtOWQ5NC0wMzYzOTYwZTYwOGQiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOjYxMDMzZjllLWNmNjUtNDZlNC05ZDk0LTAzNjM5NjBlNjA4ZCIgc3RFdnQ6d2hlbj0iMjAyMy0wMS0wN1QwOTowMDoxNloiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNC4xIChNYWNpbnRvc2gpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo4ZGYwZDRhYi1hMjQwLTRhZWUtYWJkZC0wNjQwOTM0MjRmY2IiIHN0RXZ0OndoZW49IjIwMjMtMDEtMDhUMTU6MjI6MjRaIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz6Bzd75AAACn0lEQVRIibXWTUgUYRgH8Od9d2bUiVXHWtMOu4SxkBEYHRNzo4PkyVKCoEPRscUN7OTSqbsSnrwo3rrkHgw0/IBgx6DLBtFpD5tKSJIyu7bbzOzMv0uGxs7HjtsDc5vn+b1/Znh5GADyKkmSGBGRYRjeL/so5gcNPJyxEBExIrJwDPqvqFMJjR4oy7L4fGLice+V3ni5XBbaWtuMSGekqVyuSJZlCdtbW78IQMOe1nD4bDab/QKXymQyuYaBbe3tzZuqmncDTdOELMs3Goaura99cgMBYHZ2VgVADQFXV1c/eoEAcKmn52pD0Pm5uRU/4PLy8vujnlOBMzMzb/yAAHArkbh9ajQ9OTkPALZtu2K2bUNV1dzx3kBgMvl0GgAsy/KVcnho6N6p0NT4+Etf0p/K5/O7/86oC3yWSk3UAwLA/bGxJ4HRsdHRZL1gsajpnIgDIKmpidWFDgwMPHL6fm4/UjqdflFrnifY39//UNM0R8DpMOVKpcoZEwCQJIp/U3qi1/r6hiuVimOSo4PUOsz01NQrABQKhQTfSaPR6M39/X1X0KkMwzDPdXTEiKi51uyaYDgcvl4oFAIlBICFhYW3Tilroi0tLZc/bG7+9EpjWZYjGo/HT1wGrqgoihez2WzJLR0AVKtVx8O8W1lR3cATqCSK55eWlna9knndtYnBwTu+UCLiXmuGW1mWBdM0sbGx/tkLBEAUi8WiOzs7xaDg8bo7MvLADyokEonk3t7et1wutw3bJiICMWYwxoqlUvF7ofD1sKurK3Shuzum63oERMQ5BwE/dF0/LJZKsqIoZzRN0zOLi6/9bIxMFATFMM2DIOsmY4wBqHtx5pzzg0hnZ31NjDEioiAgEREXBIGqhuG7QeCc2S6YoijMa8ZvYKAw++9NyY4AAAAASUVORK5CYII="""),
    "RJ": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAABzlBMVEUAAAA2NzxQCQ87PEE0NjoODxAREhQXAgMeKCsfJysXHiCRFCA2OT2VERwZGx4MDxBMBgwMDQ45AAIJCgonMTVeYml0TVdVWF5WWWFRVFpQUllYSlEnNDdHSU8aISSxER+vDRuiER49P0QXHR9ISlEUGhxyGSIzNDlFR00SGBoeICMSFxkpKi0KEBF0BA40JikeHyELDhBEDBFVAQgWFhgFBQVTV142PEEwODwrNTpKTlVARUs3PkMrNDdSVVxFSk8tNzsmMDNVWWA+Q0g6QUZVV19NUFYoMzcnMTUhLTFpbnZoa3RgY2pOVFtQU1pOUVhHTFJDSU4xOj9aXGJ3ZlhITVNCR00lLjGyknZla3NjZm5FZ21aYm1bXmZjVFyGblpFTlqObldWU1ZyYFA8REwbMD4lNDwdLjgWKTT+HTH3sneEanS/l3OqjXJYa3JjaHIzZmr1rGmGeGiIdmZDXmQ6XmSAWmRxaWO1hmBPWV+KVV+beV6wgV0yVluWT1t+aVk8VFk/SllBS1iWSle5RFNeWVJ3YVGLZk8wSk4zSU1qVkwxQEzhhEp+Wkg2QEiZO0foMkRcTkO/NEMgM0NVSkBjSj5MQT5CPzv/JDiWUjTCZtRGAAAANnRSTlMAeEt6eCQeE+zbs6GbmGNTMi0pGfr36ubl3M/OzcG7tbSspaOZlpKNiop+fXFwb2JVSUJBPQvfwD8HAAABkElEQVQoz7XRRVfDQBQFYGgp7u7urpNMPGnTJHWjxd2Ku7u7678lwKYSdnAXs/nOmffOfSH/kkSVqiUxOeIXbY4rKCyKKVcpa4zX+3i0uTrVoKhx73d9KzvnF7mKWn/fN7+vRSWhTklVx93Lehon0FSlzZJ3uzf0bsLBOEoUNCJ9lqMwHIEsbFLgnE6zVY/RWgSNUtBig0XfTmt1BOqoCdYKA0fJSqCkIIYHabzBaZZ/tmsREkYHaWtX7wA2MmLHdQjDJARquKnnYGhr8HYcZUgYvFhGz1DHUsdM//MYI8KqQM2bcy5Or7lOhteHJ0hRE6CxRsC5XHunZy8PbxKTH6C1Bo4zH25PLlx/CBMsjPfXRqOT56mBy8H+m9dxlo3016TOXsBTGH31NDo6RrKwzE9T0kyAB1abfEVIsh5JTPLVtswuwAHKYm3HdQ4oeET/xrKNgJcRs7lxnVy3R/BtTJNlBMCM2b66lPtiJSnSZ2ysyURZMBvtxuUzInIIe7VP0ZWlanXod8J+3jC1JuRv8gnfbl4e2NCsXQAAAABJRU5ErkJggg=="""),
    "TG": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDE6MTJaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQyMTo1MDo0NloiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMjE6NTA6NDZaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpjNjA4Y2VmZS02NWZkLTQ0NTEtYWUzMC05ZmU3MjE5NmQwNGIiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "TK": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAXCAMAAADA1rRbAAAA7VBMVEUAAADiHx3iHx3hFxbiHx3iGxniIB3iHhziHx3iHhz97OvylpTiHx3iHx3iHx3iHx3iHx3iHx3iHx3iHx3iIB7iIR/iHx3fCQf74+PfBwb4ycj2ubjtdnTkLCvdAAD0qanmOjnvhobeBQTlMzL74eHeAwHiHx3eBALiHx3uenniHhzdAAD////jIiDhFxXgEA7fCAXrYmH0p6b84uLqWFb2tbTvfn3qX17pTk3mPDvlODflMTD++Pj98PD73Nz61NP5zcz3wMD2u7v1sK/znp7ymZnxkZHwjIvkKCb85+b4xMTtdnXraGfnR0XnQkDIDoGsAAAAKnRSTlMAtVYe5rp9PtzHtbGvqZ+Uhk02JA348d3cz7W1tbW1qp6Pg315b2tgUUki8LKJAAABA0lEQVQoz33RZ1fCMBiGYYGyt+DeW/NmtaWDguzl/P8/xzdHqzYEnq/XSXvnZMe4fK1SrdWrTSPmyPfSJrz/wawJm2TL0d0YLQNm9mNtGLRA4rXWMRubqemyy0GwDU230/nC6YHiwho+4MGhO7IV53TME+hQF1hfcUbD1h7YlNoA0YDxlIZtS6yeKe1KBoslPGpaVN9VSkToHGhYBgm8T2kAjPccrelqJu23YEzpGARqsukucnjH917xxxMO4UUC0wQmGAuSfPgj73P6lLwoFrlSMiIANzvUX5TB8oWBFMiBe/MP64g48AfzkKzevWH019RuWMVKSu38rHxcKp2cHl3/4hdBJjEypdLJAwAAAABJRU5ErkJggg=="""),
    "SK": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDI6MDRaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQyMTo1Mzo1NVoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMjE6NTM6NTVaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo5YTU3NmM0Zi1mNGI2LTQ3MzItYmZmNi0yODU3YzcwOGQ2ZmEiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "SQ": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6NDZaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToyNjozNFoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6MjY6MzRaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo5YjYzNjU5NC04NGJiLTQ3MTAtYjE5NS1iMTEyNDAzN2IwNDYiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "U2": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAGgmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6NDRaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToxOToyOFoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6MTk6MjhaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDoxMTQ0ZTgwOC1iNDFmLTRjMmMtYWViMC1jOWU3MDQzOTE4Y2QiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lkOnBob3Rvc2hvcDpmMWMxOWM4Yi05YmEzLTFhNGYtYTgxNi02ZDcwYjQ4MTViOGUiIHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD0ieG1wLmRpZDpkOTEwNmFiMC0zOGUwLTRiMWYtOGU3NC0zZGI0NzRjMDhmOWIiPiA8eG1wTU06SGlzdG9yeT4gPHJkZjpTZXE+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJjcmVhdGVkIiBzdEV2dDppbnN0YW5jZUlEPSJ4bXAuaWlkOmQ5MTA2YWIwLTM4ZTAtNGIxZi04ZTc0LTNkYjQ3NGMwOGY5YiIgc3RFdnQ6d2hlbj0iMjAyMy0wMS0wN1QwOTowMDo0NFoiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCAyNC4xIChNYWNpbnRvc2gpIi8+IDxyZGY6bGkgc3RFdnQ6YWN0aW9uPSJzYXZlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDo5ODU0YjNjZC00OGIwLTQxNTMtOWNmOC05M2FhZWUyYjI4NDEiIHN0RXZ0OndoZW49IjIwMjMtMDEtMDhUMTU6MTk6MjhaIiBzdEV2dDpzb2Z0d2FyZUFnZW50PSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgc3RFdnQ6Y2hhbmdlZD0iLyIvPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6MTE0NGU4MDgtYjQxZi00YzJjLWFlYjAtYzllNzA0MzkxOGNkIiBzdEV2dDp3aGVuPSIyMDIzLTAxLTA4VDE1OjE5OjI4WiIgc3RFdnQ6c29mdHdhcmVBZ2VudD0iQWRvYmUgUGhvdG9zaG9wIDI0LjEgKE1hY2ludG9zaCkiIHN0RXZ0OmNoYW5nZWQ9Ii8iLz4gPC9yZGY6U2VxPiA8L3htcE1NOkhpc3Rvcnk+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+T7+kMgAABa1JREFUSIm1lm1sllcZx3/XuV/7vLWl7yDpAGUW7EK3dqMDR0fJNJYtRkmMCSxRMz+4FxNf4gfMzJahMVGzwIxxzo2hxpTNNyCaGbpWusFaIkKoIwGKFrp10Ke0D215nud+O354StPSrhqoV3J/ua9zXb9z/c851zlS4ahiT0xnXUoPd132NItscdu0lKB0EPoToY4AROtF5wAgIlJiSWku0Km8ZijSOj/t+39BFzJzsRMWF5dYO9eqr66KSXM255uGYabLY6YZ+b5EEhrvT5JdVGh13Cn7UxPdLcu8OjxAAAUEgAZK4NC76qRaLGBlMu4caqanpcKre2eA9pfOSdHgOB0EQIAGyI4oHj2pnpiGishtTeC1pqinMemv8vJwZwnGeKBzE3m+cy3Hjg+uc4wk7B0wjo3meHtRNtI7re6J9cX5hrwHToIrp66wZ4lJQ8riy15IJu6Sjjmq7O5O+65/pr3Tty3vr5tjb6wv9xqwwdNc7Rzka71X5a0P8lKTcumJmWRjcco6h+zuE1eyp/NRyG1Bf3Ff/Hfbl2cf6r6kn/3eSVqTNkvaL9FRn9Sitf7G8WHxxz1ccsLPB9Wz04Fa61v6dtU7r+rPidafJXf0AVmrteaHa3iyv5WXj3ySjw5s4enzrehgG7q3xTw5M/aWgDs/EXvea0OHW9F629S3nR6tNT9aQ5v+Avr9T6Fzn0HrHaIfW2lumxk/7zlNWEp5GOL5fniz76k7Y889X5f/uoqAGPSn6TaEquWl1Hbcr9admVRnM5MRCQOcFAwMm5df7Pden5lj1pomHUtc2yoS01LzAZ+pj31rd2N2p5IILCCEUZ/92ZC/9o+wvXdMsp+u5C0TSNqAAbsvyHdvxK9OmYYoS2YdmYRjm4Ybk0xmzL8Z+OhK94l9G/w9ZCOIwAN29cmyFTE9ci2UVY9U6wOuYmWpjdgKxIXx65a3otMqSk9MRk1ltnEio6Mw8PXsSk0dzgfcuDTxpVfrp4B+QZ+zo/JaWw0PPvwRaTo8ov797TPGG9VJxHEK3Q9L+PFF+wfpickI4FQmisLA13PkHZr053SKzTXOjoP3XH9ZVIT2ARP+keankdbP3Vuun7GU7l6b5PFKV/6IIYU+a8NERkUvnc/vAnBNQ3lBMJ3bNExTwhk/ZlpLtdt28N5wX9LW4IOYBejlHL9cWsSln52Xj91fon+ypUJ/vLkkfBgPiIAi4ff/4oXBSd8vdU0rF4Sz1BPXNiWbn1vh8pS76d2WoCvphAVJDRiaYGgox+t3V7N1fIK9fWO0N1fwCi7N+BTGWRBh+Ks7zNr+jD+sdRjcnFvNB6yIOY1d64OupDsFBMKIkeGQPX/PyDe3dBqPvTggtffV8CuEZrIUZAWIQ/tFOXB+LDe0LCZzTgAwtw2allv3l+bwyKqSsLBFdaFKA+xig+LJSL7SMazetE2pVA5NRDODgbzi6XNqL8Dg5PzLNgtakShacXhD1NNYGRbhTwEV6JCuo6M8bmk2/PY9OfZKQ/TCk3dFWxm/KVsM/vaeHD03lj80H+yGSZUjjPqCZdpV7Y3+qbbasIoshQ2hwAs48+YIrcdH1YYym42blujVa8v1QwQY01XKDajwyNtFbQcGJv+8IDQukIo56uBG1XdPSbaO/BSQgqwo0msOWyvSeSO1tcq/Y/e68A8Jm0pyTD9Hxv1Cgzqasfo2d3v1CwEBzKqEubz3Aa+vrEanmADsGTM3AE35/gZ//PQ1f98X7+DzJIiTK0iJKkwwGQBx+M0Zvr/5vxEBc1OV9dRFsYd6zureaGrZRURbBvnMdc++MK5VfZlV3LxUWo+McuHaFRkKDVM7KgoC37eGc1FxqWvmslclfXzE2/8/MKEm4RR/2BUGRmyhKw4c41auxgUSKkGUzOerdZGYKaYhYs3rT5hqIeiiv/AdyzIsImvCD3MfNuY/bKxZ5oxMhXcAAAAASUVORK5CYII="""),
    "UA": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB0AAAAdCAYAAABWk2cPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAFuGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgOS4wLWMwMDAgNzkuMTcxYzI3ZmFiLCAyMDIyLzA4LzE2LTIyOjM1OjQxICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgMjQuMSAoTWFjaW50b3NoKSIgeG1wOkNyZWF0ZURhdGU9IjIwMjMtMDEtMDdUMDk6MDA6MjZaIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wMS0wOFQxNToxNzo1NVoiIHhtcDpNZXRhZGF0YURhdGU9IjIwMjMtMDEtMDhUMTU6MTc6NTVaIiBkYzpmb3JtYXQ9ImltYWdlL3BuZyIgcGhvdG9zaG9wOkNvbG9yTW9kZT0iMyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDphNWQxYzcyMS1iOTJiLTQzZTgtODRmYy1mMGU2MTllMzY1NTEiIHhtcE1NOkRvY3VtZW50SUQ9ImFkb2JlOmRvY2lk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"""),
    "UL": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAACeVBMVEUAAABvGSlYWFg5OTk3O0AiISK5ubmjo6OSmZR4fYC3triATleALwB+gn9ycnJVV1ljYmNga2lPTk88QUIoKCgdJiTZsLf////y8vL////MzMy4kHf18/TBxcfR19KpcHra2tr79fn99vy8trepuLWcoKLHx8eOWDe+vr7TztKxsbGrq6uLgIKSkpK4vbmSkpJwg4+AkY6WlJWin57LxsuhxMOTlI1mBRaAPBNiAABwfntPSENAQEA8TFUSEhL///+nKD729/f8///x8vL1/fz4+Pj09PSpKkGrKUChHTacBB+kABv+///19fWrLEKqJz6lGjIDLw0AIQAAEwD5///u///m///9/f3x/vXZur/RoamfsqO+iqLhw53Dh5PZY3lTkHLMR2A/YEauLEOyIz2jJDuhDSerAyKYByCYABidABaUABWXABPBTQiLAAD8/Pz6+vrl/ff49/fs+/bz9/b+8vbu7+/h6e/+6e3i6+P52+LH7+Hh5eH/0t/c5N7Nxdzp19vO4tr/xNPOvdDM2s/B0cjZzsjEy8S90MGx0MHPu7+6zL7qsr3js7zWsrns3bj2qbeku6qGvqfUqqbOmaKcraDbwJ/asp3ruJm8fZeEpZPKhJFwqpCLoZDCgI15nomGmYnsaIV/j3+1bX/eXnjSYHfVnHNdjXO6ZHPUXnPZpHLcmXD3o27DWGxQiWurUGnfRmfMjmbETGPOilxVc1y5Q1mpOlfYi1JMa1GqM0bshEWjLkM5XUI3Wz6oIjmfGTTbcC8gTy+iFS6jDyqhCybLYyQTRSPFXBwQOxrHXBkAQRnYXBDjYA+QAA+UAAnFQgC+QgC9OgDFNgAWOPN9AAAAP3RSTlMAeEkwIBium5uLeHh4dmNdVkw/KigT9/Xt7Ofl4+Hg29PRzcu6uba2tKymn5+RjYmHhH17eHh4eHh4blg1MAtoHWmXAAABoklEQVQoz2KgCbBhYhJiFmHFIcukrabBxq4riF1Wyx4C+LDKstuHO/q6uVQoY5XltQ93dXQLiZpghU1WwN4HKOsSmSImikWW2d4eKOvsEpWog0VWVAIo6+tc5rRiJTZ3K9gXAGVLnPq85bHIstnnFzmGOLlMyYs3xJTVB3rWyadhtkPeTidhDFk+e/vO6t6tAedy4uxVMGSF7NvXLVibfjjNMzLUnh9dFjAW++hTizZ4e+zznBzhLIWhWXJi8PyF3sl+mfP62+w50WWVOoITetI9/AO2Td9e7iyCJqsZEXisdUmah4PXzNijPqposkb2e4Lm1Hp7+DtkxsSeRHeYgP3cwION8UfcHVIzmlcdkEWPh7oTgZOastwdHDLWV+auQXUYq7h9UlBCaUqAg4Nndv20S6tZkGXtZOy3BC+3T/QCGn02pvD4GXUUzYpAvbPsl+b4AfUuDtt8cZc1kqSwXPfeHcX2m7KS/Q55xYUuO39aGslajpboqTX2Vf5Ak/fv7grbeCF3hgFSQOtx8HKZcHFbMjIymnObmvHwWBjbMlAHAADbA3wgvGlPVQAAAABJRU5ErkJggg=="""),
    "WY": base64.decode("""iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAMAAAAM7l6QAAABaFBMVEUAAAARLjUGERQMGh4HExYDCAkaRVEVOEESLzYMJCoMIicCCQsCBwkcTFcVOUIWOUIWO0QUND0HGiAKGh8JGBwFDQ8bSFMfU18eUV4DOkgmREgVLzYMKTElOToVN0AYP0kRLDMYQUoACBUPKC4CBAUcS1YaSVQZRVAbR1IfVGEkXm0aSFMiW2keTVkfUF0SQE4AMD6ViF2Tgk4ZQkwHPEmqpaSjoJ+dnZ2HjpAPRFYGPVABOUwYP0kGNULX0tHe09DGyMzCwsKwtre/uLaxsbOsrq64rq2jqKuXm52MkpNreX5Zc3i4onNCYGghWWefjmCmkV0LS1srUFeHflWki1QNPUkFOEX////v6uvm5OnV2dzH0NWqub3SwLurqKvHv6eanqWOmZzYvpZvi4xbgouLl4mRk4N4gYNSdYJcd35edHJFaHA3YGQ8WWGNhFx2d1m5mVYERVVja1OpjlI7WFJaZlEjR1BWYEbF0L7wAAAAJXRSTlMAeDBLQhTRrZ2IcyAZ4uHOtZ1jWVIo9/Xt7Ne1rqemmJGNfn0LgwOyzgAAAVhJREFUKM+10UVXw0AUBWCoUIcq7pBMJk2aNEnd3V1wd3f4+9C0i7QZdvC235k597079i+jUCpVCof6F1VZzGaNdlWJ1mWyCqELklakWkgMw3CnawqpelFxAupRaifpnjqxaTUqM+USvwZQi1D1LBSVAC4VgieogdKoYJpBLABQwXSNUCDwowRggDyYtXFdem8GgsEQe78kPyW1t11+rj8+vX5cXsgOasD3t3bdnLtWb5eP5mWP586j8Z0k9+Zucadn67KVXm6iyUQ81+LatVvGOLoSJdzFErl0+tj9xYQWR3SDxHDhJJbJew/zTIS2D6ut14OAZ1K+gi9b7E6iesDYSspT8GevgrohNc5A8Zag4/f4vN5mxyDVTVNVVCfBlg48xU9hQdaSqKBb8T+wEdomQYeJwmi63xPBsBGekAQzaiHE+w0DwPN8OBzGJcEMayvjo6MY+5v5BvEFQA+08zvBAAAAAElFTkSuQmCC"""),
}

# (degrees–>radians)
def deg_to_rad(num):
    return num * (math.pi / 180)

# (radians–>degrees)
def rad_to_deg(num):
    return (180 * num) / math.pi

def get_bounding_box(centrePoint, distance):
    distance = int(distance)
    if distance < 0:
        fail("Distance must be greater than 0")

    # coordinate limits
    MIN_LAT = deg_to_rad(-90)
    MAX_LAT = deg_to_rad(90)
    MIN_LON = deg_to_rad(-180)
    MAX_LON = deg_to_rad(180)

    # earth's radius (km)
    R = 6378.1

    # angular distance in radians on a great circle
    radDist = distance / R

    # centre point coordinates (deg)
    degLat = centrePoint[0]
    degLon = centrePoint[1]

    # centre point coordinates (rad)
    radLat = deg_to_rad(degLat)
    radLon = deg_to_rad(degLon)

    # minimum and maximum latitudes for given distance
    minLat = radLat - radDist
    maxLat = radLat + radDist

    # minimum and maximum longitudes for given distance
    minLon = 0
    maxLon = 0

    # define deltaLon to help determine min and max longitudes
    deltaLon = math.asin(math.sin(radDist) / math.cos(radLat))
    if (minLat > MIN_LAT) and (maxLat < MAX_LAT):
        minLon = radLon - deltaLon
        maxLon = radLon + deltaLon
        if minLon < MIN_LON:
            minLon = minLon + 2 * math.pi
        if maxLon > MAX_LON:
            maxLon = maxLon - 2 * math.pi

        # a pole is within the given distance
    else:
        minLat = math.max(minLat, MIN_LAT)
        maxLat = math.min(maxLat, MAX_LAT)
        minLon = MIN_LON
        maxLon = MAX_LON
    return [
        str(rad_to_deg(minLat)),
        str(rad_to_deg(minLon)),
        str(rad_to_deg(maxLat)),
        str(rad_to_deg(maxLon)),
    ]

def is_key_present(k):
    if k in TAILS:
        return TAILS[k]
    else:
        return TAILS["Q4"]

def reduce_accuracy(coord):
    coord_list = coord.split(".")
    coord_remainder = coord_list[1]
    if len(coord_remainder) > 3:
        coord_remainder = coord_remainder[0:3]
    return ".".join([coord_list[0], coord_remainder])

def update_display(tail, text):
    return render.Row(
        children = [
            render.Box(
                width = 32,
                child = render.Image(tail),
            ),
            render.Box(
                child = render.Column(
                    children = text,
                ),
            ),
        ],
    )

def get_bearing(lat_1, lng_1, lat_2, lng_2):
    lat_1 = math.radians(float(lat_1))
    lat_2 = math.radians(float(lat_2))
    lng_1 = math.radians(float(lng_1))
    lng_2 = math.radians(float(lng_2))

    #Let ‘R’ be the radius of Earth,
    #‘L’ be the longitude,
    #‘θ’ be latitude,
    #‘β‘ be get_Bearing.
    #β = atan2(X,Y) where
    #X = cos θb * sin ∆L
    #Y = cos θa * sin θb – sin θa * cos θb * cos ∆L

    x = math.cos(lat_2) * math.sin((lng_2 - lng_1))
    y = math.cos(lat_1) * math.sin(lat_2) - math.sin(lat_1) * math.cos(lat_2) * math.cos((lng_2 - lng_1))
    bearing = math.degrees(math.atan2(x, y))

    # our compass brackets are broken up in 45 degree increments from 0 8
    # to find the right bracket we need degrees from 0 to 360 then divide by 45 and round
    # what we get though is degrees -180 to 0 to 180 so this will convert to 0 to 360
    if bearing < 0:
        bearing = 360 + bearing

    return get_cardinal_point(bearing)

def get_cardinal_point(deg):
    # have bearning in degrees, now convert to cardinal point
    compass_brackets = ["North", "Northeast", "East", "Southeast", "South", "Southwest", "West", "Northwest", "North"]
    return compass_brackets[int(math.round(deg / 45))]

def main(config):
    api_key = config.get("key")
    hide_when_nothing_to_display = config.bool("hide", True)
    extend = config.bool("extend", True)

    if (api_key == "") or (api_key == None):
        tail = TAILS["Q4"]
        text = [
            render.Text("Add"),
            render.Text("API"),
            render.Text("Key"),
        ]
        return render.Root(
            child = update_display(tail, text),
        )

    location = json.decode(config.get("location", DEFAULT_LOCATION))

    orig_lat = location["lat"]
    orig_lng = location["lng"]

    lat = reduce_accuracy(orig_lat)
    lng = reduce_accuracy(orig_lng)

    cache_key = "_".join([lat, lng])

    flight_cached = cache.get(cache_key)
    if flight_cached != None:
        print("Hit! Displaying cached data.")
        flight = json.decode(flight_cached)
    else:
        print("Miss! Contacting Flight Radar")
        centrePoint = [float(lat), float(lng)]
        boundingBox = get_bounding_box(centrePoint, config.get("distance", DEFAULT_DISTANCE))
        rep = http.get(
            FLIGHT_RADAR_URL,
            params = {"bl_lat": boundingBox[0], "bl_lng": boundingBox[1], "tr_lat": boundingBox[2], "tr_lng": boundingBox[3], "altitude": "1000,60000"},
            headers = {"X-RapidAPI-Key": api_key, "X-RapidAPI-Host": "flight-radar1.p.rapidapi.com"},
        )
        if rep.status_code != 200:
            fail("Failed to fetch flights with status code:", rep.status_code)

        if rep.json()["aircraft"]:
            flights = rep.json()["aircraft"]
            if flights and len(flights) > 1:
                middle = (len(flights) // 2)
                flight = flights[middle]
            else:
                flight = flights[0]
        else:
            flight = []

        # TODO: Determine if this cache call can be converted to the new HTTP cache.
        cache.set(cache_key, json.encode(flight), ttl_seconds = DEFAULT_CACHE)

    if flight:
        origin = flight[12]
        destination = flight[13]
        flightNumber = flight[14]
        aircraftType = flight[9]
        airline = flightNumber[0:2]
        tail = is_key_present(airline)

        if extend:
            text = [
                render.Text("%s" % origin),
                render.Text("%s" % destination),
                render.Text("%s" % flightNumber),
                render.Marquee(
                    width = 32,
                    child = render.Text("Look %s for %s flying at %s feet, heading %s at %s mph" % (get_bearing(orig_lat, orig_lng, flight[2], flight[3]), aircraftType, humanize.comma(flight[5]), get_cardinal_point(flight[4]), humanize.comma(flight[6])), color = "#fff"),
                ),
            ]
        else:
            text = [
                render.Text("%s" % origin),
                render.Text("%s" % destination),
                render.Text("%s" % flightNumber),
                render.Text("%s" % aircraftType),
            ]
    elif hide_when_nothing_to_display == True:
        return []
    else:
        tail = TAILS["Q4"]
        text = [
            render.Text("No"),
            render.Text("Flights"),
            render.Text("Nearby"),
        ]

    return render.Root(
        child = update_display(tail, text),
        show_full_animation = True,
    )

def get_schema():
    options = [
        schema.Option(
            display = "1km",
            value = "1",
        ),
        schema.Option(
            display = "5km",
            value = "5",
        ),
        schema.Option(
            display = "10km",
            value = "10",
        ),
        schema.Option(
            display = "20km",
            value = "20",
        ),
    ]

    return schema.Schema(
        version = "1",
        fields = [
            schema.Location(
                id = "location",
                name = "Location",
                desc = "Your current location",
                icon = "locationDot",
            ),
            schema.Dropdown(
                id = "distance",
                name = "Distance",
                desc = "Search distance from your location.",
                icon = "rulerHorizontal",
                default = options[1].value,
                options = options,
            ),
            schema.Toggle(
                id = "hide",
                name = "Hide",
                desc = "Hide app when no flights nearby?",
                icon = "gear",
                default = False,
            ),
            schema.Toggle(
                id = "extend",
                name = "Extend",
                desc = "Show extended data for nearest flight?",
                icon = "gear",
                default = False,
            ),
            schema.Text(
                id = "key",
                name = "API key",
                desc = "Flight Radar API key",
                icon = "key",
            ),
        ],
    )
