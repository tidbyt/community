"""
Applet: Five Somewhere
Summary: Where it is 5 o'clock
Description: Displays a random timezone where it's currently in the 5 o'clock hour.
Author: grantmatheny
"""

load("encoding/base64.star", "base64")
load("random.star", "random")
load("render.star", "render")
load("schema.star", "schema")
load("time.star", "time")

MARTINI_ICON = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAACXBIWXMAIbEAACGxAAGFqWwEAAACRElEQVRIx+3U30tTYRwG8IVEEeVFBYIXQX+AN0V3EUQXEd0VQRhe5EVYQoEELQvBENqshGKQmpm/cnVUSqSmc0HBypluKz1Oc1s/NHOG0LLtOLXO0/PKKU6grdwZdNELn7Ed3vf5nr3f8x6TKcVxbOumHFpvSsdgcDbNUn66CtgoRGv/amF/IJxJO+ggHSczlVIZXaDi9mZ7EYPnbEUnS/g7yxsIJw3Noks0QirhdyoK8lF+NFd/bYLqKGfJAp7B0VLf8GtEv8QxOf0JofEIBoLv4OU1fXCDqx4XW87i1IFt6PO+RPh9ZHH+TFzh9yn0ykHXkgUsVc2ra9s6pWc+GTMxBaqqQgzxOb/wFYm5eSiJBKaiE4jNfsaP8Y3zYkoCcvAtJMcTr63p/uZlt4lFMuhmpb0DnoFXkMPjCI5N4s2HjxiLTMMX8qP2UTlsjhKUtRbC8bxr8R+2Ot2wVtvdXJuZtMGctIquXK1vw+N++Zft8cgjOGHdi7xrO3GuqQA9gwE0trvA+d207o+fIt6NKHT+cs1ddLq9Pws4H3bhuvk0+oaCYM9wQ3ogwjtozYqecy4sZDFVbIEoUFl8Br0vAnD7h8G9FuGS6F1Kh4kBubRQd8+Jp74hdPf4UXGrRYQ3iJ4ZcmIZtJ8UgqZK9MrQ1wIDj2jhoqHGv3cYulsr0JiWF9v/Av9EgX1aAclSfdvQ4I1kobjuHDhpe6rBgpmiumA9VTvNG1ZaIEO7U3WZAoKPthixRbvoEOXRYdpD2daaO0nXfwd97j9iHjgVlQAAAABJRU5ErkJggg==
""")

TROPICAL_DRINK_ICON1 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAOhSURBVEhLrZZLbBNXFIb/GU+cODGOExNjwHEBW0guaaQ+0kVBRa3arrrpgg0qrBAPISJBpTbtout2g9SqrdpNJERUsUHqSyKoEqA2VaM2VEDIAxEgyIHwmDgT24kfE9/pf8dTUcfjNEj9pH/OvSe+55w5d+ZOFPwPvHqiM0DzJvXTLydTRdvp8FQJPvhhz3GaZynhSGJNjE6+ZMwZPRy/xwQnK+4KqmPXysfUAeogddjRkc2dm3qC7a1IJOMtnFfxtAk+dWwVgWAAye4kQh2hj979fOcOx23j2qKR8VvraPZQr1BxqoOS1WnX0+ejE+mLHLoze3f2qmXh5dO9QyU599jef8HgTaqqjjdonv1lIV6gawsVpoJUIOxLINQUw1xhGqYo0PUEIQSyRi7Coe/aYOpn6au5g/6zg6Ge7qTelYhhqVBCbimPfNGEubwMwdIURUGDxwOvV8GthWH8evtHZArzdnBDN5BftJMKRt490PvbUM0ePNLT/nOXfsfI2BQyi0vwNXqxsSOIeDSC7bGNSHRGsDncDn8pj63TAu9s60PL/IswZswUg5tOGBUWdsqBZk+richq9PkFKGolv4YleKwCV5W5TuHVi+zZU1Ba16NxUxfWiQTiDbGvx6yvPrMsS26yYJsvV9bWEpOXNnMEycIofNYsFOufwioUMwJ/6Sp27NJRKp3BsBoH367o6WNDi/zzH5VfVXB7TJ+Rl7Ybp6DdOI/yzG2U9Ycoz89BLLDXRhql2bt47vlJ+NKX4R/5Av78HbnELmwlbgnsHwZLKZgPH6B4ZwqFyXEUxq4hP3oFuatXMPXndZiP76E0k0I5l4VfzMklUXlZiVuCiAcmWizDmVZjZE34mzU+RU+W+qwFaeTjWYNbgmaflXOGtXhUBeF2rzOr4OG2E789WYFbgnRRaeY9NDrTaoKBBmha9bIH6lZp5AbX4Jagn8HFoPcgFhX58tYno6zHoPcQE8jTBN/ZzhW4nkWffPPt2zRfqhCxsJhGyLrHPmfZimU2Q2PiVuhKDLoale+F7E8/1dt3aG/12UHqfg+YRL4jb1FvUN2ULFOeSxlqkrpJDVPfM3CK1pU1f3CY8DWaC9QAA+6znWvAbQ/q0eRY992vw3/eAStvp3mfOkY1Sx+RR/GHvBP7vFmNVRMweB+NVKvtqMaiBqijTJS1PS7UbRGDy4/R65T8j8ENWVwX1WbP6rDWFslAGyi5D/JofUxNsPL7tKsA/A0+fD1qhUelTQAAAABJRU5ErkJggg==
""")

TROPICAL_DRINK_ICON2 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAPISURBVEhLrZZLbBtVFIb/GU+cOHEd51HXBddQEiGFhkg8yoIiEAhYsWFRISpgB12gRgIkmm5YwAY2lUCAYEGkqlFhU4mXRCokiCCICFLUNs2jIm1TnJCWOs7EduLHxDP853pIYnuSthKf9M+599j3nHPvnXttDf8Dj76+K0TzFPXtT0cTBeV0uaUEh7/e/xrNPZTtSnAmx6YeNBfMvWy/wQRHy+4yt5TAScPpG9rv9tZJm2nM/TWH9h3tb/W/PPSO61borlVIALfpCYMfcZsVhMIhdPV04bPnht5+4YN9e1y3wnMGoxMXt9FIqQ9THdR2qokyzqdOxSZTP7LpzfyV+bOOg4eO9w4Xpe9T3g0weIOu6xN1hu+lkm3fT9edVIQKU6FIoBNtDXEs5Gdg2Xm61rFtGxkzG2UzcG4w8b34ambQf3KwbW9PV7K7M46VfBHZlRxyBQvW6ipslqZpGup8Pvj9Gi4ujeDnS98gnV9Uwc2kidyySmoz8mMDvb8MV+yB8E8yFfxu6FeMjk8jvbyCQL0fO7eH0RGL4u74TnTuiuL2SCuCxRx2z9h49q4+NC0+AHPWSjC45YbRuZv7pGGobiVRqSa5uARNL+c3sAKfk+eoEsdpfPqROXkMWnM76m/rxja7Ex118U/GnY/fdxxHNtnmMp8uj60lLo8WaxRd+TEEnHlozn+FlSmkbfyR1LHnkSSKxS8woneApyt2/NDwMj/+rfytMjVLRO6QR8uFYzAunEJp9hJKyWsoLS7AXuJamykU56/g3vumEEidRnD0QwRzl2WIKqyatQQbzoD6YriYgHXtKgqXp5GfmkB+/BxyY2eQPXsG07+fh3V9DsXZBErZDIL2ggyJyaP6LK0l0EJrb1TUBwtNjul2KzEzFoKNBt+i9ckHnCUx8npujKPwWqLGgJN1m7X4dA2RVr/bK+PjtpOg6lThlSBV0Bo5h3q3W0k4VAfDqBx2Vd8tRja4Bq8E/QxuD/pfwbImh3dz0lo7Bv0HmUBuE3ypnFV43kXvfnriGZqPdNjxiD2DNmeO65zhUqxyMQwmbkZSiyOpx+RcyPr0U719Bw9U3h3EM4HAJHJGnqaepHooKVPupTQ1Rf1JjVBfMXCC1pNNE1TDhI/T/EANMOCLynkTVOzBDX4PGlzrvfvEa/wNZ8DKW2nepA5RjeIjchUf4UzUfbMVWyZg8D4aUbP0Dz9/AO99fkKaglQ7QL3KRBnl8cDrNVUwuPwYPUHJPwbFhuCCFNdNtajeJtzsEkmgHZTsg1yt16lJVv437RYA/wIAtV1ZfohRZgAAAABJRU5ErkJggg==
""")

TROPICAL_DRINK_ICON3 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAPWSURBVEhLrZZdaFtlGMf/5+Q7TZP0wzhmF91ahLJu4HBe+InivPJOhjiYV7IpsiIK2t16pTcDQUVBh2NlejNQ9KJF0OE6KNrJtm5tt7XbQtZlc2mSJmnzcZJz/D8nZ11ycloV/MH/PO/7nPM+z/udKPgfePbdLWGaPdRPvx1JVkynxX9KYORhjJza+xWLuiXBmJ2eezy3lNvN8ntMcKThbqBa1mxsFf+JN6gD1JuW3npoy+bd0e4IBgb7O+xx1hIoYSi1/I4Nk7D3h61iC+FoGIM7B/H1q6c+3P/NU0OW28RxiqZmFjpp9lJPUv3UA1QH5b6YGe+bzfzKojOpROq8YeCJ48MTVam7TG8TVxO3/DXdmPG4Xa/XdX0XXY9QMSpKhWOBAfT441gq34Cml+m6j67rKOSKm1gMXBhL/iy+thGcHD/d8+i2eHpoII7VchXF1RJKFQ1arQadXVMUBR6XC16vgoXlSZy+9iPy5awZPJfOobRiJtUZ+bnR4TMTbSPY9cye2EJi8R2fzw+fz4Og34douAO9nOfeaCe6IyGEAn6o+SyC8yls2/oK5q9k8Vc6kSxVCkGGkJjS8SscxRm3BLWxSXqTzi5DURt7wI1VuIwyd0SdW0Th04vCyWNQIr3wbR5Cpz6Afk/8i0vG558YhrGdTXRVVc822rYTl0eXNoXB8jQCRgqKoZkv7lHJ6/gzrWL702lUq99hUu0HT1ff8UMTK3z9e+OrBmvbtImH5dF1+Rjcl8dRv3kN9fQd1LNL0Jc517kMqqkEdjw2h0DmLEJTnyJUui5NzI7ZMRPI4Wg6IOaH0WoS2p3bqFyfR3luBuVLF1CaPofi+XOY/+MitLuLqN5Mol4sIKQvSZM+edhiNRLIIROZHq6BCxo6jJxVbSVX0BAKurmL7g8+YCyLke1pj+U4RcGAUbSK7bhUBbFur1Vr4OKyk5BZseGUIFNRghyDz6q2Eg174Ha3NrutbhUjC9yGU4KjDK6PeQ9gRZHDuz55pRdj3oNMILcJvjedNhzvoo++PPEyzWcq9HhMv4EeY5HzXOBU1DgZbiaOIK3EkVb75FzI/BylhkcO7mu9O4hjAoFJ5Iy8RL1I7aSkm3Iv5ak56io1Sf3AwElaR9ZNYIcJn6f5hRplwP2m81/Qsgb2Hwsbfss6rz5xar82AnnZvH/vwZ5307xPHaLkMhPkKj7MkZj3TTP2OBtOEYOP0IgiUv/gtX34+NsTUhSkt6PU20xUMD0OOG1TEwaXa/cFSv4xOCGdk5/HLrO2DhuOQLCmSAI9SMk6yNV6l5plz2/RbgDwNxyxZYXfvFVkAAAAAElFTkSuQmCC
""")

TROPICAL_DRINK_ICON4 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAPbSURBVEhLlZZfaFtVHMe/9yZNmzZL03aL2ZZmzgQhrBb8Ux+cKIr65IsPQzaYT7Ipsj4oaPfqk74MBBUFLY6VKcJAUbBD0KIVi3ayreufYbd1pLObS9M0SZs/t7nX7+/ktsuf21I/8L3nnF/u7/c753fuOa2G/4GVgaX50eDz1JvdfjbPU9//cipRVEYb9fJmjvXIewMjhz5j17QlWNMTM4+lF9N97L/FBKeq4+nykIEYpb8NXqWOUa/Zen1v956+QGc7YvFoW/1kVQJhO0k4+5N2twZ/wI94bxyfvzzy7tEvDvbYZoVjWcanru1gc4h6gopSu6g2yn0ldT48nfqZXWcWbi5csiw8fqZ/tCRjl7JWweAtuq5PNbldr5RN8xGa7qeCVIDyB70xdLVEsFiYg2EWaLqHaZrIpnMhdr2XhxM/iq1hBYPnhrv6euPJnlgEq4UScqt55IsGjLU1mJyapmlocrng8Wi4tjyGX69/h0xhSQVPJ9PIr6ikJiM/PdT/2+jGHqzzbzLl+2Hkd4xPziKzsgpvswe7dwUQDYfwYGQ3Yt0h7A12wlfKY/+ciZceGEDb0qNIzxsJBjfsMDp386B03GpYS0hmk1xahqZX8ruxCpdVoFeZfhqfHmTPnYbWvhPNe3qww4wh2hT5ZNL6+APLsg7QxWSZL1R8G4nIo8MYR7wwAa+1wM9rfWIVihkTfyV1HHgyiVLpK4zpUfB0hc+cGF3hz39U3qrQUCKyTx4dV0/DffU8yvPXUU7eQXlpEeYya51OobRwEw89PANv6gJ84x/Cl78hLmpi9ejy7a/LtqkXA6UEjDu3Ubwxi8LMFAqTl5GfuIjcpYuY/fMKjLu3UJpPoJzLwmcuiktYHvXxdDlg6xIDCblgoM1K28Na0lkDvlY3v6J7i/day9LI56kObHU8pxK1eq2c3W3EpWsIdnrsUQUXt5341KAOpwSpotbKNTTbw1oC/ia43bVut/X90sgGN+CUYJDBzWHPMaxocng3J6PtxLDnOBPIbYJvlLEOx7vovU/PvsjmIx1mJGjOocu6xTpnWYo1FsPNxO1IahEk9bCcC6nPINU/cPxI7d1BHBMITCJn5AXqOaqXkmnKvZShZqi/qTHqWwZOsHVk0wT1MOEzbH6ihhjwqDJug5o9qDoLTrTYrfPuEyf/jRXIj1VnYQPOvJPN29QJqlVsRK7ik1yJum+qqY+jOlsEH2AjapfxO4eP4P0vz0pXkNkOUW8wUVZZbKrjqRJtElz+GD1LyX8MToiP/HnsUKMqGlawFXaJJNB9XMHXXMFh9u9S05z5P2y3APgPkgF++pYtmwwAAAAASUVORK5CYII=
""")

TROPICAL_DRINK_ICON5 = base64.decode("""
iVBORw0KGgoAAAANSUhEUgAAABgAAAAYCAYAAADgdz34AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAPnSURBVEhLjZVfbFNVHMe/9/auo13pugGzQFfELpKGucTofBDjv4hPvvhADCS8EdAHZqIRxitPmBgSEzWa6CKyoNEQNRodIdFFR1xkIDi2FR0D0uGGu2u7bv1713v8/e49nW1vt+yTfO/vnF/P+f3O+Z2eexWRhlD8ULAOVhv79BvtfjJ7Sd//cjpesJwSa/B6k/C43sF9H1PTlGLExGjs8dR8qpvab1KC05XxVH5wx0jvFdxeB4dIh0mvSr22vX1bd6C1GR3RSFPtYq0ETIP/ojI5fmi9SarwB/yIdkXxySuDJw9+uqdTui0cZSmld4k/pn/gmu4jPUmKkLaQmkjajcSF0ETiZ2pWc+rZr0Dlw8zdmetC4ImzPUNF9jsSjIzf2qCqakxzqTuKxrL0VjOb/QtX575GxkhKj41pmpRglpvv9L9+6S1uOBL0nR/Y1N0V1Ts7wsjmi1jK5pArGDCWl2HS0hRFQYPLBbdbwa2FYfw69R3S+aQVPKWnkMvkOYxJkZ/p77k0tHIGZf7VE74fB3/DyNgk0pksPI1ubN0SQCQUxMPhrehoD2J7Wyt8xRx23jHx8kO9aEo+htS0EafghgyjQmAPNzSrW02QV6MnF6Codn4NWbhEnmaVaJ5CTzcWz5+B0rwZjds6sdHsQKQh/OGY+OBdIcRummJSma/Yc52E+dFijCCaH4VHzEAR5YXZFNImruoqdj+lo1j8AsNqBHS7QmePDmXo59/tUTaOEhE7+NFy8wy0mxdQmp5CSb+PUnIe5gLVOpVAceYuHnk0Bk/iCnwj78GXu81TrIXVovLFKEv6rIGBYhzG/VkUbk8iHxtHfuxP5EavYen6NUxevgFj7h6K03GUlhbhM+d5SqgyVlkq37qyeBQRdMFAk0jJbjWpRQM+r0b/ov837xELbIKVscqqVyKvRyzJphOXqqCt1S17Ni46dsJndWqolyBRULy0h0bZrSbgb4CmVU+bVXey4QN2UC9BHwU3B9yHkVEC0lWftLIZA+4jlIDfJvjGctbguMnMqY/OvUTmfRVmuM28g03iHtV5kUqxTMXQKHEzdCUMXQ3xveD69JF6eo8csK5xJXUTMJSE78iLpBdIXSRe5oOkNClG+ps0TPqWAsfJ1sWRgP9afPqyuwIlfI7MT6R+CnjQclaw2ryqM1htkGSDtHVPn+fxfNldYSXYGitvJXOMdPT4/gPetz8/x+6LpBO0E+t9U0ltHGsHawTvJTNFOk7ysk/CH/jL9PtnpI22y6Z2J9arYpXgLjLPk/jrVg+ew5/HFqtXQWUSR+BaZIk40ANUoi+pRPupPUeaoBL9Q3YNgP8AErGbazfFjrgAAAAASUVORK5CYII=
""")

TIMEZONES = [
    "Africa/Abidjan",
    "Africa/Accra",
    "Africa/Addis_Ababa",
    "Africa/Algiers",
    "Africa/Asmara",
    "Africa/Asmera",
    "Africa/Bamako",
    "Africa/Bangui",
    "Africa/Banjul",
    "Africa/Bissau",
    "Africa/Blantyre",
    "Africa/Brazzaville",
    "Africa/Bujumbura",
    "Africa/Cairo",
    "Africa/Casablanca",
    "Africa/Ceuta",
    "Africa/Conakry",
    "Africa/Dakar",
    "Africa/Dar_es_Salaam",
    "Africa/Djibouti",
    "Africa/Douala",
    "Africa/El_Aaiun",
    "Africa/Freetown",
    "Africa/Gaborone",
    "Africa/Harare",
    "Africa/Juba",
    "Africa/Kampala",
    "Africa/Khartoum",
    "Africa/Kigali",
    "Africa/Kinshasa",
    "Africa/Libreville",
    "Africa/Lome",
    "Africa/Luanda",
    "Africa/Lubumbashi",
    "Africa/Lusaka",
    "Africa/Malabo",
    "Africa/Maseru",
    "Africa/Mbabane",
    "Africa/Mogadishu",
    "Africa/Monrovia",
    "Africa/Ndjamena",
    "Africa/Niamey",
    "Africa/Nouakchott",
    "Africa/Ouagadougou",
    "Africa/Porto-Novo",
    "Africa/Sao_Tome",
    "Africa/Timbuktu",
    "Africa/Tripoli",
    "Africa/Tunis",
    "Africa/Windhoek",
    "America/Adak",
    "America/Anchorage",
    "America/Anguilla",
    "America/Antigua",
    "America/Araguaina",
    "America/Argentina/Buenos_Aires",
    "America/Argentina/Catamarca",
    "America/Argentina/Cordoba",
    "America/Argentina/Jujuy",
    "America/Argentina/La_Rioja",
    "America/Argentina/Mendoza",
    "America/Argentina/Rio_Gallegos",
    "America/Argentina/Salta",
    "America/Argentina/San_Juan",
    "America/Argentina/San_Luis",
    "America/Argentina/Tucuman",
    "America/Argentina/Ushuaia",
    "America/Aruba",
    "America/Asuncion",
    "America/Atikokan",
    "America/Atka",
    "America/Bahia",
    "America/Bahia_Banderas",
    "America/Barbados",
    "America/Belem",
    "America/Belize",
    "America/Blanc-Sablon",
    "America/Boa_Vista",
    "America/Bogota",
    "America/Boise",
    "America/Buenos_Aires",
    "America/Cambridge_Bay",
    "America/Campo_Grande",
    "America/Cancun",
    "America/Caracas",
    "America/Catamarca",
    "America/Cayenne",
    "America/Cayman",
    "America/Chicago",
    "America/Chihuahua",
    "America/Coral_Harbour",
    "America/Cordoba",
    "America/Costa_Rica",
    "America/Creston",
    "America/Cuiaba",
    "America/Curacao",
    "America/Danmarkshavn",
    "America/Dawson",
    "America/Dawson_Creek",
    "America/Denver",
    "America/Detroit",
    "America/Dominica",
    "America/Edmonton",
    "America/Eirunepe",
    "America/El_Salvador",
    "America/Ensenada",
    "America/Fort_Nelson",
    "America/Fort_Wayne",
    "America/Fortaleza",
    "America/Glace_Bay",
    "America/Godthab",
    "America/Goose_Bay",
    "America/Grand_Turk",
    "America/Grenada",
    "America/Guadeloupe",
    "America/Guatemala",
    "America/Guayaquil",
    "America/Guyana",
    "America/Halifax",
    "America/Havana",
    "America/Hermosillo",
    "America/Indiana/Indianapolis",
    "America/Indiana/Knox",
    "America/Indiana/Marengo",
    "America/Indiana/Petersburg",
    "America/Indiana/Tell_City",
    "America/Indiana/Vevay",
    "America/Indiana/Vincennes",
    "America/Indiana/Winamac",
    "America/Indianapolis",
    "America/Inuvik",
    "America/Iqaluit",
    "America/Jamaica",
    "America/Jujuy",
    "America/Juneau",
    "America/Kentucky/Louisville",
    "America/Kentucky/Monticello",
    "America/Kralendijk",
    "America/La_Paz",
    "America/Lima",
    "America/Los_Angeles",
    "America/Louisville",
    "America/Lower_Princes",
    "America/Maceio",
    "America/Managua",
    "America/Manaus",
    "America/Marigot",
    "America/Martinique",
    "America/Matamoros",
    "America/Mazatlan",
    "America/Mendoza",
    "America/Menominee",
    "America/Merida",
    "America/Metlakatla",
    "America/Mexico_City",
    "America/Miquelon",
    "America/Moncton",
    "America/Monterrey",
    "America/Montevideo",
    "America/Montreal",
    "America/Montserrat",
    "America/Nassau",
    "America/New_York",
    "America/Nipigon",
    "America/Nome",
    "America/Noronha",
    "America/North_Dakota/Beulah",
    "America/North_Dakota/Center",
    "America/North_Dakota/New_Salem",
    "America/Nuuk",
    "America/Ojinaga",
    "America/Pangnirtung",
    "America/Paramaribo",
    "America/Port-au-Prince",
    "America/Port_of_Spain",
    "America/Porto_Acre",
    "America/Porto_Velho",
    "America/Punta_Arenas",
    "America/Rainy_River",
    "America/Rankin_Inlet",
    "America/Recife",
    "America/Regina",
    "America/Resolute",
    "America/Rio_Branco",
    "America/Rosario",
    "America/Santa_Isabel",
    "America/Santarem",
    "America/Santiago",
    "America/Santo_Domingo",
    "America/Sao_Paulo",
    "America/Scoresbysund",
    "America/Shiprock",
    "America/Sitka",
    "America/St_Barthelemy",
    "America/St_Johns",
    "America/St_Kitts",
    "America/St_Lucia",
    "America/St_Thomas",
    "America/St_Vincent",
    "America/Swift_Current",
    "America/Tegucigalpa",
    "America/Thule",
    "America/Thunder_Bay",
    "America/Tijuana",
    "America/Tortola",
    "America/Vancouver",
    "America/Virgin",
    "America/Whitehorse",
    "America/Winnipeg",
    "America/Yakutat",
    "America/Yellowknife",
    "Antarctica/Casey",
    "Antarctica/Davis",
    "Antarctica/DumontDUrville",
    "Antarctica/Macquarie",
    "Antarctica/Mawson",
    "Antarctica/McMurdo",
    "Antarctica/Palmer",
    "Antarctica/Rothera",
    "Antarctica/South_Pole",
    "Antarctica/Syowa",
    "Antarctica/Troll",
    "Antarctica/Vostok",
    "Arctic/Longyearbyen",
    "Asia/Aden",
    "Asia/Almaty",
    "Asia/Amman",
    "Asia/Anadyr",
    "Asia/Aqtau",
    "Asia/Aqtobe",
    "Asia/Ashgabat",
    "Asia/Ashkhabad",
    "Asia/Atyrau",
    "Asia/Baghdad",
    "Asia/Bahrain",
    "Asia/Baku",
    "Asia/Barnaul",
    "Asia/Beirut",
    "Asia/Bishkek",
    "Asia/Brunei",
    "Asia/Calcutta",
    "Asia/Chita",
    "Asia/Choibalsan",
    "Asia/Chongqing",
    "Asia/Chungking",
    "Asia/Colombo",
    "Asia/Dacca",
    "Asia/Damascus",
    "Asia/Dhaka",
    "Asia/Dili",
    "Asia/Dushanbe",
    "Asia/Famagusta",
    "Asia/Gaza",
    "Asia/Harbin",
    "Asia/Hebron",
    "Asia/Ho_Chi_Minh",
    "Asia/Hong_Kong",
    "Asia/Hovd",
    "Asia/Irkutsk",
    "Asia/Istanbul",
    "Asia/Jakarta",
    "Asia/Jayapura",
    "Asia/Jerusalem",
    "Asia/Kabul",
    "Asia/Kamchatka",
    "Asia/Karachi",
    "Asia/Kashgar",
    "Asia/Kathmandu",
    "Asia/Katmandu",
    "Asia/Khandyga",
    "Asia/Kolkata",
    "Asia/Krasnoyarsk",
    "Asia/Kuala_Lumpur",
    "Asia/Kuching",
    "Asia/Kuwait",
    "Asia/Macao",
    "Asia/Macau",
    "Asia/Magadan",
    "Asia/Makassar",
    "Asia/Manila",
    "Asia/Muscat",
    "Asia/Nicosia",
    "Asia/Novokuznetsk",
    "Asia/Novosibirsk",
    "Asia/Omsk",
    "Asia/Oral",
    "Asia/Phnom_Penh",
    "Asia/Pontianak",
    "Asia/Pyongyang",
    "Asia/Qostanay",
    "Asia/Qyzylorda",
    "Asia/Rangoon",
    "Asia/Saigon",
    "Asia/Sakhalin",
    "Asia/Samarkand",
    "Asia/Seoul",
    "Asia/Shanghai",
    "Asia/Srednekolymsk",
    "Asia/Taipei",
    "Asia/Tashkent",
    "Asia/Tbilisi",
    "Asia/Tehran",
    "Asia/Tel_Aviv",
    "Asia/Thimbu",
    "Asia/Thimphu",
    "Asia/Tokyo",
    "Asia/Tomsk",
    "Asia/Ujung_Pandang",
    "Asia/Ulaanbaatar",
    "Asia/Ulan_Bator",
    "Asia/Urumqi",
    "Asia/Ust-Nera",
    "Asia/Vientiane",
    "Asia/Vladivostok",
    "Asia/Yakutsk",
    "Asia/Yangon",
    "Asia/Yekaterinburg",
    "Asia/Yerevan",
    "Atlantic/Azores",
    "Atlantic/Bermuda",
    "Atlantic/Canary",
    "Atlantic/Cape_Verde",
    "Atlantic/Faeroe",
    "Atlantic/Faroe",
    "Atlantic/Jan_Mayen",
    "Atlantic/Madeira",
    "Atlantic/Reykjavik",
    "Atlantic/South_Georgia",
    "Atlantic/St_Helena",
    "Atlantic/Stanley",
    "Australia/ACT",
    "Australia/Adelaide",
    "Australia/Brisbane",
    "Australia/Broken_Hill",
    "Australia/Canberra",
    "Australia/Currie",
    "Australia/Darwin",
    "Australia/Eucla",
    "Australia/Hobart",
    "Australia/LHI",
    "Australia/Lindeman",
    "Australia/Lord_Howe",
    "Australia/Melbourne",
    "Australia/North",
    "Australia/NSW",
    "Australia/Perth",
    "Australia/Queensland",
    "Australia/South",
    "Australia/Sydney",
    "Australia/Tasmania",
    "Australia/Victoria",
    "Australia/West",
    "Australia/Yancowinna",
    "Brazil/Acre",
    "Brazil/DeNoronha",
    "Brazil/East",
    "Brazil/West",
    "Canada/Atlantic",
    "Canada/Central",
    "Canada/Eastern",
    "Canada/Mountain",
    "Canada/Newfoundland",
    "Canada/Pacific",
    "Canada/Saskatchewan",
    "Canada/Yukon",
    "Chile/Continental",
    "Chile/EasterIsland",
    "Europe/Amsterdam",
    "Europe/Andorra",
    "Europe/Astrakhan",
    "Europe/Athens",
    "Europe/Belfast",
    "Europe/Berlin",
    "Europe/Bratislava",
    "Europe/Brussels",
    "Europe/Bucharest",
    "Europe/Budapest",
    "Europe/Busingen",
    "Europe/Chisinau",
    "Europe/Copenhagen",
    "Europe/Dublin",
    "Europe/Gibraltar",
    "Europe/Guernsey",
    "Europe/Isle_of_Man",
    "Europe/Istanbul",
    "Europe/Jersey",
    "Europe/Kaliningrad",
    "Europe/Kiev",
    "Europe/Kirov",
    "Europe/Lisbon",
    "Europe/Ljubljana",
    "Europe/London",
    "Europe/Luxembourg",
    "Europe/Madrid",
    "Europe/Malta",
    "Europe/Mariehamn",
    "Europe/Minsk",
    "Europe/Monaco",
    "Europe/Moscow",
    "Europe/Nicosia",
    "Europe/Paris",
    "Europe/Podgorica",
    "Europe/Riga",
    "Europe/Samara",
    "Europe/San_Marino",
    "Europe/Sarajevo",
    "Europe/Saratov",
    "Europe/Skopje",
    "Europe/Sofia",
    "Europe/Stockholm",
    "Europe/Tallinn",
    "Europe/Tirane",
    "Europe/Tiraspol",
    "Europe/Ulyanovsk",
    "Europe/Uzhgorod",
    "Europe/Vaduz",
    "Europe/Vatican",
    "Europe/Vienna",
    "Europe/Vilnius",
    "Europe/Volgograd",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Zaporozhye",
    "Greenwich",
    "Indian/Antananarivo",
    "Indian/Chagos",
    "Indian/Christmas",
    "Indian/Cocos",
    "Indian/Comoro",
    "Indian/Kerguelen",
    "Indian/Mahe",
    "Indian/Maldives",
    "Indian/Mauritius",
    "Indian/Mayotte",
    "Mexico/BajaNorte",
    "Mexico/BajaSur",
    "Mexico/General",
    "Navajo",
    "Pacific/Apia",
    "Pacific/Bougainville",
    "Pacific/Chatham",
    "Pacific/Chuuk",
    "Pacific/Easter",
    "Pacific/Efate",
    "Pacific/Enderbury",
    "Pacific/Fakaofo",
    "Pacific/Fiji",
    "Pacific/Funafuti",
    "Pacific/Galapagos",
    "Pacific/Gambier",
    "Pacific/Guadalcanal",
    "Pacific/Johnston",
    "Pacific/Kanton",
    "Pacific/Kiritimati",
    "Pacific/Kosrae",
    "Pacific/Kwajalein",
    "Pacific/Majuro",
    "Pacific/Marquesas",
    "Pacific/Midway",
    "Pacific/Nauru",
    "Pacific/Niue",
    "Pacific/Norfolk",
    "Pacific/Noumea",
    "Pacific/Palau",
    "Pacific/Pitcairn",
    "Pacific/Pohnpei",
    "Pacific/Ponape",
    "Pacific/Rarotonga",
    "Pacific/Saipan",
    "Pacific/Samoa",
    "Pacific/Tahiti",
    "Pacific/Tarawa",
    "Pacific/Tongatapu",
    "Pacific/Truk",
    "Pacific/Wake",
    "Pacific/Wallis",
    "Pacific/Yap",
    "US/Alaska",
    "US/Aleutian",
    "US/Arizona",
    "US/Central",
    "US/East-Indiana",
    "US/Eastern",
    "US/Hawaii",
    "US/Indiana-Starke",
    "US/Michigan",
    "US/Mountain",
    "US/Pacific",
    "US/Samoa",
    "UTC",
]

def main(config):
    widgetMode = config.bool("$widget")

    drinking_timezones = []

    # construct list of timezones in which it is 5 o'clock
    for timezone in TIMEZONES:
        hour = time.now().in_location(timezone).hour
        if hour == 17:
            drinking_timezones.append(timezone)

    # get random timezone from list of drinking timezones
    location = drinking_timezones[random.number(0, len(drinking_timezones) - 1)]

    if "/" in location:
        split_location = location.split("/")
        if widgetMode:
            location = split_location[-1]
        elif len(split_location) == 2:
            location = split_location[1] + ", " + split_location[0]
        elif len(split_location) == 3:
            location = split_location[2] + ", " + split_location[1]

    # Display fixes for special cases
    location = location.replace("_", " ")
    location = location.replace("St ", "St. ")
    location = location.replace("East-", "")  # for US/East-Indiana
    location = location.replace("East, Brazil", "East Brazil")  # for Brazil/East
    location = location.replace("West, Brazil", "West Brazil")  # for Brazil/West
    location = location.replace("General, Mexico", "Mexico")  # for Mexico/General
    location = location.replace("BajaNorte", "Baja Norte")  # for Mexico/BajaNorte
    location = location.replace("BajaSur", "Baja Sur")  # for Mexico/BajaSur
    location = location.replace("Navajo", "Navajo Nation")  # for Navajo
    location = location.replace("DumontDUrville", "Dumont-d'Urville")  # for Antarctica/DumontDUrville
    location = location.replace("EasterIsland", "Easter Island")  # for Chile/EasterIsland

    current_time_here = time.now().in_location(config.get("$tz", "America/Los_Angeles"))
    threshold_minutes = int(config.get("past_the_hour", "15"))

    if current_time_here.hour == 17 and current_time_here.minute < threshold_minutes:
        if current_time_here.format("Monday") == "Friday":
            completion_message = "PARTY LIKE IT'S FRIDAY" if not widgetMode else "FRIDAY! PARTY!"
        else:
            completion_message = "You made it! Nice job!" if not widgetMode else "You made it!"
        return render.Root(
            delay = 100,
            child = render.Column(
                children = [
                    render.Column(
                        children = [
                            render.Row(
                                main_align = "center",
                                cross_align = "center",
                                children = [
                                    render.Column(
                                        children = [
                                            render.Text(
                                                content = " It's five",
                                                color = "#fA0",
                                            ),
                                            render.Text(
                                                content = " o'clock",
                                                color = "#fA0",
                                            ),
                                            render.Text(
                                                content = " here!",
                                                color = "#fA0",
                                            ),
                                        ],
                                    ),
                                    render.Animation(
                                        children = [
                                            render.Image(
                                                src = TROPICAL_DRINK_ICON1,
                                            ),
                                            render.Image(
                                                src = TROPICAL_DRINK_ICON2,
                                            ),
                                            render.Image(
                                                src = TROPICAL_DRINK_ICON3,
                                            ),
                                            render.Image(
                                                src = TROPICAL_DRINK_ICON4,
                                            ),
                                            render.Image(
                                                src = TROPICAL_DRINK_ICON5,
                                            ),
                                        ],
                                    ),
                                ],
                            ),
                        ],
                    ),
                    render.Marquee(
                        width = 64,
                        child = render.Text(completion_message, color = "#09f"),
                    ) if not widgetMode else render.Text(
                        content = completion_message,
                        color = "#09f",
                    ),
                ],
            ),
        )

    return render.Root(
        delay = 50,
        child = render.Column(
            children = [
                render.Column(
                    children = [
                        render.Row(
                            main_align = "center",
                            cross_align = "center",
                            children = [
                                render.Column(
                                    children = [
                                        render.Text(
                                            content = " It's five",
                                            color = "#fA0",
                                        ),
                                        render.Text(
                                            content = " o'clock",
                                            color = "#fA0",
                                        ),
                                        render.Text(
                                            content = " in",
                                            color = "#fA0",
                                        ),
                                    ],
                                ),
                                render.Image(
                                    src = MARTINI_ICON,
                                ),
                            ],
                        ),
                    ],
                ),
                render.Marquee(
                    width = 64,
                    child = render.Text(location, color = "#09f"),
                ),
            ],
        ),
    )

def get_schema():
    options = [
        schema.Option(
            display = "5 Minutes",
            value = "5",
        ),
        schema.Option(
            display = "10 Minutes",
            value = "10",
        ),
        schema.Option(
            display = "15 Minutes",
            value = "15",
        ),
        schema.Option(
            display = "20 Minutes",
            value = "20",
        ),
        schema.Option(
            display = "The whole 5 o'clock hour!",
            value = "60",
        ),
        schema.Option(
            display = "Disabled",
            value = "0",
        ),
    ]

    return schema.Schema(
        version = "1",
        fields = [
            schema.Dropdown(
                id = "past_the_hour",
                name = "5 o'clock celebration time",
                desc = "How long after the 5 o'clock hour should your Tidbyt continue to celebrate that you got there?",
                icon = "gear",
                default = options[2].value,
                options = options,
            ),
        ],
    )
