"""
Applet: Plex Recently Added
Summary: Display Plex recently added
Description: Displays recently added on Plex server. Recommended to set up a local proxy server `index.js` to host the data. See <link here> for more information. See README.md for more information.
Author: noahpodgurski
"""

load("animation.star", "animation")
load("encoding/base64.star", "base64")
load("http.star", "http")
load("render.star", "render")
load("schema.star", "schema")

REFRESH_TIME = 600  #every 10 minutes

SAMPLE_DATA = {
    "MediaContainer": {
        "Metadata": [
            {
                "title": "Aquaman",
                "contentRating": "PG-13",
            },
            {
                "title": "A Walk to Remember",
                "titleSort": "Walk to Remember",
                "contentRating": "PG",
            },
            {
                "title": "Enemy at the Gates",
                "contentRating": "R",
            },
        ],
    },
}

SAMPLE_IMAGES = [
    "",
    "",
    "",
]

PLEX_ICON = "iVBORw0KGgoAAAANSUhEUgAAAAsAAAAQCAYAAADAvYV+AAAACXBIWXMAAAsTAAALEwEAmpwYAAAFHGlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENvcmUgNS42LWMxNDUgNzkuMTYzNDk5LCAyMDE4LzA4LzEzLTE2OjQwOjIyICAgICAgICAiPiA8cmRmOlJERiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIgeG1wOkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ0MgMjAxOSAoV2luZG93cykiIHhtcDpDcmVhdGVEYXRlPSIyMDIzLTA5LTIzVDE3OjQ0OjM0LTA0OjAwIiB4bXA6TW9kaWZ5RGF0ZT0iMjAyMy0wOS0yM1QxNzo0Njo0OC0wNDowMCIgeG1wOk1ldGFkYXRhRGF0ZT0iMjAyMy0wOS0yM1QxNzo0Njo0OC0wNDowMCIgZGM6Zm9ybWF0PSJpbWFnZS9wbmciIHBob3Rvc2hvcDpDb2xvck1vZGU9IjMiIHBob3Rvc2hvcDpJQ0NQcm9maWxlPSJzUkdCIElFQzYxOTY2LTIuMSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpkOGNiY2RkYS1mMzg1LTgxNDctOWViMi1mOTU5ZWI3Mjg2YTIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6ZDhjYmNkZGEtZjM4NS04MTQ3LTllYjItZjk1OWViNzI4NmEyIiB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6ZDhjYmNkZGEtZjM4NS04MTQ3LTllYjItZjk1OWViNzI4NmEyIj4gPHhtcE1NOkhpc3Rvcnk+IDxyZGY6U2VxPiA8cmRmOmxpIHN0RXZ0OmFjdGlvbj0iY3JlYXRlZCIgc3RFdnQ6aW5zdGFuY2VJRD0ieG1wLmlpZDpkOGNiY2RkYS1mMzg1LTgxNDctOWViMi1mOTU5ZWI3Mjg2YTIiIHN0RXZ0OndoZW49IjIwMjMtMDktMjNUMTc6NDQ6MzQtMDQ6MDAiIHN0RXZ0OnNvZnR3YXJlQWdlbnQ9IkFkb2JlIFBob3Rvc2hvcCBDQyAyMDE5IChXaW5kb3dzKSIvPiA8L3JkZjpTZXE+IDwveG1wTU06SGlzdG9yeT4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz4JwM60AAAAUElEQVQokWN4vZ7hPzbMgAb+/4cKEdIAUghXjEsDSYrRNaDoIOh+dCsoVgzXgOF4fBpIVkyUQpSYIdaDxJiKEs6EFJIX3cSYClZMTBKFKQYA98tFtTrO73IAAAAASUVORK5CYII="

def requestStatus(serverIP, serverPort, plexToken, apiKey):
    res = http.get(
        "http://%s:%d/library/recentlyAdded" % (serverIP, serverPort),
        headers = {
            "Accept": "application/json",
            "X-Plex-Token": plexToken,
            "x-api-key": apiKey,
        },
        ttl_seconds = REFRESH_TIME,
    )
    if res.status_code != 200:
        fail("request failed with status %d", res.status_code)
    res = res.json()
    return res

def requestThumb(serverIP, serverPort, plexToken, apiKey, thumbnailURL):
    res = http.get(
        "http://%s:%d%s" % (serverIP, serverPort, thumbnailURL),
        headers = {
            "Accept": "image/jpeg",
            "X-Plex-Token": plexToken,
            "x-api-key": apiKey,
        },
        ttl_seconds = REFRESH_TIME,
    )
    if res.status_code != 200:
        fail("request failed with status %d", res.status_code)
    return res.body()

def main(config):
    usingSampleData = False
    serverIP = config.str("serverIP")
    serverPort = config.str("serverPort")
    plexToken = config.str("plexToken")
    apiKey = config.str("apiKey", "")
    showTitleCard = config.bool("showTitleCard", True)

    if not serverIP or type(int(serverPort)) != "int":
        usingSampleData = True
        print("Using sample data")

    if usingSampleData:
        # have to do it this weird way to dodge frozen hash table error
        newData = {}
        newData["MediaContainer"] = {}
        newData["MediaContainer"]["Metadata"] = []
        for i in range(0, 3):
            newData["MediaContainer"]["Metadata"].append({})
            newData["MediaContainer"]["Metadata"][i]["title"] = SAMPLE_DATA["MediaContainer"]["Metadata"][i]["title"]
            newData["MediaContainer"]["Metadata"][i]["thumb"] = SAMPLE_IMAGES[i]
        data = newData
    else:
        serverPort = int(serverPort)
        data = requestStatus(serverIP, serverPort, plexToken, apiKey)

    recentlyAdded = []

    #only show last 3
    for i in range(0, 3):
        entry = data["MediaContainer"]["Metadata"][i]
        if entry.get("parentThumb"):
            thumbnailURL = entry["parentThumb"]
        else:
            thumbnailURL = entry["thumb"]

        if not usingSampleData:
            thumbnail = requestThumb(serverIP, serverPort, plexToken, apiKey, thumbnailURL)
        else:
            thumbnail = base64.decode(entry["thumb"])

        recentlyAdded.append(
            render.Column(
                children = [
                    render.Image(src = thumbnail, width = 21, height = 27),
                    render.Marquee(
                        width = 21,
                        offset_start = 60 if showTitleCard else 0,  #offset to wait to slide in
                        child = render.Text(entry["title"], font = "CG-pixel-3x5-mono"),
                    ),
                ],
            ),
        )
        recentlyAdded.append(
            render.Box(height = 32, width = 1, color = "#EFAF08"),
        )

    if showTitleCard:
        return render.Root(
            render.Stack(
                children = [
                    animation.Transformation(
                        child = render.Column(
                            children = [
                                render.Box(height = 1, width = 64, color = "#EFAF08"),
                                render.Box(
                                    width = 64,
                                    height = 30,
                                    child = render.Row(
                                        main_align = "center",
                                        cross_align = "center",
                                        expanded = True,
                                        children = [
                                            render.Image(src = base64.decode(PLEX_ICON)),
                                            render.Box(width = 2),
                                            render.WrappedText("Recently Added", align = "center"),
                                        ],
                                    ),
                                ),
                                render.Box(height = 1, width = 64, color = "#EFAF08"),
                            ],
                        ),
                        duration = 200,
                        delay = 0,
                        origin = animation.Origin(0, 0),
                        keyframes = [
                            animation.Keyframe(
                                percentage = 0.0,
                                transforms = [animation.Translate(0, 0)],
                            ),
                            animation.Keyframe(
                                percentage = 0.1,
                                transforms = [animation.Translate(0, 0)],
                            ),
                            animation.Keyframe(
                                percentage = 0.2,
                                transforms = [animation.Translate(0, -32)],
                            ),
                            animation.Keyframe(
                                percentage = 1.0,
                                transforms = [animation.Translate(0, -32)],
                            ),
                        ],
                    ),
                    animation.Transformation(
                        child = render.Row(
                            children = recentlyAdded,
                        ),
                        duration = 200,
                        delay = 0,
                        origin = animation.Origin(0, 0),
                        keyframes = [
                            animation.Keyframe(
                                percentage = 0.0,
                                transforms = [animation.Translate(0, 32)],
                            ),
                            animation.Keyframe(
                                percentage = 0.1,
                                transforms = [animation.Translate(0, 32)],
                            ),
                            animation.Keyframe(
                                percentage = 0.2,
                                transforms = [animation.Translate(0, 0)],
                            ),
                            animation.Keyframe(
                                percentage = 1.0,
                                transforms = [animation.Translate(0, 0)],
                            ),
                        ],
                    ),
                ],
            ),
        )
    else:
        return render.Root(
            child = render.Row(
                children = recentlyAdded,
            ),
        )

def get_schema():
    return schema.Schema(
        version = "1",
        fields = [
            schema.Text(
                id = "serverIP",
                name = "Server IP",
                desc = "IP of Plex Server",
                icon = "gear",
            ),
            schema.Text(
                id = "serverPort",
                name = "Server Port",
                desc = "Ex: 32400",
                icon = "gear",
            ),
            schema.Text(
                id = "plexToken",
                name = "Plex-Token",
                desc = "\"X-Plex-Token\"",
                icon = "gear",
            ),
            schema.Text(
                id = "apiKey",
                name = "API Key",
                desc = "Use with proxy server (optional)",
                icon = "gear",
            ),
            schema.Toggle(
                id = "showTitleCard",
                name = "Show title card",
                desc = "Show title card",
                icon = "gear",
                default = True,
            ),
        ],
    )
